{
   "title": "Sirius Prototype",
   "version": "1.7.2",
   "time_stamp": "27-Oct-2022 16:47:21 UTC",
   "versionTimestamp": 202227101647,
   "maxConfigLives": 5,
   "liveGenTime": 30,
   "main": "categories",
   "sub": "subCategories",
   "learn": "learnCat",

"config": {
	"categories": {
		"dataStart": "GR1",
		"pattern": "mainScaffold",
		"header": "ID;name;ref;GR1;GR2;GR3;GR4;GR5;GR6;GR7;GR8;GR9;GR10;GR11;GR12;GR13;GR14;GR15;GR16;GR17;GR18;GR19;GR20;GR21;GR22;GR23;GR24;GR25;GR26;GR27;GR28;GR29;GR30;GR31;GR32;GR33;GR34;GR35;GR36;GR37;GR38;GR39;GR40;GR41;GR42;GR43;GR44;GR45;GR46;GR47;GR48;GR49",
		"elemList": [
			"CID00001;MC;groupsTest;ℛ(0)",
			"CID00002;Text;groupsTest;ℛ(1)",
			"CID00003;Sentence;groupsTest;ℛ(2)",
			"CID00004;Order;groupsTest;ℛ(3)",
			"CID00005;Slider;groupsTest;ℛ(4)"
		]
	},
	"groupsTest": {
		"dataStart": "T1",
		"pattern": "groupScaffold",
		"header": "ID;name;icon;progId;ref;T1;T2;T3;T4;T5;T6;T7;T8;T9;T10",
		"elemList": [
			"GroupTest001;MC;atmosphere;[1, 3, 13, 9, 10, 12];typesTest;ℛ(0)",
			"GroupTest002;Text;atmosphere;[2, 4, 17, 18, 19];typesTest;ℛ(1)",
			"GroupTest003;Sentence;flags;[5, 6, 7, 8];typesTest;ℛ(2)",
			"GroupTest004;Order;rivers;[11, 14, 15];typesTest;ℛ(3)",
			"GroupTest005;Slider;plants;[16];typesTest;ℛ(4)"
		]
	},
	"typesTest": {
		"dataStart": "G1",
		"header": "ID;name;ref;G1;G2;G3;G4;G5;G6;G7;G8;G9;G10;G11;G12;G13;G14;G15",
		"elemList": [
			"TypesTest001;MC Test;itemsTest;ℛ(0);ℛ(2);ℛ(12);ℛ(8);ℛ(9);ℛ(11)",
			"TypesTest002;Text Test;itemsTest;ℛ(1);ℛ(3);ℛ(16);ℛ(17);ℛ(18)",
			"TypesTest003;Sentece Test;itemsTest;ℛ(4);ℛ(5);ℛ(6);ℛ(7)",
			"TypesTest004;Order Test;itemsTest;ℛ(10);ℛ(13);ℛ(14)",
			"TypesTest005;Slider;itemsTest;ℛ(15)"
		]
	},
	"itemsTest": {
		"dataStart": "Q1",
		"pattern": "mvcScaffold",
		"header": "ID;name;icon;PassScore;fixedOrder;progId;ref;Q1;Q2;Q3;Q4;Q5;Q6;Q7;Q8;Q9;Q10;Q11;Q12;Q13;Q14;Q15;Q16;Q17;Q18;Q19;Q20;Q21;Q22;Q23;Q24;Q25;Q26;Q27;Q28;Q29;Q30",
		"elemList": [
			"ItemsTest001;MC Test (HardCoded);atmosphere;0.75;;1;mCTestQuestionsHardCoded;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7);ℛ(8);ℛ(9);ℛ(10);ℛ(11);ℛ(12);ℛ(13)",
			"ItemsTest002;Text Test (HardCoded);atmosphere;0.6;;2;textTestQuestionsHardCoded;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7);ℛ(8);ℛ(9)",
			"ItemsTest003;MC Test (Partially Referenced);atmosphere;0.75;;3;mCTestQuestionsReferenced;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7);ℛ(8);ℛ(9);ℛ(10);ℛ(11);ℛ(12);ℛ(13)",
			"ItemsTest004;Text Test (Referenced);atmosphere;0.6;;4;textTestQuestionsRef;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7);ℛ(8);ℛ(9)",
			"ItemsTest005;SenteceMC Test (Hard Coded);flags;0.75;;5;testsentenceCompletion;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7)",
			"ItemsTest006;SenteceText Test (Hard Coded);flags;0.75;;6;testsentenceCompletion;ℛ(8);ℛ(9);ℛ(10);ℛ(11);ℛ(12);ℛ(13);ℛ(14);ℛ(15)",
			"ItemsTest007;SenteceMC Test (Referenced);countries;0.75;;7;testsentenceCompletionRef;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7)",
			"ItemsTest008;SenteceText Test (Referenced);countries;0.75;;8;testsentenceCompletionRef;ℛ(8);ℛ(9);ℛ(10);ℛ(11);ℛ(12);ℛ(13);ℛ(14);ℛ(15)",
			"ItemsTest009;MC Multiple Image Test;continents;0.75;;9;mCTestQuestionsReferenced;ℛ(14);ℛ(14);ℛ(14);ℛ(14)",
			"ItemsTest010;MC Test;continents;0.75;;10;mCTestQuestionsHardCoded;ℛ(14);ℛ(14)",
			"ItemsTest011;Order Test (HardCoded);rivers;0.75;;11;order_questions;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5)",
			"ItemsTest012;MC Test Variable Coding;rivers;0.75;;12;mCTestQuestionsReferenced;ℛ(15);ℛ(15);ℛ(16);ℛ(16);ℛ(17);ℛ(17);ℛ(18);ℛ(18);ℛ(19);ℛ(19);ℛ(20);ℛ(20)",
			"ItemsTest013;MC Test Fully Referenced;countries;0.75;;13;mCTestQuestionsFullyReferenced;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4);ℛ(5);ℛ(6);ℛ(7);ℛ(8);ℛ(9);ℛ(10);ℛ(11);ℛ(12);ℛ(13);ℛ(14)",
			"ItemsTest014;Order Test (Partially Referenced);rivers;0.6;;14;order_questions;ℛ(6);ℛ(7);ℛ(8);ℛ(9);ℛ(10);ℛ(11)",
			"ItemsTest015;Order Test (Fully Referenced);flags;0.6;;15;order_questions;ℛ(12);ℛ(13);ℛ(14);ℛ(15);ℛ(16);ℛ(17)",
			"ItemsTest016;Horizontal Slider (Hard⊤(dash)Coded);plants;0.6;;16;hSliderQuestions;ℛ(0);ℛ(1);ℛ(2);ℛ(3)",
			"ItemsTest017;Text Variable Coding;earth_layers;0.6;;17;textTestQuestionsFullyRef;ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0)",
			"ItemsTest018;Text Variable Coding 2;atmosphere;0.7;;18;textTestQuestionsFullyRef;ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1)",
			"ItemsTest019;Text Variable Coding 3 (not sequential);plants;0.7;;19;textTestQuestionsFullyRef;ℛ(2);ℛ(2);ℛ(2);ℛ(2);ℛ(2);ℛ(2);ℛ(2);ℛ(2);ℛ(2);ℛ(2)"
		]
	},
	"order_questions": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;Answer_Text;Answer;AnswerOptions;Info1;Info2",
		"elemList": [
			"OrderTestQID00001;Order;;Sort from A to E;Letters;;This is A;[A,B,C,D,E];[A,B,C,D,E];Largest;Smallest",
			"OrderTestQID00002;Order;;Sort from 1 to 5;Numbers;;This is A;[1,2,3,4,5];[1,2,3,4,5];Largest;Smallest",
			"OrderTestQID00003;Order;;Sort from A to 2;Letters & numbers;;This is A;[A,B,1,2];[A,B,1,2];Largest;Smallest",
			"OrderTestQID00004;Order;;Sort from A to E;Image: Letters;assets/images/Antarctica.png;This is A;[A,B,C,D,E];[A,B,C,D,E];Largest;Smallest",
			"OrderTestQID00005;Order;;Sort from 1 to 5;Image: Numbers;assets/images/Antarctica.png;This is A;[1,2,3,4,5];[1,2,3,4,5];Closest;Furthest",
			"OrderTestQID00006;Order;;Sort from A to 2;Image: Letters & numbers;assets/images/Antarctica.png;This is A;[A,B,1,2];[A,B,1,2];Largest;Smallest",
			"OrderTestQID00007;Order;testData;Sort from A to E (Ref);Letters (Ref);;This is #ℛ(0,1)#.;ℛ([10‥13],1);ℛ([10‥13],1);Largest;Smallest",
			"OrderTestQID00008;Order;testData;Sort from 1 to 5 (Ref);Numbers (Ref);;This is A;ℛ([0‥3],1);ℛ([0‥3],1);Largest;Smallest",
			"OrderTestQID00009;Order;testData;Sort from A to 2 (Ref);Letters & numbers (Ref);;This is A;ℛ([10,11,0,1],1);ℛ([10,11,0,1],1);Largest;Smallest",
			"OrderTestQID00010;Order;testData;Sort from A to E (Ref);Image: Letters (Ref);ℛ(0,3);This is A;ℛ([10‥13],1);ℛ([10‥13],1);Largest;Smallest",
			"OrderTestQID00011;Order;testData;Sort from 1 to 5 (Ref);Image: Numbers (Ref);ℛ(1,3);This is A;ℛ([0‥3],1);ℛ([0‥3],1);Closest;Furthest",
			"OrderTestQID00012;Order;testData;Sort from A to 2 (Ref);Image: Letters & numbers (Ref);ℛ(2,3);This is A;ℛ([10,11,0,1],1);ℛ([10,11,0,1],1);Largest;Smallest",
			"OrderTestQID00013;Order;testData;Sort from A to E (Fully Ref);Letters (Fully Ref);;This is #ℛ(0,1)#.;ℛ([10‥13],1);ℛ([10‥13],1);ℛ(35,4);ℛ(35,5)",
			"OrderTestQID00014;Order;testData;Sort from 1 to 5 (Fully Ref);Numbers (Fully Ref);;This is A;ℛ([0‥3],1);ℛ([0‥3],1);ℛ(35,4);ℛ(35,5)",
			"OrderTestQID00015;Order;testData;Sort from A to 2 (Fully Ref);Letters & numbers (Fully Ref);;This is A;ℛ([10,11,0,1],1);ℛ([10,11,0,1],1);ℛ(35,4);ℛ(35,5)",
			"OrderTestQID00016;Order;testData;Sort from A to E (Fully Ref);Image: Letters (Fully Ref);ℛ(0,3);This is A;ℛ([10‥13],1);ℛ([10‥13],1);ℛ(35,4);ℛ(35,5)",
			"OrderTestQID00017;Order;testData;Sort from 1 to 5 (Fully Ref);Image: Numbers (Fully Ref);ℛ(1,3);This is A;ℛ([0‥3],1);ℛ([0‥3],1);ℛ(35,4);ℛ(35,5)",
			"OrderTestQID00018;Order;testData;Sort from A to 2 (Fully Ref);Image: Letters & numbers (Fully Ref);ℛ(2,3);This is A;ℛ([10,11,0,1],1);ℛ([10,11,0,1],1);ℛ(35,4);ℛ(35,5)"
		]
	},
	"textTestQuestionsFullyRef": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
		"elemList": [
			"TextFullyRefTestQuestions0001;Text;textVariableCodingTestData;#ℛ(_ans,2)#;#ℛ(_ans,3)#;ℛ(_ans,1);;#ℛ(_ans,5)#;ℛ(_ans,4);ℛ(_ans,6);ℛ([0‥9],4)",
			"TextFullyRefTestQuestions0002;Text;textVariableCodingTestData;#ℛ(_ans,2)#;#ℛ(_ans,3)#;ℛ(_ans,1);;#ℛ(_ans,5)#;ℛ(_ans,4);ℛ(_ans,6);ℛ([10‥19],4)",
			"TextFullyRefTestQuestions0003;Text;textVariableCodingTestData;#ℛ(_ans,2)#;#ℛ(_ans,3)#;ℛ(_ans,1);;#ℛ(_ans,5)#;ℛ(_ans,4);ℛ(_ans,6);ℛ([10,12,11,14,13,16,15,18,17,19],4)"
		]
	},
	"hSliderQuestions copy": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;Answer_Text;Answer;hints;scale;text;suffix;start;end;almostPer;corrPer;mapping;mapping_inx",
		"elemList": [
			"HSlider2Questions00001;Slider;;Answer: 50;Hard⊤(dash)Coded;;This is 50;50;;50;Absolute size (text);km2 (suffix);0;100;40;20",
			"HSlider2Questions00002;Slider;;Answer: 50000;Hard⊤(dash)Coded;;This is 50000;50000;;50000;Absolute size (text);km2 (suffix);0;100000;40;20",
			"HSlider2Questions00003;Slider;testData;Answer: 50;Hard⊤(dash)Coded with image;ℛ(0,3);This is 50;50;;50;Absolute size (text);km2 (suffix);0;100;40;20",
			"HSlider2Questions00004;Slider;testData;Answer: 50000;Hard⊤(dash)Coded with image;ℛ(0,3);This is 50000;50000;;50000;Absolute size (text);km2 (suffix);0;100000;40;20"
		]
	},
	"testsentenceCompletionRef": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;Descr;Sentence;hints;mapping;mapping_inx",
		"elemList": [
			"SentenceCompletionRef0001;Sentence;testDataSentence;Complete the sentence:;Sentence MC (Referenced—letters);;;This is #ℛ(0,2)#;ℛ(0,1);;ℛ(0,5);#ℛ(0,6)#;R1 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceCompletionRef0002;Sentence;testDataSentence;Complete the sentence:;Sentence MC (Referenced—letters with gaps);;;This is #ℛ(1,2)#;ℛ(1,1);;ℛ(1,5);#ℛ(1,6)#;R2 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceCompletionRef0003;Sentence;testDataSentence;Complete the sentence:;Sentence MC (Referenced—numbers);;;This is #ℛ(2,2)#;ℛ(2,1);;ℛ(2,5);#ℛ(2,6)#;#ℛ(2,7)#",
			"SentenceCompletionRef0004;Sentence;testDataSentence;Complete the sentence:;Sentence MC (Referenced—numbers with gaps);;;This is #ℛ(3,2)#;ℛ(3,1);;ℛ(3,5);#ℛ(3,6)#;#ℛ(3,7)#",
			"SentenceCompletionRef0005;Sentence;testDataSentence;Complete the sentence:;Sentence MC Image (Referenced—letters);ℛ(0,3);;This is #ℛ(0,2)#;ℛ(0,1);;ℛ(0,5);#ℛ(0,6)#;#ℛ(0,7)#",
			"SentenceCompletionRef0006;Sentence;testDataSentence;Complete the sentence:;Sentence MC Image (Referenced—letters with gaps);ℛ(0,3);;This is #ℛ(1,2)#;ℛ(1,1);;ℛ(1,5);#ℛ(1,6)#;#ℛ(1,7)#",
			"SentenceCompletionRef0007;Sentence;testDataSentence;Complete the sentence:;Sentence MC Image (Referenced—numbers);ℛ(0,3);;This is #ℛ(2,2)#;ℛ(2,1);;ℛ(2,5);#ℛ(2,6)#;#ℛ(2,7)#",
			"SentenceCompletionRef0008;Sentence;testDataSentence;Complete the sentence:;Sentence MC Image (Referenced—numbers with gaps);ℛ(0,3);;This is #ℛ(3,2)#;ℛ(3,1);;ℛ(3,5);#ℛ(3,6)#;#ℛ(3,7)#",
			"SentenceCompletionRef0009;Sentence;testDataSentence;Complete the sentence:;Sentence Text (Referenced—letters);;;This is #ℛ(0,2)#;ℛ(0,1);ℛ(0,4);;#ℛ(0,6)#;R9 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceCompletionRef0010;Sentence;testDataSentence;Complete the sentence:;Sentence Text (Referenced—letters with gaps);;;This is #ℛ(1,2)#;ℛ(1,1);ℛ(1,4);;#ℛ(1,6)#;R10 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceCompletionRef0011;Sentence;testDataSentence;Complete the sentence:;Sentence Text (Referenced—numbers);;;This is #ℛ(2,2)#;ℛ(2,1);ℛ(2,4);;#ℛ(2,6)#;#ℛ(2,7)#",
			"SentenceCompletionRef0012;Sentence;testDataSentence;Complete the sentence:;Sentence Text (Referenced—numbers with gaps);;;This is #ℛ(3,2)#;ℛ(3,1);ℛ(3,4);;#ℛ(3,6)#;#ℛ(3,7)#",
			"SentenceCompletionRef0013;Sentence;testDataSentence;Complete the sentence:;Sentence Text Image (Referenced—letters);ℛ(0,3);;This is #ℛ(0,2)#;ℛ(0,1);ℛ(0,4);;#ℛ(0,6)#;#ℛ(0,7)#",
			"SentenceCompletionRef0014;Sentence;testDataSentence;Complete the sentence:;Sentence Text Image (Referenced—letters with gaps);ℛ(0,3);;This is #ℛ(1,2)#;ℛ(1,1);ℛ(1,4);;#ℛ(1,6)#;#ℛ(1,7)#",
			"SentenceCompletionRef0015;Sentence;testDataSentence;Complete the sentence:;Sentence Text Image (Referenced—numbers);ℛ(0,3);;This is #ℛ(2,2)#;ℛ(2,1);ℛ(2,4);;#ℛ(2,6)#;#ℛ(2,7)#",
			"SentenceCompletionRef0016;Sentence;testDataSentence;Complete the sentence:;Sentence Text Image (Referenced—numbers with gaps);ℛ(0,3);;This is #ℛ(3,2)#;ℛ(3,1);ℛ(3,4);;#ℛ(3,6)#;#ℛ(3,7)#"
		]
	},
	"testsentenceCompletion": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;Descr;Sentence;hints;mapping;mapping_inx",
		"elemList": [
			"SCQID00001;Sentence;;Complete the sentence:;Sentence MC (Hard⊤(dash)coded—letters);;;A⊤(comma)B⊤(comma)C⊤(comma)D;[A,B,C,D];;[A,B,C,D,E,F,G,H];Description here.;1Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00002;Sentence;;Complete the sentence:;Sentence MC (Hard⊤(dash)coded—letters with gaps);;;A A⊤(comma)B B⊤(comma)C C⊤(comma)D D;[A A, B B, C C,D D];;[A A,B B,C C, D D,E E,F F,G G,H H];Description here.;2Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00003;Sentence;;Complete the sentence:;Sentence MC (Hard⊤(dash)coded—numbers);;;1⊤(comma)2⊤(comma)3⊤(comma)4;[1,2,3,4];;[1,2,3,4,5,6,7,8];Description here.;3Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00004;Sentence;;Complete the sentence:;Sentence MC (Hard⊤(dash)coded—numbers with gaps);;;1 1⊤(comma)2 2⊤(comma)3 3⊤(comma)4 4;[1 1, 2 2,3 3,4 4];;[1 1,2 2,3 3,4 4, 5 5,6 6,7 7,8 8];Description here.;4Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00005;Sentence;;Complete the sentence:;Sentence MC Image (Hard⊤(dash)coded—letters);assets/images/Asia.png;;A⊤(comma)B⊤(comma)C⊤(comma)D;[A,B,C,D];;[A,B,C,D,E,F,G,H];Description here.;5Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00006;Sentence;;Complete the sentence:;Sentence MC Image (Hard⊤(dash)coded—letters with gaps);assets/images/Asia.png;;A A⊤(comma)B B⊤(comma)C C⊤(comma)D D;[A A, B B, C C,D D];;[A A,B B,C C, D D,E E,F F,G G,H H];Description here.;6Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00007;Sentence;;Complete the sentence:;Sentence MC Image (Hard⊤(dash)coded—numbers);assets/images/Asia.png;;1⊤(comma)2⊤(comma)3⊤(comma)4;[1,2,3,4];;[1,2,3,4,5,6,7,8];Description here.;7Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00008;Sentence;;Complete the sentence:;Sentence MC Image (Hard⊤(dash)coded—numbers with gaps);assets/images/Asia.png;;1 1⊤(comma)2 2⊤(comma)3 3⊤(comma)4 4;[1 1, 2 2,3 3,4 4];;[1 1,2 2,3 3,4 4, 5 5,6 6,7 7,8 8];Description here.;8Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00009;Sentence;;Complete the sentence:;Sentence Text (Hard⊤(dash)coded—letters);;;A⊤(comma)B⊤(comma)C⊤(comma)D;[A,B,C,D];[[aa,aaa],[bb,bbb],[cc,ccc],[dd,ddd]];;Description here.;9Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00010;Sentence;;Complete the sentence:;Sentence Text (Hard⊤(dash)coded—letters with gaps);;;A A⊤(comma)B B⊤(comma)C C⊤(comma)D D;[A A, B B, C C,D D];[[aa,aaa,a aa,aa a],[bb,bbb,b bb,bb b],[cc,ccc,c cc,cc c],[dd,ddd,d dd,dd d]];;Description here.;10Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00011;Sentence;;Complete the sentence:;Sentence Text (Hard⊤(dash)coded—numbers);;;1⊤(comma)2⊤(comma)3⊤(comma)4;[1,2,3,4];[[11,111],[22,222],[33,333],[44,444]];;Description here.;11Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00012;Sentence;;Complete the sentence:;Sentence Text (Hard⊤(dash)coded—numbers with gaps);;;1 1⊤(comma)2 2⊤(comma)3 3⊤(comma)4 4;[1 1, 2 2,3 3,4 4];[[11,111,1 11,11 1],[22,222,2 22,22 2],[33,333,3 33,33 3],[44,444,4 44,44 4]];;Description here.;12Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00013;Sentence;;Complete the sentence:;Sentence Text Image (Hard⊤(dash)coded—letters);assets/images/Asia.png;;A⊤(comma)B⊤(comma)C⊤(comma)D;[A,B,C,D];[[aa,aaa],[bb,bbb],[cc,ccc],[dd,ddd]];;Description here.;13Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00014;Sentence;;Complete the sentence:;Sentence Text Image (Hard⊤(dash)coded—letters with gaps);assets/images/Asia.png;;A A⊤(comma)B B⊤(comma)C C⊤(comma)D D;[A A, B B, C C,D D];[[aa,aaa,a aa,aa a],[bb,bbb,b bb,bb b],[cc,ccc,c cc,cc c],[dd,ddd,d dd,dd d]];;Description here.;14Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00015;Sentence;;Complete the sentence:;Sentence Text Image (Hard⊤(dash)coded—numbers);assets/images/Asia.png;;1⊤(comma)2⊤(comma)3⊤(comma)4;[1,2,3,4];[[11,111],[22,222],[33,333],[44,444]];;Description here.;15Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SCQID00016;Sentence;;Complete the sentence:;Sentence Text Image (Hard⊤(dash)coded—numbers with gaps);assets/images/Asia.png;;1 1⊤(comma)2 2⊤(comma)3 3⊤(comma)4 4;[1 1, 2 2,3 3,4 4];[[11,111,1 11,11 1],[22,222,2 22,22 2],[33,333,3 33,33 3],[44,444,4 44,44 4]];;Description here.;16Sentence#0#with#1#gaps#2#to fill#3#in."
		]
	},
	"mCTestQuestionsHardCoded": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
		"elemList": [
			"MCTestQuestions0001;MC;;MC: A;MC (Plain Text: Letters);;4;This is A.;[3];;[B,C,D,A]",
			"MCTestQuestions0002;MC;;MC: A⊤(comma) B;Multiple MC (Plain Text: Letters);;4;This is A⊤(comma) B.;[0,1];;[A,B,C,D,E,F,G,H]",
			"MCTestQuestions0003;MC;;Image MC: C;Image MC (Plain Text: Letters);assets/images/Asia.png;4;This is C.;[2];;[A,B,C,D,E,F,G,H]",
			"MCTestQuestions0004;MC;;Image MC: D⊤(comma) E;Multiple Image MC (Plain Text: Letters);assets/images/Asia.png;4;This is D⊤(comma)E.;[3,4];;[A,B,C,D,E,F,G,H]",
			"MCTestQuestions0005;MC;;MC Image: Switzerland;MC Image (Plain Text: Letters);;4;;[5];;[assets/images/flags/Canada_Final.svg,assets/images/flags/Chile_Final.svg,assets/images/flags/Denmark_Final.svg,assets/images/flags/Dominica_Final.svg,assets/images/flags/Ecuador_Final.svg,assets/images/flags/Switzerland_Final.svg]",
			"MCTestQuestions0006;MC;;MC Image Multiple: Switzerland⊤(comma) Canada;MC Image Multiple (Plain Text: Letters);;4;;[0,1];;[assets/images/flags/Switzerland_Final.svg,assets/images/flags/Canada_Final.svg,assets/images/flags/Chile_Final.svg,assets/images/flags/Denmark_Final.svg,assets/images/flags/Dominica_Final.svg,assets/images/flags/Ecuador_Final.svg]",
			"MCTestQuestions0007;MC;;MC: 1;MC (Plain Text: Numbers);;4;This is 1;[9];;[2,3,4,5,6,7,8,9,10,1]",
			"MCTestQuestions0008;MC;;MC: 1⊤(comma)2;Multiple MC (Plain Text: Numbers);;4;This is 1⊤(comma)2;[0,1];;[1,2,3,4,5,6,7,8,9,10]",
			"MCTestQuestions0009;MC;;Image MC: 3;Image MC (Plain Text: Numbers);assets/images/Asia.png;4;This is 3.;[2];;[1,2,3,4,5,6,7,8,9,11]",
			"MCTestQuestions0010;MC;;Image MC: 4⊤(comma)5;Multiple Image MC (Plain Text: Numbers);assets/images/Asia.png;4;This is 4⊤(comma)5.;[3,4];;[1,2,3,4,5,6,7,8,9,12]",
			"MCTestQuestions0011;MC;;MC: 1A;MC (Plain Text: Letters & Numbers);;6;This is 1A.;[0];;[1A,B2,C3,4D,5E,F6]",
			"MCTestQuestions0012;MC;;MC: 1⊤(comma)A⊤(comma)2⊤(comma)B;Multiple MC (Plain Text: Letters & Numbers);;6;This is 1⊤(comma)A⊤(comma)2⊤(comma)B.;[0,6,1,7];;[1,2,3,4,5,6,A,B,C,D,E,F,G]",
			"MCTestQuestions0013;MC;;Image MC: C3;Image MC (Plain Text: Letters & Numbers);assets/images/Asia.png;6;This is C3;[2];;[1A,B2,C3,4D,5E,F6]",
			"MCTestQuestions0014;MC;;Image MC: 4⊤(comma)D⊤(comma)5⊤(comma)E;Multiple Image MC (Plain Text: Letters & Numbers);assets/images/Asia.png;6;This is 4⊤(comma)D⊤(comma)5⊤(comma)E;[3,9,4,10];;[1,2,3,4,5,6,A,B,C,D,E,F,G]",
			"MCTestQuestions0015;MC;;Image and text mixed answers: A + Switzerland;AnswerOptions mixed: Image & Text;;4;This is Switzerland + A;[2,0];;[assets/images/flags/Switzerland_Final.svg,assets/images/flags/Canada_Final.svg,A,B]"
		]
	},
	"textTestQuestionsRef": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
		"elemList": [
			"TextRefTestQuestions0001;Text;testData;Text: A;Text (Plain Text: Letters);;;This is #ℛ(10,1)#.;ℛ(10,1);ℛ(10,8)",
			"TextRefTestQuestions0002;Text;testData;Image Text: A;Image Text (Plain Text: Letters);ℛ(0,3);;This is #ℛ(10,1)#.;ℛ(10,1);ℛ(10,8)",
			"TextRefTestQuestions0003;Text;testData;Text: A⊤(comma) B;Multiple Text (Plain Text: Letters);;;This is #ℛ([10,11],1)#.;ℛ([10,11],1);ℛ([10,11],8)",
			"TextRefTestQuestions0004;Text;testData;Image Text: A⊤(comma) B⊤(comma) C;Multiple Image Text (Plain Text: Letters);ℛ(0,3);;This is #ℛ([10,11,12],1)#.;ℛ([10,11,12],1);ℛ([10,11,12],8)",
			"TextRefTestQuestions0005;Text;testData;Text: 1;Text (Plain Text: Numbers);;;This is #ℛ(0,1)#.;ℛ(0,1);ℛ(0,8)",
			"TextRefTestQuestions0006;Text;testData;Image Text: 1;Image Text (Plain Text: Numbers);ℛ(0,3);;This is #ℛ(0,1)#.;ℛ(0,1);ℛ(0,8)",
			"TextRefTestQuestions0007;Text;testData;Text: 1⊤(comma)2;Multiple Text (Plain Text: Numbers);;;This is #ℛ([0,1],1)#.;ℛ([0,1],1);ℛ([0,1],8)",
			"TextRefTestQuestions0008;Text;testData;Image Text: 1⊤(comma)2⊤(comma)3⊤(comma);Multiple Image Text (Plain Text: Numbers);ℛ(0,3);;This is #ℛ([0,1,2],1)#.;ℛ([0,1,2],1);ℛ([0,1,2],8)",
			"TextRefTestQuestions0009;Text;testData;Text: 1⊤(comma)A⊤(comma)2⊤(comma)B;Multiple Text (Plain Text: Letters & Numbers);;;This is #ℛ([0,10,1,11],1)#.;ℛ([0,10,1,11],1);ℛ([0,10,1,11],8)",
			"TextRefTestQuestions0010;Text;testData;Image Text: 1⊤(comma)A⊤(comma)2⊤(comma)B⊤(comma)3;Multiple Image Text (Plain Text: Letters & Numbers);ℛ(0,3);;This is #ℛ([0,10,1,11,2],1)#.;ℛ([0,10,1,11,2],1);ℛ([0,10,1,11,2],8)"
		]
	},
	"textTestQuestionsHardCoded": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
		"elemList": [
			"TextTestQuestion0001;Text;;Text: A;Text (Plain Text: Letters);;;This is A.;A;[a,aa,aaa,a a, a aa, aa a]",
			"TextTestQuestion0002;Text;;Image Text: A;Image Text (Plain Text: Letters)—No Accepted_Answers;assets/images/Asia.png;;This is A.;A",
			"TextTestQuestion0003;Text;;Text: A⊤(comma) B;Multiple Text (Plain Text: Letters);;;This is A⊤(comma)B.;[A,B];[[aa,aaa,a a, a aa, aa a],[bb,bbb,b b, b bb, bb b]]",
			"TextTestQuestion0004;Text;;Image Text: A⊤(comma) B⊤(comma) C;Multiple Image Text (Plain Text: Letters);assets/images/Asia.png;;This is A⊤(comma)B⊤(comma)C.;[A,B,C];[[a,aa,aaa,a a, a aa, aa a],[bb,bbb,b b, b bb, bb b],[cc,ccc,c c, c cc, cc c]]",
			"TextTestQuestion0005;Text;;Text: 1;Text (Plain Text: Numbers)—No Accepted_Answers;;;This is 1.;1",
			"TextTestQuestion0006;Text;;Image Text: 1;Image Text (Plain Text: Numbers);assets/images/Asia.png;;This is 1.;1;[11,1 1,111,1 11,11 1]",
			"TextTestQuestion0007;Text;;Text: 1⊤(comma)2;Multiple Text (Plain Text: Numbers);;;This is 1⊤(comma)2.;[1,2];[[11,111,1 1, 1 11, 11 1],[22,222,2 2, 2 22, 22 2]]",
			"TextTestQuestion0008;Text;;Image Text: 1⊤(comma)2⊤(comma)3⊤(comma);Multiple Image Text (Plain Text: Numbers);assets/images/Asia.png;;This is 1⊤(comma)2⊤(comma)3.;[1,2,3];[[11,111,1 1, 1 11, 11 1],[22,222,2 2, 2 22, 22 2],[33,333,3 3, 3 33, 333 3]]",
			"TextTestQuestion0009;Text;;Text: 1⊤(comma)A⊤(comma)2⊤(comma)B;Multiple Text (Plain Text: Letters & Numbers);;;This is 1⊤(comma)A⊤(comma)2⊤(comma)B;[1,A,2,B];[[11,111,1 1, 1 11, 11 1],[aa,aaa,a a, a aa, aa a],[22,222,2 2, 2 22, 22 2],[bb,bbb,b b, b bb, bb b]]",
			"TextTestQuestion0010;Text;;Image Text: 1⊤(comma)A⊤(comma)2⊤(comma)B⊤(comma)3;Multiple Image Text (Plain Text: Letters & Numbers);assets/images/Asia.png;;This is 1⊤(comma)A⊤(comma)2⊤(comma)B⊤(comma)3;[1,A,2,B,3];[[11,111,1 1, 1 11, 11 1],[aa,aaa,a a, a aa, aa a],[22,222,2 2, 2 22, 22 2],[bb,bbb,b b, b bb, bb b],[33,333,3 3, 3 33, 33 3]]"
		]
	},
	"mCTestQuestionsFullyReferenced": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
		"elemList": [
			"MCFullyRefTestQuestions0001;MC;testData;#ℛ(35,1)#;#ℛ(35,2)#;;4;#ℛ(35,1)#;[0];;ℛ([10‥13],1)",
			"MCFullyRefTestQuestions0002;MC;testData;#ℛ(36,1)#;#ℛ(36,2)#;;4;#ℛ(36,1)#;[0,1];;ℛ([10‥19],1)",
			"MCFullyRefTestQuestions0003;MC;testData;#ℛ(37,1)#;#ℛ(37,2)#;ℛ(0,3);4;#ℛ(37,1)#;[2];;ℛ([10‥19],1)",
			"MCFullyRefTestQuestions0004;MC;testData;#ℛ(38,1)#;#ℛ(38,2)#;ℛ(0,3);4;#ℛ(38,1)#;[3,4];;ℛ([10‥19],1)",
			"MCFullyRefTestQuestions0005;MC;testData;#ℛ(39,1)#;#ℛ(39,2)#;;4;#ℛ(39,1)#;[0];;ℛ([28‥34],2)",
			"MCFullyRefTestQuestions0006;MC;testData;#ℛ(40,1)#;#ℛ(40,2)#;;4;#ℛ(40,1)#;[0,1];;ℛ([28‥34],2)",
			"MCFullyRefTestQuestions0007;MC;testData;#ℛ(41,1)#;#ℛ(41,2)#;;4;#ℛ(41,1)#;[0];;ℛ([0‥9],1)",
			"MCFullyRefTestQuestions0008;MC;testData;#ℛ(42,1)#;#ℛ(42,2)#;;4;#ℛ(42,1)#;[0,1];;ℛ([0‥9],1)",
			"MCFullyRefTestQuestions0009;MC;testData;#ℛ(43,1)#;#ℛ(43,2)#;ℛ(0,3);4;#ℛ(43,1)#;[2];;ℛ([0‥9],1)",
			"MCFullyRefTestQuestions0010;MC;testData;#ℛ(44,1)#;#ℛ(44,2)#;ℛ(0,3);4;#ℛ(44,1)#;[3,4];;ℛ([0‥9],1)",
			"MCFullyRefTestQuestions0011;MC;testData;#ℛ(45,1)#;#ℛ(45,2)#;;6;#ℛ(45,1)#;[0];;ℛ([20‥27],1)",
			"MCFullyRefTestQuestions0012;MC;testData;#ℛ(46,1)#;#ℛ(46,2)#;;6;#ℛ(46,1)#;[0,10,1,11];;ℛ([0‥19],1)",
			"MCFullyRefTestQuestions0013;MC;testData;#ℛ(47,1)#;#ℛ(47,2)#;ℛ(0,3);6;#ℛ(47,1)#;[2];;ℛ([20‥27],1)",
			"MCFullyRefTestQuestions0014;MC;testData;#ℛ(48,1)#;#ℛ(48,2)#;ℛ(0,3);6;#ℛ(48,1)#;[3,13,4,14];;ℛ([0‥19],1)",
			"MCFullyRefTestQuestions0015;MC;testData;#ℛ(49,1)#;#ℛ(49,2)#;ℛ([0‥4],3);4;#ℛ(49,1)#;[0];;ℛ([10‥13],1)"
		]
	},
	"mCTestQuestionsReferenced": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
		"elemList": [
			"MCRefTestQuestions0001;MC;testData;MC: A;MC (Plain Text: Letters);;4;This is #ℛ(10,1)#.;[0];;ℛ([10‥13],1)",
			"MCRefTestQuestions0002;MC;testData;MC: A⊤(comma) B;Multiple MC (Plain Text: Letters);;4;This is #ℛ(10,1)# and #ℛ(11,1)#.;[0,1];;ℛ([10‥19],1)",
			"MCRefTestQuestions0003;MC;testData;Image MC: C;Image MC (Plain Text: Letters);ℛ(0,3);4;This is #ℛ(12,1)#.;[2];;ℛ([10‥19],1)",
			"MCRefTestQuestions0004;MC;testData;Image MC: D⊤(comma) E;Multiple Image MC (Plain Text: Letters);ℛ(0,3);4;This is #ℛ(13,1)# and #ℛ(14,1)#.;[3,4];;ℛ([10‥19],1)",
			"MCRefTestQuestions0005;MC;testData;MC Image: Switzerland;MC Image (Plain Text: Letters);;4;The flag is shown above.;[0];;ℛ([28‥34],2)",
			"MCRefTestQuestions0006;MC;testData;MC Image Multiple: Switzerland⊤(comma) Canada;MC Image Multiple (Plain Text: Letters);;4;The flag is shown above.;[0,1];;ℛ([28‥34],2)",
			"MCRefTestQuestions0007;MC;testData;MC: 1;MC (Plain Text: Numbers);;4;This is #ℛ(0,1)#.;[0];;ℛ([0‥9],1)",
			"MCRefTestQuestions0008;MC;testData;MC: 1⊤(comma)2;Multiple MC (Plain Text: Numbers);;4;This is #ℛ(0,1)# and #ℛ(1,1)#.;[0,1];;ℛ([0‥9],1)",
			"MCRefTestQuestions0009;MC;testData;Image MC: 3;Image MC (Plain Text: Numbers);ℛ(0,3);4;This is #ℛ(2,1)#.;[2];;ℛ([0‥9],1)",
			"MCRefTestQuestions0010;MC;testData;Image MC: 4⊤(comma)5;Multiple Image MC (Plain Text: Numbers);ℛ(0,3);4;This is #ℛ(3,1)# and #ℛ(4,1)#.;[3,4];;ℛ([0‥9],1)",
			"MCRefTestQuestions0011;MC;testData;MC: 1A;MC (Plain Text: Letters & Numbers);;6;This is #ℛ(20,1)#.;[0];;ℛ([20‥27],1)",
			"MCRefTestQuestions0012;MC;testData;MC: 1⊤(comma)A⊤(comma)2⊤(comma)B;Multiple MC (Plain Text: Letters & Numbers);;6;This is #ℛ(0,1)#⊤(comma) #ℛ(10,1)#⊤(comma) #ℛ(1,1)#⊤(comma) and #ℛ(11,1)#.;[0,10,1,11];;ℛ([0‥19],1)",
			"MCRefTestQuestions0013;MC;testData;Image MC: C3;Image MC (Plain Text: Letters & Numbers);ℛ(0,3);6;This is #ℛ(22,1)#.;[2];;ℛ([20‥27],1)",
			"MCRefTestQuestions0014;MC;testData;Image MC: 4⊤(comma)D⊤(comma)5⊤(comma)E;Multiple Image MC (Plain Text: Letters & Numbers);ℛ(0,3);6;This is #ℛ(3,1)#⊤(comma)#ℛ(13,1)#⊤(comma) #ℛ(4,1)#⊤(comma) and#ℛ(14,1)#.;[3,13,4,14];;ℛ([0‥19],1)",
			"MCRefTestQuestions0015;MC;testData;Multiple Images: A;Multiple Images Referenced;ℛ([0‥4],3);4;This is #ℛ(10,1)#.;[0];;ℛ([10‥13],1)",
			"MCRefTestQuestions0016;MC;testData;MC Variable coding #ℛ(_ans,1)#.;MC Variable Coding: Letters;;4;This is #ℛ(_ans,1)#.;ℛ(_ans,1);;ℛ([10‥19],1)",
			"MCRefTestQuestions0017;MC;testData;MC Variable coding #ℛ(_ans,1)#.;MC Variable Coding: Numbers;;4;This is #ℛ(_ans,1)#.;ℛ(_ans,1);;ℛ([0‥9],1)",
			"MCRefTestQuestions0018;MC;testData;MC Variable coding #ℛ(_ans,1)#.;MC Variable Coding: Letters & Numbers;;4;This is #ℛ(_ans,1)#.;ℛ(_ans,1);;ℛ([0‥19],1)",
			"MCRefTestQuestions0019;MC;testData;MC Variable coding #ℛ(_ans,1)#.;MC Image Variable Coding: Letters;ℛ(_ans,3);4;This is #ℛ(_ans,1)#.;ℛ(_ans,1);;ℛ([10‥19],1)",
			"MCRefTestQuestions0020;MC;testData;MC Variable coding #ℛ(_ans,1)#.;MC Image Variable Coding: Numbers;ℛ(_ans,3);4;This is #ℛ(_ans,1)#.;ℛ(_ans,1);;ℛ([0‥9],1)",
			"MCRefTestQuestions0021;MC;testData;MC Variable coding #ℛ(_ans,1)#.;MC Image Variable Coding: Letters & Numbers;ℛ(_ans,3);4;This is #ℛ(_ans,1)#.;ℛ(_ans,1);;ℛ([0‥19],1)"
		]
	},
	"hSliderQuestions": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Accepted_Answers;Answer_Text;Answer;AnswerOptions;hints;scale1;scale2;scale3;text1;text2;text3;suffix1;suffix2;suffix3;start1;start2;start3;end1;end2;end3;ratio12;ratio13;almostPer;corrPer;mapping;mapping_inx",
		"elemList": [
			"HSliderQuestions00001;Slider;;Answer: 50;Hard⊤(dash)Coded;;;;This is 50;50;;;50;50;50;Absolute size (text);Absolute size (text);Absolute size (text);km2 (suffix);km2 (suffix);km2 (suffix);0;0;0;100;100;100;1;1;40;20",
			"HSliderQuestions00002;Slider;;Answer: 50000;Hard⊤(dash)Coded;;;;This is 50000;50000;;;50000;50000;50000;Absolute size (text);Absolute size (text);Absolute size (text);km2 (suffix);km2 (suffix);km2 (suffix);0;0;0;100000;100000;100000;1;1;40;20",
			"HSliderQuestions00003;Slider;testData;Answer: 50;Hard⊤(dash)Coded with image;ℛ(0,3);;;This is 50;50;;;50;50;50;Absolute size (text);Absolute size (text);Absolute size (text);km2 (suffix);km2 (suffix);km2 (suffix);0;0;0;100;100;100;1;1;40;20",
			"HSliderQuestions00004;Slider;testData;Answer: 50000;Hard⊤(dash)Coded with image;ℛ(0,3);;;This is 50000;50000;;;50000;50000;50000;Absolute size (text);Absolute size (text);Absolute size (text);km2 (suffix);km2 (suffix);km2 (suffix);0;0;0;100000;100000;100000;1;1;40;20"
		]
	},
	"svgMapping": {
		"header": "ID;ansColor;selColor;backgroundColor;shapeColor;borderColor;borderStroke;offsetWidth;offsetHeight;painterHeight;painterWidth;fileName",
		"elemList": [
			"svgMappingID00001;correct;btnBlue;white;grey;grey700;1;20;20;1000;1100;assets/svg_images/MajorPlatesMap.svg"
		]
	},
	"textVariableCodingTestData": {
		"header": "ID;image;Q;ins;a;a_txt;aa",
		"elemList": [
			"TextFullyRefData001;assets/images/Switzerland⊤(dash)flag.svg;Q1—Image Text: A;Text (Plain Text: Letters);A;This is A.;[a,aa,aaa,a a, a aa, aa a]",
			"TextFullyRefData002;assets/images/Argentina⊤(dash)flag.svg;Q2—Image Text: A;Image Text (Plain Text: Letters);A;This is A.;[a,aa,aaa,a a, a aa, aa a]",
			"TextFullyRefData003;assets/images/Armenia⊤(dash)flag.svg;Q3—Image Text: A⊤(comma) B;Multiple Text (Plain Text: Letters);[A,B];This is A⊤(comma)B.;[[aa,aaa,a a, a aa, aa a],[bb,bbb,b b, b bb, bb b]]",
			"TextFullyRefData004;assets/images/Australia⊤(dash)flag.svg;Q4—Image Text: A⊤(comma) B⊤(comma) C;Multiple Image Text (Plain Text: Letters);[A,B,C];This is A⊤(comma)B⊤(comma)C.;[[a,aa,aaa,a a, a aa, aa a],[bb,bbb,b b, b bb, bb b],[cc,ccc,c c, c cc, cc c]]",
			"TextFullyRefData005;assets/images/Brazil⊤(dash)flag.svg;Q5—Image Text: 1;Text (Plain Text: Numbers);1;This is 1.;[11,1 1,111,1 11,11 1]",
			"TextFullyRefData006;assets/images/Canada⊤(dash)flag.svg;Q6—Image Text: 1;Image Text (Plain Text: Numbers);1;This is 1.;[11,1 1,111,1 11,11 1]",
			"TextFullyRefData007;assets/images/China⊤(dash)flag.svg;Q7—ImageText: 1⊤(comma)2;Multiple Text (Plain Text: Numbers);[1,2];This is 1⊤(comma)2.;[[11,111,1 1, 1 11, 11 1],[22,222,2 2, 2 22, 22 2]]",
			"TextFullyRefData008;assets/images/Croatia⊤(dash)flag.svg;Q8—Image Text: 1⊤(comma)2⊤(comma)3⊤(comma);Multiple Image Text (Plain Text: Numbers);[1,2,3];This is 1⊤(comma)2⊤(comma)3.;[[11,111,1 1, 1 11, 11 1],[22,222,2 2, 2 22, 22 2],[33,333,3 3, 3 33, 333 3]]",
			"TextFullyRefData009;assets/images/Denmark⊤(dash)flag.svg;Q9—Image Text: 1⊤(comma)A⊤(comma)2⊤(comma)B;Multiple Text (Plain Text: Letters & Numbers);[1,A,2,B];This is 1⊤(comma)A⊤(comma)2⊤(comma)B;[[11,111,1 1, 1 11, 11 1],[aa,aaa,a a, a aa, aa a],[22,222,2 2, 2 22, 22 2],[bb,bbb,b b, b bb, bb b]]",
			"TextFullyRefData010;assets/images/France⊤(dash)flag.svg;Q10—Image Text: 1⊤(comma)A⊤(comma)2⊤(comma)B⊤(comma)3;Multiple Image Text (Plain Text: Letters & Numbers);[1,A,2,B,3];This is 1⊤(comma)A⊤(comma)2⊤(comma)B⊤(comma)3;[[11,111,1 1, 1 11, 11 1],[aa,aaa,a a, a aa, aa a],[22,222,2 2, 2 22, 22 2],[bb,bbb,b b, b bb, bb b],[33,333,3 3, 3 33, 33 3]]",
			"TextFullyRefData011;assets/images/Switzerland⊤(dash)flag.svg;What flag is this? Q1;Text (Plain Text: Letters);Switzerland;This is Switzerland;[CHE,Swiss]",
			"TextFullyRefData012;assets/images/Argentina⊤(dash)flag.svg;What flag is this? Q2;Text (Plain Text: Letters);Argentina;This is Argentina;[AR,Argentine]",
			"TextFullyRefData013;assets/images/Armenia⊤(dash)flag.svg;What flag is this? Q3;Text (Plain Text: Letters);Armenia;This is Armenia;[ARM,Armenian]",
			"TextFullyRefData014;assets/images/Australia⊤(dash)flag.svg;What flag is this? Q4;Text (Plain Text: Letters);Australia;This is Australia;[Aus,Oz]",
			"TextFullyRefData015;assets/images/Brazil⊤(dash)flag.svg;What flag is this? Q5;Text (Plain Text: Letters);Brazil;This is Brazil;[BR,Brazilian]",
			"TextFullyRefData016;assets/images/Canada⊤(dash)flag.svg;What flag is this? Q6;Text (Plain Text: Letters);Canada;This is Canada;[Canadian,CA]",
			"TextFullyRefData017;assets/images/China⊤(dash)flag.svg;What flag is this? Q7;Text (Plain Text: Letters);China;This is China;[CN,Chinese]",
			"TextFullyRefData018;assets/images/Croatia⊤(dash)flag.svg;What flag is this? Q8;Text (Plain Text: Letters);Croatia;This is Croatia;[Croatian,CR]",
			"TextFullyRefData019;assets/images/Denmark⊤(dash)flag.svg;What flag is this? Q9;Text (Plain Text: Letters);Denmark;This is Denmark;[DK,Danish]",
			"TextFullyRefData020;assets/images/France⊤(dash)flag.svg;What flag is this? Q10;Text (Plain Text: Letters);France;This is France;[French,F]"
		]
	},
	"testDataSentence": {
		"header": "ID;A;AT;image;aa;ao;D;S",
		"elemList": [
			"SentenceTestData0001;[A,B,C,D];A⊤(comma)B⊤(comma)C⊤(comma)D;assets/images/Asia.png;[[aa,aaa],[bb,bbb],[cc,ccc],[dd,ddd]];[A,B,C,D,E,F,G,H];Description here.;D1 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceTestData0002;[A A, B B, C C,D D];A A⊤(comma)B B⊤(comma)C C⊤(comma)D D;assets/images/Asia.png;[[aa,aaa,a aa,aa a],[bb,bbb,b bb,bb b],[cc,ccc,c cc,cc c],[dd,ddd,d dd,dd d]];[A A,B B,C C, D D,E E,F F,G G,H H];Description here.;D2 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceTestData0003;[1,2,3,4];1⊤(comma)2⊤(comma)3⊤(comma)4;assets/images/Asia.png;[[11,111],[22,222],[33,333],[44,444]];[1,2,3,4,5,6,7,8];Description here.;D3 Sentence#0#with#1#gaps#2#to fill#3#in.",
			"SentenceTestData0004;[1 1, 2 2,3 3,4 4];1 1⊤(comma)2 2⊤(comma)3 3⊤(comma)4 4;assets/images/Asia.png;[[11,111,1 11,11 1],[22,222,2 22,22 2],[33,333,3 33,33 3],[44,444,4 44,44 4]];[1 1,2 2,3 3,4 4, 5 5,6 6,7 7,8 8];Description here.;D4 Sentence#0#with#1#gaps#2#to fill#3#in."
		]
	},
	"testData": {
		"header": "ID;name;flag;image;Q;ins;a;a_txt;aa",
		"elemList": [
			"TestDummy0001;1;;assets/images/Asia.png;Question 1;;;;[1,11,111]",
			"TestDummy0002;2;;assets/images/Africa.png;Question 2;;;;[2,22,222]",
			"TestDummy0003;3;;assets/images/Antarctica.png;Question 3;;;;[3,33,333]",
			"TestDummy0004;4;;assets/images/Australia.png;Question 4;;;;[4,44,444]",
			"TestDummy0005;5;;assets/images/Europe.png;Question 5;;;;[5,55,555]",
			"TestDummy0006;6;;assets/images/Asia.png;Question 6;;;;[6,66,666]",
			"TestDummy0007;7;;assets/images/Asia.png;Question 7;;;;[7,77,777]",
			"TestDummy0008;8;;assets/images/Asia.png;Question 8;;;;[8,88,888]",
			"TestDummy0009;9;;assets/images/Asia.png;Question 9;;;;[9,99,999]",
			"TestDummy0010;10;;assets/images/Asia.png;Question 10;;;;[1010,101010]",
			"TestDummy0011;A;;assets/images/Asia.png;Question 11;;;;[a,aa,aaa]",
			"TestDummy0012;B;;assets/images/Asia.png;Question 12;;;;[b,bb,bbb]",
			"TestDummy0013;C;;assets/images/Asia.png;Question 13;;;;[c,cc,ccc]",
			"TestDummy0014;D;;assets/images/Asia.png;Question 14;;;;[d,dd,ddd]",
			"TestDummy0015;E;;assets/images/Asia.png;Question 15;;;;[e,ee,eee]",
			"TestDummy0016;F;;assets/images/Asia.png;Question 16;;;;[f,ff,fff]",
			"TestDummy0017;G;;assets/images/Asia.png;Question 17;;;;[g,gg,ggg]",
			"TestDummy0018;H;;assets/images/Asia.png;Question 18;;;;[h,hh,hhh]",
			"TestDummy0019;I;;assets/images/Asia.png;Question 19;;;;[i,ii,iii]",
			"TestDummy0020;J;;assets/images/Asia.png;Question 20;;;;[j,jj,jjj]",
			"TestDummy0021;1A;;assets/images/Asia.png;Question 21",
			"TestDummy0022;2B;;assets/images/Asia.png;Question 22",
			"TestDummy0023;C3;;assets/images/Asia.png;Question 23",
			"TestDummy0024;D4;;assets/images/Asia.png;Question 24",
			"TestDummy0025;5E;;assets/images/Asia.png;Question 25",
			"TestDummy0026;6F;;assets/images/Asia.png;Question 26",
			"TestDummy0027;G7;;assets/images/Asia.png;Question 27",
			"TestDummy0028;H8;;assets/images/Asia.png;Question 28",
			"TestFlags0001;Switzerland;assets/images/flags/Switzerland_Final.svg",
			"TestFlags0002;Canada;assets/images/flags/Canada_Final.svg",
			"TestFlags0003;Chile;assets/images/flags/Chile_Final.svg",
			"TestFlags0004;Denmark;assets/images/flags/Denmark_Final.svg",
			"TestFlags0005;Dominica;assets/images/flags/Dominica_Final.svg",
			"TestFlags0006;Ecuador;assets/images/flags/Ecuador_Final.svg",
			"TestFlags0007;Bolivia;assets/images/flags/Bolivia_Final.svg",
			"TestFullyRefData0001;MC: A;MC (Plain Text: Letters);4;Ref1;Ref2",
			"TestFullyRefData0002;MC: A⊤(comma) B;Multiple MC (Plain Text: Letters);4",
			"TestFullyRefData0003;Image MC: C;Image MC (Plain Text: Letters);4",
			"TestFullyRefData0004;Image MC: D⊤(comma) E;Multiple Image MC (Plain Text: Letters);4",
			"TestFullyRefData0005;MC Image: Switzerland;MC Image (Plain Text: Letters);4",
			"TestFullyRefData0006;MC Image Multiple: Switzerland⊤(comma) Canada;MC Image Multiple (Plain Text: Letters);4",
			"TestFullyRefData0007;MC: 1;MC (Plain Text: Numbers);4",
			"TestFullyRefData0008;MC: 1⊤(comma)2;Multiple MC (Plain Text: Numbers);4",
			"TestFullyRefData0009;Image MC: 3;Image MC (Plain Text: Numbers);4",
			"TestFullyRefData0010;Image MC: 4⊤(comma)5;Multiple Image MC (Plain Text: Numbers);4",
			"TestFullyRefData0011;MC: 1A;MC (Plain Text: Letters  Numbers);6",
			"TestFullyRefData0012;MC: 1⊤(comma)A⊤(comma)2⊤(comma)B;Multiple MC (Plain Text: Letters  Numbers);6",
			"TestFullyRefData0013;Image MC: C3;Image MC (Plain Text: Letters  Numbers);6",
			"TestFullyRefData0014;Image MC: 4⊤(comma)D⊤(comma)5⊤(comma)E;Multiple Image MC (Plain Text: Letters  Numbers);6",
			"TestFullyRefData0015;Multiple Images: A;Multiple Images Referenced;4"
		]
	}
},
"lookup": {
   "comma": ",",
   "continents": "assets/images/continents.png",
   "countries": "assets/svg_images/countries.svg",
   "curly_close": "curly_close",
   "curly_open": "curly_open",
   "dash": "-",
   "double_dollar": "$$",
   "double_quotation": "\"",
   "greater": ">",
   "greenArrow": "assets/images/greenarrow.png",
   "greyArrow": "assets/images/greyarrow.png",
   "hash": "#",
   "learn": "assets/images/LearningJourney.png",
   "parentheses_close": ")",
   "parentheses_open": "(",
   "semicolon": ";",
   "shop": "assets/images/Shop.png",
   "single_quotation": "'",
   "single_quote": "'",
   "smaller": "<",
   "square_close": "]",
   "square_open": "[",
   "support": "assets/images/Support.png"
},
"text": {
   "+1point": "+ 1 point",
   "aCancel": "YES, CANCEL",
   "accuracy": "ACCURACY WITHIN #A%#%.",
   "almost": "ALMOST",
   "altSub": "Alternatively, you could switch to a monthly plan at $2.99/month.",
   "annually": "Annually",
   "answer": "ANSWER",
   "Answer": "Answer",
   "aSubscribe": "Get 2 months for free when you subscribe for a year!",
   "aSubscribePrice": "$ 29.90",
   "aSwitch": "Switch to Annual Plan",
   "aOffer": "Get 2 months for free when you subscribe for a year!",
   "canCancel": ". You can cancel your subscription at any time.",
   "cancel": "CANCEL",
   "cancelSubs": "CANCEL SUBSCRIPTION?",
   "cancelQuest": "Are you sure you want to cancel your subscription?",
   "colon": ":",
   "confirm": "CONFIRM",
   "congrat": "CONGRATUATIONS",
   "continue": "CONTINUE",
   "corr": "CORRECT",
   "corrText": "CORRECT!",
   "editText": "Select element to edit.",
   "error": "Report Error",
   "errMessage": "Please describe the error.",
   "FAQ": "FAQ",
   "feedback": "Give Feedback",
   "forQuiz": "FOR THIS QUIZ!",
   "gameDone": "DONE",
   "genSetting": "General Settings",
   "highScore": "YOU GOT A NEW HIGH SCORE",
   "hintText": "Hint #n# of #t#",
   "incorr": "Incorrect",
   "invalidInput": "Input value is invalid for ",
   "journey": "Journey",
   "keep": "NO, KEEP IT",
   "knowYourWorld": "Get to know your world!",
   "language": "Language",
   "learning": "Your Learning",
   "learningJourney": "Learning Journey",
   "lives": "Lives",
   "livesSub": "SUBSCRIBE FOR UNLIMITED LIVES",
   "liveOut": "OUT OF LIVES",
   "looseLife": "YOU LOST A LIFE.",
   "looseProgress": "All progress will be lost.",
   "lowLives": "LOW ON LIVES",
   "maybe": "MAY BE YOU NEED A BIT MORE",
   "mCancel": "YES, CANCEL",
   "message": "Message",
   "mOffer": "You're currently getting 2 months for free with your annual plan. You will loose this discount if you switch to a monthly plan.",
   "month": "month",
   "monthly": "Monthly",
   "mSubscribe": "Get unlimited lives and unlock a world of geography knowledge for the price of a latte!",
   "mSubscribePrice": "$ 2.99",
   "mSwitch": "Switch to Monthly Plan",
   "next": "NEXT",
   "nextHint": "Next Hint",
   "nextLife": "Next life in ",
   "notFinish": "You may not be able to finish this game if you get more than #n# questions wrong.",
   "notQuite": "NOT QUITE.",
   "password": "Password",
   "playAgain": "You can explore articles and content but not play any games until you have lives again",
   "practice": "PRACTICE ON THIS ONE.",
   "prevHint": "Previous Hint",
   "problem": "Where did the error occur?",
   "pwNotMatch": "Passwords do not match!",
   "questions": "Questions?",
   "quit": "QUIT",
   "quitText": "Are you sure you want to quit?",
   "quizComplete": "YOU COMPLETED THE QUIZ!",
   "rate": "Rate App",
   "removeAds": "Remove Ads",
   "renew": "Your subscription will automatically be renewed on ",
   "repeatGame": "TRY AGAIN",
   "requiredField": "This field is required!",
   "resubscribe": "You can subscribe again at any time. You can still use the app but have limited lives.",
   "rni": "The Rate of Natural Increase (RNI) is based on which factors?",
   "search": "Search",
   "send": "SEND",
   "settingSubtitle": "Get everything sorted.",
   "setLanguage": "SET LANGUAGE",
   "share": "Share your archievement!",
   "shareApp": "Share App",
   "sharedScreenText": "Shared from Sirius Geo App",
   "sharedSubject": "Sirius Geo App",
   "sharedText": "https//play.google.com/store/apps/details?id=....\nhttps",
   "shopping": "Get everything you need!",
   "showAnswer": "SHOW ANSWER",
   "subject": "Subject",
   "submit": "SUBMIT",
   "support": "Contact Support",
   "supportSubtitle": "Get the help you need.",
   "subscribe": "Subscribe!",
   "subscribed": "SUBSCRIBED",
   "subscriptiona": "Your subscription",
   "subscriptionm": "Your subscription",
   "successSub": "You have successfully subscribed!",
   "successUnsub": "Your successfully unsubscribed.",
   "subscription": "Subscription Enquiry",
   "switchm": "SWITH TO MONTHLY PLAN",
   "testText": "It's just a test!!!",
   "tojourney": "TO LEARNING JOURNEY",
   "thisField": "this field",
   "topicSelection": "Topic Selection",
   "toShop": "GO TO SHOP",
   "totalQ": "Total Questions",
   "tryAgain": "TRY AGAIN",
   "typeAnswer": "Type Your Answer",
   "tryTeachMode": "TRY TEACHING MODE",
   "unlimited": "Unlimited Lives",
   "unsubscribed": "UNSUBSCRIBED",
   "usubscribed": "Your are subscribed!",
   "watchAd": "WATCH AD",
   "watchAnAd": "Watch an ad to get an extra life!",
   "wellDone": "WELL DONE!",
   "wontLoose": "Try again. You won't loose a life.",
   "year": "year",
   "yourSel": "Your Selection",
   "yourScore": "Your Score"
},
"patterns" :
{
        "facts": {
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ]
        },
        "clauses": {
            "mainView": "setConfig(config, patterns) ⋀ initApp() ⋀ ↲(mainScaffold)",
            "mainScaffold": [
                "⋓({_text: ℛ(model, title), _homeAction: 'main'}) ⋀  ⋓({_body: mainBody({_key: key()}), _title: mainAppBar, ",
                "_automaticallyImplyLeading: false, _child: mainBottomRow}) ⋀ ↲(scaffoldPat)"
            ],
            "mainBottomRow": [
                "⋓({_icHome: Φ(IconText, {_bar: true, _icon: 'home', _text: 'Home', _onTap: {_func: 'home'}}),",
                "_icSet: Φ(IconText, {_bar: true, _icon: 'settings', _text: 'Settings', _onTap: actions({_event: 'settings'})}),",
                "_icShop: Φ(IconText, {_bar: true, _icon: 'shop', _text: 'Shop', _onTap: {_func: route, _tapAction: 'shopScaffold'}})}) ⋀ ",
                "↲(Φ(Container, {_child: Φ(Row, (patMap(rowColHeader, (center, spaceAround, max, Ø)) ⋃ ",
                "{_children: [_icHome, _icSet, _icShop, Φ(SearchButton)]}))}))"
            ],
            "scaffoldPat": [
                "_title, _child, _body, _key, _flexibleSpace, _leading, _automaticallyImplyLeading | ",
                "mapPat(patHeader, (0.055, Ø, #FFFFFF, Ø, Ø, Ø)) ⋀ (_toolbarHeight ≔ ℛ(appBarHeight))",
                "↲(Φ(Scaffold, {_bottomNavigationBar: Φ(Container), _appBar: Φ(AppBar), _body: _body}))"
            ],
            "mainAppBar": [
                "_text, _flexibleSpace | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀  ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "hamburgerMenu": [
                "↲(Φ(IconButton, {_onTap: {_func: showDialog, _tapAction: Φ(MenuBubble, {_menuList: ℛ(model, menuList)})}, ",
                "_icon: 'menu_hamburger', _iconColor: ℛ(color, 'white')}))"
            ],
            "mainBody": [
                "_key | mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_itemRefMap ≔ ℛ(model, main)) ⋀ ",
                "(_itemRef ≔ _itemRefMap[elemList]) ⋀ ",
                "ℛ(setCache, 'elemItemList', 'elemItemList') ⋀ (_children ≔ [topicContainer, baseNavi]) ⋀ ↲(Φ(ListView))"
            ],
            "subScaffold": [
                "_itemRef, _itemRefMap, _title | τ('subScaffold') ⋀ mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ ",
                "(_children ≔ [topicContainer, subNavi]) ⋀ (_text ≔ _title) ⋀ ⋓({_body: Φ(ListView), _title: genAppBar, ",
                "_automaticallyImplyLeading: false, _child: mainBottomRow}) ⋀ ↲(scaffoldPat)"
            ],
            "topicContainer": [
                "⋓({_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), _width: ℛ(swratio, Ø, 1.0), ",
                "_topicSelection: ⊤(topicSelection), _smallTitle: ⊤(knowYourWorld)}) ⋀ (_topic ≔ Φ(Topic)) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [_topic, topicDialog({_dchild: journeyButton, _height: ℛ(hratio, Ø, 0.0985)})]) ⋀ ",
                "↲(Φ(Container, {_height: ℛ(hratio, Ø, 0.3202), _alignment: _alignment, _child: Φ(Stack), _width: _width}))"
            ],
            "topicDialog": [
                "_dchild, _height | (_child ≔ Φ(Container, {_child: _dchild, _alignment: decode(alignment, center)})) ⋀ ",
                "(_borderRadius ≔ decode(borderRadius, {radius: 24, type: circular})) ⋀ ",
                "⋓({_child: Φ(ClipRRect), _decoration: ℛ(appRes, diaDecoration), _height: _height, ",
                "_width: ℛ(swratio, Ø, 0.9947)}) ⋀ ↲(Φ(Align, {_child: Φ(Container), _alignment: decode(align, bottomCenter)}))"
            ],
            "journeyButton": [
                "(_e1 ≔ Φ(Text, {_text: ⊤(tojourney), _textStyle: ℛ(textStyle, ControlButtonTextStyle)})) ⋀ ",
                "(_e2 ≔ Φ(Icon, {_icon: rightArrowFull, _iconColor: ℛ(color, white), _iconSize: ℛ(sizeScale, Ø, 35.0)})) ⋀ ",
                "(_children ≔ [_e1, _e2]) ⋀ mapPat(rowColHeader, (center, spaceAround, Ø, Ø)) ⋀ ",
                "⋓({_child: Φ(Row), _height: ℛ(hratio, Ø, 0.0468), _width: ℛ(wratio, Ø, 0.64), ",
                "_beginColor: ℛ(color, correct), _endColor: ℛ(color, correctGradEnd)}) ⋀ ↲(Φ(TapItem, {_child: Φ(ColorButton), ",
                "_onTap: {_func: route, _tapAction: 'learnScaffold'}})) "
            ],
            "baseNavi": [
                "_itemRef, _itemRefMap | (_ta ≔ _itemRefMap['pattern']) ⋀ ⋓({_padding: ℛ(appRes, catBoxPadding), _childPattern: 'elemRow', ",
                "_childMap: {_itemRefMap: _itemRefMap, _tapAction: _ta[0], _sub: ℛ(model, sub)}}) ⋀ ⋓({_child: Φ(TapListItem), ",
                "_alignment: decode(alignment, topCenter), _width: ℛ(swratio, Ø, 1.0)}) ⋀ ↲(Φ(Container))"
            ],
            "elemRow": [
                "_item, _index, _itemRefMap, _sub | (_header ≔ _itemRefMap[header]) ⋀ (_textStyle ≔ ℛ(textStyle, SliderTextStyle)) ⋀ ",
                "(_ts ≔ ℛ(textStyle, SliderBoldTextStyle)) ⋀ mapPat(_header, _item) ⋀ (_text ≔ _name) ⋀ (((_sub = _ref) ⋀ ",
                "(_cardColor ≔ ℛ(Color, 'btnBlue')) ⋀ (_textStyle ≔ ℛ(textStyleColor, 'white', _textStyle)) ⋀ ",
                "(_ts ≔ ℛ(textStyleColor, 'white', _ts))) ⋁ (true)) ⋀ ⋓({_child: Φ(Text), _height: ℛ(hratio, Ø, 0.0468), _width: ℛ(swratio, Ø, 0.96)}) ⋀ ",
                "⋓({_bm: Φ(SizedBox), _itemRef: dataList(_itemRefMap, _item), _elemItemList: ℛ(getCache, 'elemItemList')}) ⋀ ",
                "(_children ≔ [_bm, _elemItemList]) ⋀  ⋓({_child: Φ(Column), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.015)}) ⋀ ⋓({_child: Φ(Card), _height: ℛ(hratio, Ø, 0.24)}) ⋀ ↲(Φ(Container))"
            ],
            "elemItemList": [
                "_itemRef, _index, _ref, _ts | (_ta ≔ _ref['pattern']) ⋀ ⋓({_childPattern: 'catCol', _direction: decode(axis, horizontal), ",
                "_childMap: ({_itemRefMap: _ref, _tapAction: _ta[0], _ts: _ts})}) ⋀ ",
                "(_child ≔ Φ(TapListItem)) ⋀ mapPat(patHeader, (0.172, Ø, Ø, Ø, centerLeft, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "catCol": [
                "_item, _index, _itemRefMap, _onTap, _progId, _ts | (_header ≔ _itemRefMap[header]) ⋀ mapPat(_header, _item) ⋀ ",
                "(_children ≔ catView) ⋀ mapPat(rowColHeader, (center, start, Ø, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "mapPat(patHeader, (0.172, Ø, Ø, Ø, Ø, Ø)) ⋀ (_itemRef ≔ dataList(_itemRefMap, _item)) ⋀ ",
                "(_onTap ≔ createEvent(route, {_itemRef: _itemRef, _itemRefMap: _ref, _title: _name, _progId: _progId, _PassScore: _PassScore})) ⋀",
                "(_width ≔ ℛ(hratio, Ø, 0.172)) ⋀ ↲(Φ(Container))"
            ],
            "catView": [
                "_item, _index, _name, _icon, _progId, _ts | (_sb ≔ Φ(SizedBox, {_height: 5.0})) ⋀ ",
                "⋓({_iconColor: ℛ(color, '#1785C1'), _iconSize: ℛ(sizeScale, Ø, 45.0)}) ⋀ ⋓({_child: Φ(Icon), _width: ℛ(hratio, Ø, 0.128353), ",
                "_decoration: ℛ(appRes, shadowDecoration)}) ⋀ mapPat(patHeader, (0.123, Ø, Ø, Ø, Ø, Ø)) ⋀ ",
                "(_ic ≔ Φ(NotiElem)) ⋀ (_tw ≔ Φ(Text, {_text: _name, _textStyle: _ts, _textAlign: center})) ⋀ ↲([_ic, _sb, _tw])"
            ],
            "subNavi": [
                "_itemRef, _itemRefMap | ⋓({_padding: ℛ(appRes, vertBoxPadding), _ts: ℛ(textStyle, SliderBoldTextStyle), _ta: _itemRefMap['pattern'], ",
                "_index: 0, _ti: #(_itemRef), _children: [], _alignment: 'spaceBetween', _spacing: ℛ(size20), _runSpacing: ℛ(size20)}) ⋀ itItem ⋀ ⋓({_child: Φ(Wrap), ",
                "_alignment: decode(alignment, topCenter), _width: ℛ(swratio, Ø, 1.0)}) ⋀ ↲(Φ(Container))"
            ],
            "itItem": [
                "_itemRef, _index, _itemRefMap, _ti, _ts, _children, _ta | (_item ≔ _itemRef[_index]) ⋀ (_child ≔ catCol) ⋀ ",
                "_c ≔ Φ(TapItem, {_child: _child, _tapAction: _ta[0], _onTap: _onTap}) ⋀ (_children ≪ _c) ⋀ (_index ≔ (_index + 1)) ⋀ ",
                "((_index < _ti) ⋀ ↲(itItem)) ⋁ ↲(true)"
            ],
            "groupScaffold": [
                "_itemRef, _itemRefMap, _title | (_title ≔ livesAppBar) ⋀ ℛ(setCache, 'elemItemList', 'elemItemList') ⋀ ",
                "(_onTap ≔ {_func: popRoute}) ⋀ (_leading ≔ Φ(IconButton)) ⋀ ",
                "(_body ≔ baseNavi) ⋀ ↲(scaffoldPat)"
            ],
            "mvcScaffold": [
                "_itemRef, _itemRefMap, _title, _progId, _PassScore | (_body ≔ mvcLayout) ⋀ (_title ≔ livesAppBar) ⋀ ",
                "⋓({_onTap: {_func: showDialog, _tapAction: mvc([quitDialog])}}) ⋀  (_leading ≔ Φ(IconButton)) ⋀ ",
                "(_child ≔ ƒ(mvc, [progRow])) ⋀ ↲(Φ(ScreenShot, {_child: scaffoldPat, _screenName: 'GameCompleteScreen'}))"
            ],
            "livesAppBar": [
                "_title, _flexibleSpace, _icon, _iconColor | (_valueKey ≔ '_text') ⋀ (_valueName ≔ 'lives') ⋀ (_textStyle ≔ ℛ(textStyle, TopicTxtStyle)) ⋀ ",
                "(_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Obx)) ⋀ (_child ≔ Φ(Center)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ (_lives ≔ Φ(SizedBox)) ⋀ ",
                "(_text ≔ _title) ⋀ (_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ ",
                "(_icon ≔ 'lives') ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ (_ic ≔ Φ(Icon)) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ ",
                "(_icon ≔ 'back') ⋀ (_children ≔ [_tText, _ic, _lives]) ⋀ ↲(Φ(Row))"
            ],
            "mvcLayout": [
                "_itemRef, _itemRefMap, _progId, _PassScore | ",
                "(_child ≔ mvc(newMvc, {_itemRef: _itemRef, _itemRefMap: _itemRefMap, _progId: _progId, _PassScore: _PassScore})) ⋀ ",
                "mapPat(patHeader, (0.97333, Ø, Ø, Ø, topCenter, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "learnScaffold": [
                "(_text ≔ ⊤(learningJourney)) ⋀ ⋓({_title: genAppBar, _child: mainBottomRow, _body: learnBody}) ⋀ ",
                "(_onTap ≔ {_func: popRoute}) ⋀ ↲(scaffoldPat)"
            ],
            "genAppBar": [
                "_flexibleSpace, _text, _leading | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀ ",
                "(_leading ≔ Φ(IconButton, {_icon: 'back', _iconColor: ℛ(color, 'white'), _onTap: {_func: popRoute}})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "learnBody": [
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_itemRefMap ≔ ℛ(model, learn)) ⋀ ",
                "(_itemRef ≔ _itemRefMap[elemList]) ⋀ ",
                "⋓({_width: ℛ(wratio, Ø, 0.05), _height: ℛ(hratio, Ø, 0.1), _child: Φ(ImageAsset, {_name: ℛ(lookup, greyArrow)})}) ⋀ ",
                "ℛ(setCache, greyImg, Φ(SizedBox)) ⋀ _child ≔ Φ(ImageAsset, {_name: ℛ(lookup, greenArrow)}) ⋀ ",
                "ℛ(setCache, greenImg, Φ(SizedBox)) ⋀ ℛ(setCache, 'elemItemList', 'learnItemList') ⋀ ",
                "(_baseNavi ≔  Φ(Container, {_padding: decode(padding, {top: ℛ(hratio, Ø, 0.18)}), _child: baseNavi})) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [learnContainer, _baseNavi]) ⋀ ",
                "(_child ≔ Φ(Container, {_alignment: _alignment, _child: Φ(Stack), _width: ℛ(swratio, Ø, 1.0)})) ⋀ ",
                "↲(Φ(SingleChildScrollView))"
            ],
            "learnContainer": [
                "↲(Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "_width: ℛ(swratio, Ø, 1.0), _topicSelection: ⊤(learning), _subtitle: ⊤(journey), _img: ℛ(lookup, learn)}))"
            ],
            "learnItemList": [
                "_item, _itemRef, _itemRefMap, _index, _ref, _ts | (_grProgId ≔ []) ⋀ (_lmap ≔ {_itemRef: _itemRef, _ref: _ref, ",
                "_grProgId: _grProgId, _index: _index, _ts: _ts}) ⋀ (_greenEvent ≔ createEvent('greenContainer', _lmap)) ⋀ ",
                "(_greyEvent ≔ createEvent('greyContainer', _lmap)) ⋀ mapPat(_itemRefMap[header], _item) ⋀ (_child ≔ Φ(GroupProgNoti)) ⋀ ",
                "mapPat(patHeader, (0.175, 1.0, Ø, Ø, center, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "learnCatContainer": [
                "_itemRef, _index, _ref, _grProgId, _childPattern, _ts | (_ta ≔ _ref['pattern']) ⋀ ⋓({_direction: decode(axis, horizontal), ",
                "_colWidth: (#(_itemRef) * ℛ(hratio, Ø, 0.2)), _childMap: ({_itemRefMap: _ref, _grProgId: _grProgId, _tapAction: _ta[0], _ts: _ts})}) ⋀ ",
                "(_child ≔ Φ(TapListItem))⋀ mapPat(patHeader, (0.175, _colWidth, Ø, Ø, center, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "greenContainer": [
                "_itemRef, _index, _ref, _grProgId, _ts | (_childPattern ≔ 'learnCatCol') ⋀ ",
                "((_index = 0) ⋀ ↲(learnCatContainer)) ⋁ ((_alignment ≔ decode(align, {horiz: 0.0, vert: -3.8})) ⋀ ",
                "(_child ≔ ℛ(getCache, greenImg)) ⋀ (_o ≔ Φ(OverflowBox)) ⋀ ",
                "(_c ≔ Φ(Align, {_child: learnCatContainer, _alignment: decode(align, {horiz: 0.0, vert: 0.0})})) ⋀ ",
                "(_children  ≔ [_o, _c]) ⋀ ↲(Φ(Stack)))"
            ],
            "greyContainer": [
                "_itemRef, _index, _ref, _grProgId, _ts | (_childPattern ≔ 'dCatCol') ⋀ ",
                "(_alignment ≔ decode(align, {horiz: 0.0, vert: -3.8})) ⋀ (_child ≔ ℛ(getCache, greyImg)) ⋀ (_o ≔ Φ(OverflowBox)) ⋀ ",
                "(_c ≔ Φ(Align, {_child: learnCatContainer, _alignment: decode(align, {horiz: 0.0, vert: 0.0})})) ⋀ ",
                "(_children  ≔ [_o, _c]) ⋀ ↲(Φ(Stack))"
            ],
            "learnCatCol": "_item, _index, _itemRefMap, _onTap, _grProgId, _ts | (_r ≔ catCol) ⋀ (_grProgId ≪ _progId) ⋀ ↲(_r)",
            "dCatCol": [
                "_item, _index, _itemRefMap, _onTap, _grProgId, _ts | (_header ≔ _itemRefMap[header]) ⋀ mapPat(_header, _item) ⋀ ",
                "(_children ≔ catView) ⋀ mapPat(rowColHeader, (center, start, Ø, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "mapPat(patHeader, (0.1539, Ø, Ø, Ø, Ø, Ø)) ⋀ (_itemRef ≔ dataList(_itemRefMap, _item)) ⋀ ",
                "(_width ≔ ℛ(hratio, Ø, 0.155)) ⋀ (_grProgId ≪ _progId) ⋀ ↲(Φ(Opacity, {_child: Φ(Container), _opacity: 0.5}))"
            ],
            "supportScaffold": "_event | (_text ≔ 'Support') ⋀ ⋓({_title: genAppBar, _child: mainBottomRow, _body: supportBody}) ⋀ ↲(scaffoldPat)",
            "supportBody": [
                "_event | (_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [supportContainer, supportCards]) ⋀ ",
                "(_child ≔ Φ(Container, {_alignment: _alignment, _child: Φ(Stack), _width: ℛ(swratio, Ø, 1.0), _height: ℛ(shratio, Ø, 0.825)})) ⋀ ",
                "↲(Φ(SingleChildScrollView))"
            ],
            "supportContainer": [
                "↲(Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "_width: ℛ(swratio, Ø, 1.0), _topicSelection: 'Support', _smallTitle: ⊤(supportSubtitle), _img: ℛ(lookup, support)}))"
            ],
            "supportCards": [
                "_event | ((_event = subscription) ⋀ ↲(Φ(Container, {_child: Φ(Text, {_text: 'Not implemented'})}))) ⋁ (_formData ≔ {}) ⋀ supportFields ⋀ ",
                "(_title ≔ Φ(Text, {_text: ⊤(_event), _textStyle: ℛ(textStyle, BlueTitleStyle)})) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "⋓({_child: Φ(Padding, {_child: Φ(Form), _padding: ℛ(appRes, boxPadding)}), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.05)}) ⋀ ⋓({_child: Φ(Card), _width: ℛ(swratio, Ø, 1.0), _height: ℛ(hratio, Ø, 0.675)}) ⋀ ",
                "↲(Φ(Align, {_child: Φ(Container), _alignment: decode(align, bottomCenter)}))"
            ],
            "supportFields": [
                "_event, _formFields | (((_event = error) ⋀ (_sj  ≔ {_name: 'problem', _label: ⊤(problem), _isReq: true}) ⋀ ",
                "(_m ≔ {_name: 'errMessage', _label: ⊤(errMessage), _isReq: true, _maxLines: 4})) ⋁ ",
                "((_sj  ≔ {_name: 'subject', _label: ⊤(subject), _isReq: true}) ⋀ ",
                "(_m ≔ {_name: 'message', _label: ⊤(message), _isReq: true, _maxLines: 4}))) ⋀ ",
                "(_e ≔ {_name: 'Email', _inputType: 'email', _isReq: true}) ⋀ ↲(_formFields ≔ [_sj, _m, _e])",
                ""
            ],
            "lcard": [
                "_children | mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "⋓({_child: Φ(Padding, {_child: Φ(Column), _padding: ℛ(appRes, boxPadding)}), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.05)}) ⋀ ↲(Φ(Card))"
            ],
            "gSetting": [
                "mapPat(rowColHeader, (start, spaceBetween, max, Ø)) ⋀ ",
                "⋓({_g: Φ(Text, {_text: ⊤(genSetting), _textStyle: ℛ(textStyle, TitleTextStyle)}), ",
                "_l: Φ(Text, {_text: (⊤(language) + ⊤(colon) + ' ' + ℛ(model, userProfile, lang)), _textStyle: ℛ(textStyle, NormalTextStyle)}), ",
                "_lb: Φ(ItemElem, {_item: ⊤(setLanguage), _decoration: ℛ(appRes, selemDecoration), _height: ℛ(hratio, Ø, 0.03), ",
                "_width: ℛ(wratio, Ø, 0.25), _alignment: decode(alignment, center), _textStyle: ℛ(textStyle, SmallTextStyle)}), ",
                "_r: Φ(Text, {_text: ⊤(removeAds), _textStyle: ℛ(textStyle, NormalTextStyle)}), ",
                "_rb: Φ(ItemElem, {_item: ⊤(toShop), _decoration: ℛ(appRes, selemDecoration), _height: ℛ(hratio, Ø, 0.03), ",
                "_width: ℛ(wratio, Ø, 0.25), _alignment: decode(alignment, center), _textStyle: ℛ(textStyle, SmallTextStyle)}), ",
                "_d: Φ(Divider, {_color: ℛ(color, 'grey700')})}) ⋀ (_children ≔ [_l, _lb]) ⋀ (_tl ≔ Φ(Row)) ⋀ ",
                "(_children ≔ [_r, _rb]) ⋀ (_tr ≔ Φ(Row)) ⋀ ↲([_g, _d, _tl, _d, _tr])"
            ],
            "removeAd": [
                "⋓({_r: Φ(Text, {_text: ⊤(removeAds), _textStyle: ℛ(textStyle, NormalTextStyle)}), ",
                "_rb: Φ(ItemElem, {_item: ⊤(toShop), _decoration: ℛ(appRes, selemDecoration), _height: ℛ(hratio, Ø, 0.03)})}) ⋀ ",
                "↲([_r, _rb])"
            ],
            "aSetting": [
                "_event | mapPat(rowColHeader, (start, spaceBetween, max, Ø)) ⋀ (_textStyle ≔ ℛ(textStyle, NormalTextStyle)) ⋀ ",
                "(_tap ≔ 'fsmEvent') ⋀ (_tapAction ≔ 'supportfsm') ⋀ ⋓({_p: Φ(Text, {_text: 'App', _textStyle: ℛ(textStyle, TitleTextStyle)}), ",
                "_a: Φ(Text, {_text: ⊤(shareApp), _textStyle: _textStyle}), ",
                "_ai: Φ(Icon, {_icon: 'share', _iconColor: ℛ(color, 'btnBlue')}), _d: Φ(Divider, {_color: ℛ(color, 'grey700'), _thickness: 1.5})}) ⋀ ",
                "(_text ≔ 'FAQ') ⋀ (_tapEvent ≔ 'FAQ') ⋀ (_f ≔ textButton) ⋀ (_text ≔ ⊤(error)) ⋀ (_tapEvent ≔ 'error') ⋀ (_e ≔ textButton) ⋀ ",
                "(_text ≔ ⊤(support)) ⋀ (_tapEvent ≔ 'support') ⋀ (_c ≔ textButton) ⋀ (_text ≔ ⊤(feedback)) ⋀ (_tapEvent ≔ 'feedback') ⋀ (_g ≔ textButton) ⋀ ",
                "(_text ≔ ⊤('subscription')) ⋀ (_tapEvent ≔ 'subscription') ⋀ (_s ≔ textButton) ⋀ (_children ≔ [_a, _ai]) ⋀ ",
                "(_ta ≔ Φ(TapItem, {_child: Φ(Row), _onTap: {_func: _tap, _map: {_event: 'shareApp'}, _tapAction: ç(_tapAction)}})) ⋀ (((_event = 'settings') ⋀ (_children ≔ removeAd) ⋀ ",
                "(_tr ≔ Φ(TapItem, {_onTap: {_func: _tap, _map: {_event: 'shop'}, _tapAction: 'menufsm'}, _child: Φ(Row)})) ⋀ (_text ≔ 'Clear Cache') ⋀ (_tapEvent ≔ 'cCache') ⋀ ",
                "(_cc ≔ textButton) ⋀ ↲([_tr, _d, _cc, _d, _f, _d, _e, _d, _g, _d, _c, _d, _s, _d, _ta])) ⋁ ↲([_f, _d, _e, _d, _g, _d, _c, _d, _s, _d, _ta]))"
            ],
            "textButton": [
                "_text, _textStyle, _tap, _tapEvent, _tapAction | (_child ≔ Φ(Text)) ⋀ (_width ≔ ℛ(wratio, Ø, 0.6)) ⋀ ",
                "↲(Φ(TapItem, {_child: Φ(SizedBox), _onTap: {_func: _tap, _map: {_event: _tapEvent}, _tapAction: ç(_tapAction)}}))"
            ],
            "shopScaffold": "(_text ≔ 'Shop') ⋀ ⋓({_title: genAppBar, _child: mainBottomRow, _body: shopBody}) ⋀ ↲(scaffoldPat)",
            "shopBody": [
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_sb ≔ Φ(SizedBox, {_height: ℛ(hratio, Ø, 0.005)})) ⋀ (_userType ≔ ℛ(model, userProfile, userType)) ⋀ ",
                "(_fwid ≔ ℛ(sizeScale, Ø, 340.0)) ⋀ (((_userType = 'User') ⋀ (_children ≔ [shopContainer, _sb, watchAdDialog, _sb, subscription, _sb, shopQuestions, _sb])) ⋁ ",
                "(_children ≔ [shopContainer, _sb, userSubscription, _sb, switchSubscription,  _sb, shopQuestions, _sb])) ⋀ ℛ(setResxValue, 'mvcStack') ⋀ ",
                "ℛ(setResxValue, 'mvcStack', [Φ(ListView)]) ⋀ ↲(Φ(Obx, {_valueName: 'mvcStack', _child: Φ(Stack)}))"
            ],
            "shopContainer": [
                "_userType | (_topic ≔ Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "_width: ℛ(swratio, Ø, 1.0), _topicSelection: 'Shop', _smallTitle: ⊤(shopping), _img: ℛ(lookup, shop)})) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [_topic, topicDialog({_dchild: shopLives, _height: ℛ(hratio, Ø, 0.0785)})]) ⋀ ",
                "↲(Φ(Container, {_height: ℛ(hratio, Ø, 0.2702), _alignment: _alignment, _child: Φ(Stack), _width: _width}))"
            ],
            "shopLives": [
                "_userType | (_textStyle ≔ 'BlueTitleStyle') ⋀ (((_userType = 'User') ⋀ (_text ≔ ⊤('lives')) ⋀ (_lt ≔ Φ(Text)) ⋀ (_valueKey ≔ '_text') ⋀ ",
                "(_valueName ≔ 'lives') ⋀ (_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Obx))) ⋁ ((_text ≔ ⊤('unlimited')) ⋀ (_lt ≔ Φ(Text)) ⋀ (_text ≔ '∞') ⋀ ",
                "(_textStyle ≔ 'BlueTitleStyle') ⋀ (_child ≔ Φ(Text)))) ⋀ (_child ≔ Φ(Center)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ (_lives ≔ Φ(SizedBox)) ⋀ ",
                "(_icon ≔ 'lives') ⋀ (_iconColor ≔ 'btnBlue') ⋀ (_ic ≔ Φ(Icon)) ⋀ (_children ≔ [_ic, _lives]) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_lb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 70.0), _child: Φ(Row)})) ⋀ ",
                "(_children ≔ [_lt, _lb]) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ↲(Φ(Row))"
            ],
            "watchAdDialog": [
                "(_t ≔ Φ(Text, {_text: ⊤('watchAnAd'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_children ≔ [_t, Φ(WatchAd)]) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ↲(topicDialog({_dchild: Φ(Column), _height: ℛ(hratio, Ø, 0.1485)}))"
            ],
            "subscription": [
                "_fwid | (_t ≔ Φ(Text, {_text: ⊤('subscribe'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_textStyle ≔  'MediumNormalTextStyle') ⋀ ",
                "(_text ≔ ⊤('monthly')) ⋀ (_mt ≔ Φ(Text)) ⋀ (_text ≔ ⊤('annually')) ⋀ (_at ≔ Φ(Text)) ⋀ (_textStyle ≔  'NormalSTextStyle') ⋀ ",
                "(_text ≔ ⊤('mSubscribe')) ⋀ (_mst ≔ Φ(Text)) ⋀ (_text ≔ ⊤('aSubscribe')) ⋀ (_ast ≔ Φ(Text)) ⋀ (_wid ≔ ℛ(sizeScale, Ø, 200.0)) ⋀ ",
                "mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ [_mt, _mst]) ⋀ (_mw ≔ Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 80.0), _width: _wid})) ⋀ ",
                "(_children ≔ [_at, _ast]) ⋀ ⋓({_aw: Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 60.0), _width: _wid}), _event: 'mSubscribePrice', ",
                "_wid: ℛ(sizeScale, Ø, 80.0), _time: getRenewDay({_nextMonth: true})}) ⋀ (_mb ≔ Φ(TapItemElem, {_event: _event, _width: _wid, ",
                "_spec: subscribedDial})) ⋀ (_time ≔ getRenewDay({})) ⋀ (_event ≔ 'aSubscribePrice') ⋀ (_ab ≔ Φ(TapItemElem, ",
                "{_event: _event, _width: _wid, _spec: subscribedDial})) ⋀ (_sb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 20.0)})) ⋀ ",
                "(_d ≔ Φ(Divider, {_color: ℛ(color, 'greyText'), _thickness: 1.5})) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ [_mw,_sb, _mb]) ⋀ (_mr ≔ Φ(Row)) ⋀ (_children ≔ [_aw, _sb, _ab]) ⋀ (_ar ≔ Φ(Row)) ⋀ ",
                "(_children ≔ [_t, _mr, _d, _ar]) ⋀ (_c ≔ Φ(Container, {_child: Φ(Column), ",
                "_height: ℛ(sizeScale, Ø, 180.0), _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: ℛ(sizeScale, Ø, 200.0)}))"
            ],
            "subscribedDial": [
                "_time, _event | τ(_event + ' ' + _time) ⋀ (((_event = 'unsubscribed') ⋀ (_text ≔ ⊤('successUnsub')) ⋀ ",
                "(_sm ≔ {}) ⋀ (_rt ≔ Φ(Text, {_text: ⊤('resubscribe'), _textStyle: 'CorrTxtStyle', _textAlign: decode(textAlign, center)}))) ⋁ ",
                "((_text ≔ ⊤('successSub')) ⋀ (_sm ≔ {_btnType: 'blue'}) ⋀(_rt ≔ Φ(Text, {_text: (⊤('renew') + _time + ⊤('canCancel')), ",
                "_textStyle: 'CorrTxtStyle', _textAlign: decode(textAlign, center)})))) ⋀ ",
                "(_textStyle ≔ 'BoldCorrTextStyle') ⋀ (_height ≔ ℛ(sizeScale, Ø, 80.0)) ⋀ (_t ≔ Φ(Text)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 300.0)) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_children ≔ [_t, _rt]) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "(_onTap ≔ {_func: process, _tapAction: 'subscription', _map: {_event: _event, _height: ℛ(sizeScale, Ø, 100.0), _child: Φ(Container), ",
                "_time: _time, _onTap: {_func: 'popRoute'}}}) ⋀ ↲(_sm ⋃ {_onTap: _onTap})"
            ],
            "shopQuestions": [
                "_fwid | (_t ≔ Φ(Text, {_text: ⊤('questions'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_textStyle ≔ 'MediumNormalTextStyle') ⋀ ",
                "(_sb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 10.0)})) ⋀ (_text ≔ 'FAQs') ⋀ (_children ≔ [_sb, Φ(Text)]) ⋀ (_mt ≔ Φ(Row)) ⋀ ",
                "(_text ≔ ⊤('support')) ⋀ (_children ≔ [_sb,  Φ(Text)]) ⋀ (_at ≔ Φ(TapItem, {_child: Φ(Row), ",
                "_onTap: {_func: 'fsmEvent', _map: {_event: 'support'}, _tapAction: 'supportfsm'}})) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_d ≔ Φ(Divider, {_color: ℛ(color, 'greyText'), _thickness: 1.5})) ⋀ (_children ≔ [_mt, _d, _at]) ⋀ ",
                "(_cc ≔ Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 60.0), _width: _fwid})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_t, _cc]) ⋀ (_c ≔ Φ(Container, {_child: Φ(Column), ",
                "_height: ℛ(sizeScale, Ø, 80.0), _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: ℛ(sizeScale, Ø, 100.0)}))"
            ],
            "userSubscription": [
                "_userType, _fwid | (_t ≔ Φ(Text, {_text: ⊤('usubscribed'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_textStyle ≔  'MediumNormalTextStyle') ⋀ ",
                "(((_userType = 'mSubscriber') ⋀ (_text ≔ ⊤('subscriptionm')) ⋀ (_event ≔ 'mCancel')) ⋁ ((_text ≔ ⊤('subscriptiona')) ⋀ ",
                "(_event ≔ 'aCancel'))) ⋀ (_s ≔ Φ(Text)) ⋀ (_text ≔ (⊤('renew') + ℛ(model, userProfile, 'renew') + '.')) ⋀ ",
                "(_children ≔ [_s, Φ(SizedBox, {_height: ℛ(sizeScale, Ø, 10.0)}), Φ(Text)]) ⋀ ",
                "mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ (_cc ≔ Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 70.0), _width: ℛ(sizeScale, Ø, 300.0)})) ⋀ ",
                "(_ab ≔ Φ(BorderButton, {_event: 'cancel', _btnType: 'incorrect', _spec: {_onTap: cancelSubscription}})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_t, _cc, _ab]) ⋀ (_c ≔ Φ(Container, {_child: Φ(Column), ",
                "_height: ℛ(sizeScale, Ø, 160.0), _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: ℛ(sizeScale, Ø, 180.0)}))"
            ],
            "cancelSubscription": [
                "_event | (_child ≔ Φ(Text, {_text: ⊤('cancelQuest'), _textStyle: 'BoldInCorrTextStyle', _textAlign: decode(textAlign, center)})) ⋀ (_height ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ ",
                "(_width ≔ ℛ(sizeScale, Ø, 300.0)) ⋀ (_c1 ≔ Φ(Container)) ⋀ (_map ≔ {_event: _event, _height: ℛ(sizeScale, Ø, 50.0), _child: _c1, ",
                "_btn2: {_event: 'keep', _spec: {_btnType: 'blue', _onTap: {_func: 'popRoute'}}}, _btn1: ({_event: _event, ",
                "_spec: subscribedDial({_event: 'unsubscribed'})})}) ⋀ ",
                "(((_event = 'mCancel') ⋀ ↲({_func: process, _tapAction: 'subscription', _map: _map})) ⋁ ((_child ≔ Φ(Text, {_text: ⊤('altSub'), _textStyle: 'ChoiceButnTxtStyle', ",
                "_textAlign: decode(textAlign, center)})) ⋀ (_time ≔ getRenewDay({_nextMonth: true})) ⋀ (_c2 ≔ Φ(Container)) ⋀ (_event ≔ 'mSubscribePrice') ⋀ ",
                "↲({_func: process, _tapAction: 'subscription', _map: (_map ⋃ {_height: _height, _sChild: _c2, _sEvent: 'switchm', _sHeight: ℛ(sizeScale, Ø, 50.0), _spec: subscribedDial})})))"
            ],
            "switchSubscription": [
                "_userType, _fwid | (((_userType = 'mSubscriber') ⋀ ⋓({_t: ⊤('aSwitch'), _amt: ⊤('annually'), _amst: ⊤('aOffer'), _event: 'aSubscribePrice', ",
                "_height: ℛ(sizeScale, Ø, 60.0), _time: getRenewDay({})})) ⋁ ⋓({_t: ⊤('mSwitch'), _amt: ⊤('monthly'), _amst: ⊤('mOffer'), _event: 'mSubscribePrice', ",
                "_height: ℛ(sizeScale, Ø, 120.0), _time: getRenewDay({_nextMonth: true})})) ⋀ (_t ≔ Φ(Text, {_text: _t, _textStyle: 'BoldNormalTextStyle'})) ⋀ ",
                "(_textStyle ≔  'MediumNormalTextStyle') ⋀ (_text ≔ _amt) ⋀ (_amt ≔ Φ(Text)) ⋀ (_textStyle ≔  'NormalSTextStyle') ⋀ (_text ≔ _amst) ⋀ (_amst ≔ Φ(Text)) ⋀ ",
                "mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_amt, _amst]) ⋀ (_sw ≔ ℛ(sizeScale, Ø, 20.0)) ⋀ ",
                "(_w ≔ Φ(Container, {_child: Φ(Column), _height: _height, _width: ℛ(sizeScale, Ø, 200.0)})) ⋀ (_b ≔ Φ(TapItemElem, ",
                "{_event: _event, _width: ℛ(sizeScale, Ø, 80.0), _spec: subscribedDial})) ⋀ (_sb ≔ Φ(SizedBox, {_width: _sw})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_height ≔ (_height + 2 * _sw)) ⋀ (_children ≔ [_w,_sb, _b]) ⋀ ",
                "(_r ≔ Φ(Row)) (_children ≔ [_t, _r]) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "(_c ≔ Φ(Container, {_child: Φ(Column), _height: _height, _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: (_height + _sw)}))"
            ],
            "fsmPat": [
                "_state, _event | ((_event = 'confirm') ⋀ ((_state = 'selected') ⋁ (_state = 'completed')) ⋀ ↲('CheckAns')) ⋁ ",
                "((_event = 'next') ⋀ (_state = 'confirmed') ⋀ ↲('NextGame')) ⋁ ",
                "((_event = 'tryAgain') ⋀ (_state = 'confirmed') ⋀ ↲('TryAgain')) ⋁ ",
                "((_event = 'showAnswer') ⋀ (_state = 'confirmed') ⋀ ↲('ShowAnswer')) ⋁ ",
                "((_event = 'gameDone') ⋀ ↲('GameDone')) ⋁ ((_event = 'repeatGame') ⋀ ↲('RepeatGame')) ⋁ ",
                "((_event = 'cancel') ⋀ ↲('Cancel')) ⋁ ((_event = 'continue') ⋀ ↲('Continue')) ⋁ ↲(Ø)"
            ],
            "MCfsm": "_state, _event | ((_event = 'select') ⋀ ((_state = 'start') ⋁ (_state = 'selected')) ⋀ ↲('Selection')) ⋁ ↲(fsmPat)",
            "Textfsm": [
                "_state, _event | ((_event = 'edited') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Editing')) ⋁ ",
                "((_event = 'empty') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Empty')) ⋁ ",
                "((_event = 'select') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Selection')) ⋁ ↲(fsmPat)"
            ],
            "Orderfsm": [
                "_state, _event | ((_event = 'select') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Selection')) ⋁ ",
                "((_event = 'dropSel') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('DropSel')) ⋁ ↲(fsmPat)"
            ],
            "Sentencefsm": [
                "_state, _event | ((_event = 'edited') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Editing')) ⋁ ",
                "((_event = 'empty') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Empty')) ⋁ ",
                "↲(Orderfsm) ⋁ ↲(fsmPat)"
            ],
            "Sliderfsm": "_state, _event | ((_event = 'confirm') ⋀ ↲('CheckAns')) ⋁ ↲(fsmPat)",
            "SvgMapfsm": "_state, _event | ↲(Sliderfsm)",
            "WebViewfsm": "_state, _event | ((_event = 'next') ⋀ ↲(_state)) ⋁ ↲(fsmPat)",
            "titleDialog": [
                "_event, _title | (_h ≔ Φ(Text, {_text: _title, _textStyle: ℛ(textStyle, TitleTextStyle)})) ⋀ ",
                "(_e ≔ Φ(IconButton, {_onTap: {_func: fsmEvent, _tapAction: 'closeDialog'}, _iconColor: 'grey700', _icon: 'cancel', _iconSize: 16.0})) ⋀ ",
                "(_mainAxisAlignment ≔ decode(mainAxisAlignment, spaceBetween)) ⋀ (_children ≔ [_h, _e]) ⋀ (_h ≔ Φ(Row)) ⋀ ",
                "mapPat(rowColHeader, (start, spaceBetween, max, Ø)) ⋀ (_children ≔ aSetting) ⋀ (_height ≔ ℛ(hratio, Ø, (0.035 * #(_children) + 0.05))) ⋀ ",
                "(_children ≔ [_h, lcard]) ⋀ ⋓({_child: Φ(Column), _width: ℛ(hratio, Ø, 0.9)}) ⋀ ↲(Φ(Container))"
            ],
            "closeDialog": "↲(popRoute())",
            "menufsm": [
                "_event, _title | (popRoute()) ⋀ (((_event = 'search') ⋀ ↲(onSearch({}))) ⋁ (((_event = 'settings') ⋁ (_event = 'support')) ⋀ changeTheme() ⋀ ",
                "↲(buildDialog('titleDialog', {_event: _event, _title: _title}))) ⋁ ((_event = 'home') ⋀ ↲(home())) ⋁ ((_event = 'shop') ⋀ ↲(route('shopScaffold'))))"
            ],
            "supportfsm": [
                "_event | (popRoute()) ⋀ ((_event = shareApp) ⋀ ↲(onShare({_text: ⊤(sharedText), _subject: ⊤(sharedSubject)}))) ⋁ ",
                "((_event = cCache) ⋀ ↲(clearCache())) ⋁ (↲(route('supportScaffold')))"
            ],
            "actions": [
                "_event, _vars | ((_event = 'settings') ⋀ ↲({_func: fsmEvent, _map: {_event: 'settings', _title: 'Settings'}, _tapAction: 'menufsm'})) ⋁ ",
                "((_event = 'shop') ⋀ ↲({_func: route, _tapAction: 'shopScaffold'}))"
            ],
            "testBox": "(_text ≔ testText) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
"userProfile": {
   "appVersion": "",
   "userToken": "",
   "reset": true,
   "lang": "English (UK)",
   "locale": "de",
   "configLives": 100,
   "lives": 100,
   "liveTimestamp": 0,
   "progress": [],
   "versions": "0.0",
   "userType": "User",
   "timestamp": 1636410287,
   "lastsync": 1627510285,
   "renew": ""
	},
"search": [
	"Articles⇒items:23;",
	"Continents⇒groups:0;Country⇒groups:1;Countries⇒groups:1;Identify Continent⇒items:0;"
],
"menuList": [
	"home;Home",
	"support;Support",
	"shop;Shop",
	"search;Search;startSearch",
	"support;Support"
]
}