{
    "title": "Sirius Prototype",
    "version": "0.00",
    "liveGenTime": 30,
    "main": "categories",
    "learn": "learnCat",
    "text": {
        "+1point": "+ 1 point",
        "accuracy": "ACCURACY WITHIN #A%#%.",
        "almost": "ALMOST",
        "answer": "ANSWER",
        "Answer": "Answer",
        "cancel": "CANCEL",
        "confirm": "CONFIRM",
        "congrat": "CONGRATUATIONS",
        "continue": "CONTINUE",
        "corr": "CORRECT",
        "corrText": "CORRECT!",
        "editText": "Select element to edit.",
        "forQuiz": "FOR THIS QUIZ!",
        "gameDone": "DONE",
        "highScore": "YOU GOT A NEW HIGH SCORE",
        "hintText": "Hint #n# of #t#",
        "incorr": "Incorrect",
        "journey": "Journey",
        "knowYourWorld": "Get to know your world!",
        "learning": "Your Learning",
        "learningJourney": "Learning Journey",
        "livesSub": "SUBSCRIBE FOR UNLIMITED LIVES",
        "liveOut": "OUT OF LIVES",
        "looseLife": "YOU LOST A LIFE.",
        "looseProgress": "All progress will be lost.",
        "lowLives": "LOW ON LIVES",
        "maybe": "MAY BE YOU NEED A BIT MORE",
        "next": "NEXT",
        "nextHint": "Next Hint",
        "nextLife": "Next life in ",
        "notFinish": "You may not be able to finish this game if you get more than #n# questions wrong.",
        "notQuite": "NOT QUITE.",
        "playAgain": "You can explore articles and content but not play any games until you have lives again",
        "prevHint": "Previous Hint",
        "practice": "PRACTICE ON THIS ONE.",
        "quit": "QUIT",
        "quitText": "Are you sure you want to quit?",
        "quizComplete": "YOU COMPLETED THE QUIZ!",
        "repeatGame": "TRY AGAIN",
        "rni": "The Rate of Natural Increase (RNI) is based on which factors?",
        "search": "Search",
        "share": "Share your archievement!",
        "showAnswer": "SHOW ANSWER",
        "testText": "It's just a test!!!",
        "tojourney": "TO LEARNING JOURNEY",
        "topicSelection": "Topic Selection",
        "totalQ": "Total Questions",
        "tryAgain": "TRY AGAIN",
        "typeAnswer": "Type Your Answer",
        "tryTeachMode": "TRY TEACHING MODE",
        "watchAd": "WATCH AD",
        "wellDone": "WELL DONE!",
        "wontLoose": "Try again. You won't loose a life.",
        "yourSel": "Your Selection",
        "yourScore": "Your Score"
    },
    "lookup": {
        "United States": [
            "usa",
            "us",
            ""
        ],
        "United Kingdom": [
            "uk",
            "gb",
            ""
        ],
        "semicolon": ";",
        "hash": "#",
        "greyArrow": "assets/images/greyarrow.png",
        "greenArrow": "assets/images/greenarrow.png"
    },
    "config": {
        "categories": {
            "dataStart": "GR1",
            "header": "CID;name;ref;GR1;GR2;GR3;GR4;GR5",
            "elemList": [
                "WorlC001;World;groups;2;3;1;4",
                "ContiC001;Continents;groups;0",
                "CountC001;Countries;groups;1",
                "WaterC001;Water;groups;5;6;7",
                "MountC001;Mountains;groups;8;9;10",
                "IslanC001;Islands;groups;11",
                "CitieC001;Cities;groups;12;13"
            ]
        },
        "groups": {
            "dataStart": "T1",
            "pattern": "groupScaffold",
            "header": "GRID;name;icon;progId;ref;T1;T2;T3;T4;T5",
            "elemList": [
                "ContGR001;Continents;continents;[1,2,3,20,21,22,24,25];types;0;1;2;3",
                "CounGR001;Countries;countries;[4,5,6,19,23];types;4;5;6;7",
                "WorIGR001;World Intro;atmosphere;[7];types",
                "hemiGR001;Hemisphere;climate_zones;[8];types",
                "SolaGR001;Solar System;solar_system;[9];types",
                "OceaGR001;Oceans;oceans;[10];types",
                "RiveGR001;Rivers;rivers;[11];types",
                "LakEGR001;Lakes In Europe;lakes;[12];types",
                "MouRGR001;Mountain Ranges;glacier;[13];types",
                "MounGR001;Mountains;mountains;[14];types",
                "VolcGR001;Volcanoes;volcanoes;[15];types",
                "IslaGR001;Islands;islands;[16];types",
                "CapiGR001;Capitals;capitals;[17];types",
                "CitiGR001;Cities;cities;[18];types"
            ]
        },
        "types": {
            "dataStart": "G1",
            "header": "TID;name;ref;G1;G2;G3;G4;G5;G6;G7;G8;G9;G10",
            "elemList": [
                "ContiT001;Level 1;items;0;1;2",
                "ContiT002;Level 2;items;20;21;19",
                "ContiT003;Learn;tutorials;0",
                "ContiT004;Article;articles;0",
                "CountT005;Level 1;items;3;4",
                "CountT006;Level 2;items;23;22;18;5",
                "CountT007;Learn;tutorials;1",
                "CountT008;Article;articles;1"
            ]
        },
        "items": {
            "dataStart": "Q1",
            "pattern": "mvcScaffold",
            "header": "GID;name;icon;PassScore;progId;ref;Q1;Q2;Q3;Q4;Q5;Q6;Q7;Q8;Q9;Q10",
            "elemList": [
                "ContG0001;Identify Continent;continents;0.6;1;questions;0;0;0",
                "ContG0002;Continent Size;continents;0.75;2;questions;1",
                "ContG0003;Continent Quiz;continents;0.75;3;questions;2",
                "CounG0001;Identify Country;countries;0.75;4;questions;6",
                "CounG0002;Identify Flag;flags;0.75;5;questions;[7‥13];[7‥13];7‥13",
                "CounG0003;Country Quiz;countries;0.75;6;questions;20;16",
                "WorIG0001;World Intro;atmosphere;0.75;7;questions",
                "hemiG0001;Hemisphere;climate_zones;0.75;8;questions",
                "SolaG0001;Solar System;solar_system;0.75;9;questions",
                "OceaG0001;Oceans;oceans;0.75;10;questions",
                "RiveG0001;Rivers;rivers;0.75;11;questions",
                "LakEG0001;Lakes In Europe;lakes;0.75;12;questions",
                "MouRG0001;Mountain Ranges;glacier;0.75;13;questions",
                "MounG0001;Mountains;mountains;0.75;14;questions",
                "VolcG0001;Volcanoes;volcanoes;0.75;15;questions",
                "IslaG0001;Islands;islands;0.75;16;questions",
                "CapiG0001;Capitals;capitals;0.75;17;questions",
                "CitiG0001;Cities;cities;0.75;18;questions",
                "CounG0004;Select Country Flag;flags;0.75;19;questions;14;14;14",
                "ContG0005;Select Answers;continents;0.6;20;questions;15",
                "ContG0006;Identify Continent;continents;0.6;21;questions;3;3;3",
                "ContG0007;Continent;continents;0.6;22;questions;19;17;18;4",
                "CounG0004;Country Pick;countries;0.6;23;questions;21;21;21",
                "ArtiA0001;Article Test;article;;;articleWeb;0"
            ]
        },
        "tutorials": {
            "dataStart": "TU1",
            "header": "TUID;name;icon;progId;ref;TU1;TU2;TU3;TU4;TU5;TU6;TU7;TU8;TU9;TU10;",
            "elemList": [
                "ConTU0001;Tutorial;tutorial;24;questions",
                "CouTU0002;Tutorial;tutorial;25;questions"
            ]
        },
        "articles": {
            "dataStart": "A1",
            "header": "AID;name;icon;ref;A1;A2;A3;A4;A5;A6;A7;A8;A9;A10;",
            "elemList": [
                "ContA0001;Article;article;questions",
                "CounA0002;Article;article;questions"
            ]
        },
        "learnCat": {
            "dataStart": "GR1",
            "header": "CID;name;ref;compPercent;GR1;GR2;GR3;GR4;GR5",
            "elemList": [
                "ContiC001;Continents;groups;10.0;0",
                "CountC001;Continents and Countries;groups;40.0;0;1",
                "WorlC001;World;groups;50.0;2;3",
                "WaterC001;Water;groups;50.0;5;6",
                "MountC001;Mountains;groups;50.0;8;9",
                "IslanC001;Islands;groups;50.0;11",
                "CitieC001;Cities;groups;50.0;12;13"
            ]
        },
        "questions": {
            "header": "QID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mapping_inx",
            "elemList": [
                "ContQ0001;MC;contData;What is this continent?;;(_ans,2);6;This continent is #(_ans,1)#.;(_ans,1);;([0‥6],1);[0‥6]",
                "ContQ0002;Order;contData;Sort the continents by surface area from largest to smallest;;;;;[Asia, Africa, North America, South America, Antarctica, Europe, Australia];;[Africa, Antarctica, Asia, Australia, Europe, North America, South America];;Order:0",
                "ContQ0003;Text;;What is the largest continent by surface area?;;;;The largest continent is Asia.;[Asia]",
                "ContQ0004;Text;contData;What is this continent?;;(_ans,2);;This continent is #(_ans,1)#.;(_ans,1);;([0‥6],1)",
                "ContQ0005;Text;;Name the 7 continents.;;;;[Asia, Africa, North America, South America, Antarctica, Europe, Australia];[Africa, Antarctica, Asia, Australia, Europe, North America, South America]",
                "CounQ0006;MC;countryData;What is the largest country by area?;;;6;The largest country is #(188,2)#;(188,2);;([15, 32, 43, 48, 109, 110, 122, 211, 241],2)",
                "CounQ0007;MC;countryData;What is this country?;;;6;;(_ans,3);;([15, 32, 43, 48, 109, 110, 122, 211, 241],3)",
                "CounQ0008;MC;countryData;Which country flag is this?;;(0,2);6;#(0,1)#;(0,1);;([0‥6],1)",
                "CounQ0009;MC;countryData;Which country flag is this?;;(1,2);6;#(1,1)#;(1,1);;([0‥6],1)",
                "CounQ0010;MC;countryData;Which country flag is this?;;(2,2);6;#(2,1)#;(2,1);;([0‥6],1)",
                "CounQ0011;MC;countryData;Which country flag is this?;;(3,2);6;#(3,1)#;(3,1);;([0‥6],1)",
                "CounQ0012;MC;countryData;Which country flag is this?;;(4,2);6;#(4,1)#;(4,1);;([0‥6],1)",
                "CounQ0013;MC;countryData;Which country flag is this?;;(5,2);6;#(5,1)#;(5,1);;([0‥6],1)",
                "CounQ0014;MC;countryData;Which country flag is this?;;(6,2);6;#(6,1)#;(6,1);;([0‥6],1)",
                "CounQ0015;MC;countryData;Which is the flag of #(_ans,1)#?;;;4;;(_ans,2);;([0‥6],2)",
                "ContQ0006;MC;;The Rate of Natural Increase (RNI) is based on which factors?;(Select all that apply);;;;[Births,Deaths,Total Population];;[Births,Emmigration,Immigration,Deaths,Illegal Immigration,Total Population]",
                "CounQ0016;Text;countryData;Name one non-African English speaking countries?;;;1;;([0,5,6],1);([5,6],4);([0,5,6],1)",
                "ContQ0006;Sentence;;Complete the sentence:;;;;;[births,deaths,total population];;;;Sentence:0",
                "ContQ0007;Sentence;;Complete the sentence:;;;;;[births,deaths,total population];;[immigration,births,emmigration,deaths,illegal immigrants,total population];;Sentence:0",
                "ContQ0008;Slider;contData;What is the size of #(_ans,1)# by surface area?;;;;;(_ans,1);;([0‥6],1);;ContinentSize:0",
                "CounQ0017;Slider;countryData;What rank is #(_ans,1)# in surface area size order?;;;;;(_ans,3);;([0‥6],1);;CountryRank:0",
                "CounQ0018;SvgMap;countryData;Select #(_ans,1)#.;;;;;(_ans,1);;([0‥6],1);;CountrySelection:0"
            ]
        },
        "articleWeb": {
            "header": "AID;Q_Pattern_Name;url;scriptEnable",
            "elemList": [
                "ArtiW0001;WebView;https://www.youtube.com/;true"
            ]
        },
        "Order": {
            "header": "Info1;Info2",
            "elemList": [
                "Largest;Smallest"
            ]
        },
        "Sentence": {
            "header": "Descr;Sentence",
            "elemList": [
                "The Rate of Natural Increase (RNI) is calculated:;Using#0#minus#1#divided by#2#"
            ]
        },
        "ContinentSize": {
            "header": "scale1;scale2;scale3;text1;text2;text3;suffix1;suffix2;suffix3;start1;start2;start3;end1;end2;end3;ratio12;ratio13;almostPer;corrPer",
            "elemList": [
                "(_ans,3);(_ans,4);(_ans,5);Absolute size;% of Earth Surface Area;% of Earth Land Surface Area; Million km²;%;%;0.0;0.0;0.0;50.0;100.0;100.0;0.19604;0.66858;10.0;5.0"
            ]
        },
        "CountryRank": {
            "header": "scale1;scale2;scale1Top;scale1Bottom;scale2Top;scale2Bottom;div;largest;smallest;ansType;almostPer",
            "elemList": [
                "Percentile;Rank;100;0;1;194;4;Largest;Lowest;Rank;10.0"
            ]
        },
        "CountrySelection": {
            "header": "ansColor;selColor;backgroundColor;shapeColor;borderColor;borderStroke;offsetWidth;offsetHeight;painterHeight;painterWidth;fileName",
            "elemList": [
                "correct;btnBlue;white;grey;grey700;1.0;20.0;20.0;1000.0;1100.0;assets/svg_images/world_map.json"
            ]
        },
        "contData": {
            "header": "CDID;Name;Image;surfaceSize;surfacePercent;landPercent",
            "elemList": [
                "Cont00001;Africa;assets/images/Africa.png;30.37;5.95;20.31",
                "Cont00002;Antarctica;assets/images/Antarctica.png;14.2;2.78;9.49",
                "Cont00003;Asia;assets/images/Asia.png;44.58;8.74;29.80",
                "Cont00004;Australia;assets/images/Australia.png;7.69;1.51;5.14",
                "Cont00005;Europe;assets/images/Europe.png;10.18;2.00;6.81",
                "Cont00006;North America;assets/images/NorthAmerica.png;24.71;4.84;16.52",
                "Cont00007;South America;assets/images/SouthAmerica.png;17.84;3.50;11.93"
            ]
        },
        "countryData": {
            "header": "CDID;Name;Flag;rank;similar",
            "elemList": [
                "Conu00001;Canada;assets/flags/Canada.svg;2",
                "Conu00002;France;assets/flags/France.svg;47",
                "Conu00003;Germany;assets/flags/Germany.svg;62",
                "Conu00004;Italy;assets/flags/Italy.svg;70",
                "Conu00005;Switzerland;assets/flags/Switzerland.svg;131",
                "Conu00006;United Kingdom;assets/flags/United_Kingdom.svg;77;[great britian, gb, uk]",
                "Conu00007;United States;assets/flags/United_States.svg;3;[united states of america, us, usa]"
            ]
        }
    },
    "search": [
        "Articles⇒items:23;",
        "Continents⇒groups:0;Country⇒groups:1;Countries⇒groups:1;Identify Continent⇒items:0;"
    ],
    "menuList": [
        "home;Home",
        "settings;Settings",
        "shop;Shop",
        "search;Search;startSearch"
    ],
    "hints": {
        "elemList": [
            "Wheather is mostly hot.;Native people have black skin.;This continent is Africa.",
            "Wheather can be very cold.;Hardly any people live there.;This continent is Antarctica.",
            "The largest continent.;Most people live there.;This continent is Asia.",
            "The smallest continent.;You can find kangaroos there.;This continent is Australia.",
            "There are hardly any desert.;Most people have white skin.;This continent is Europe.",
            "There are only two main countries in this continent.;Most people speak English.;This continent is North America.",
            "The continent has many rain forests.;Most people speak spanish.;This continent is South America."
        ]
    },
    "patterns": {
        "facts": {
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ]
        },
        "clauses": {
            "mainView": "setConfig(config, patterns) ⋀ initApp() ⋀ ↲(mainScaffold)",
            "mainScaffold": [
                "⋓({_text: ℛ(model, title), _key: key()}) ⋀  ⋓({_body: mainBody, _title: mainAppBar, ",
                "_child: mainBottomRow}) ⋀ ↲(scaffoldPat)"
            ],
            "mainBottomRow": [
                "⋓({_icHome: Φ(IconText, {'_bar': true, _icon: 'home', _text: 'Home'}),",
                "_icSet: Φ(IconText, {'_bar': true, _icon: 'settings', _text: 'Settings'}),",
                "_icShop: Φ(IconText, {_bar: true, _icon: 'shop', _text: 'Shop'})}) ⋀ ",
                "↲(Φ(Container, {_child: Φ(Row, (patMap(rowColHeader, (center, spaceAround, max, Ø)) ⋃ ",
                "{_children: [_icHome, _icSet, _icShop, Φ(SearchButton)]}))}))"
            ],
            "scaffoldPat": [
                "_title, _child, _body, _key, _flexibleSpace, _leading | ",
                "mapPat(patHeader, (0.055, Ø, #FFFFFF, Ø, Ø, Ø)) ⋀ (_toolbarHeight ≔ ℛ(appBarHeight))",
                "↲(Φ(Scaffold, {_bottomNavigationBar: Φ(Container), _appBar: Φ(AppBar), '_body': _body}))"
            ],
            "mainAppBar": [
                "_text, _flexibleSpace | (_child ≔ Φ(Text, {'_text': _text, '_textStyle': ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀  ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "hamburgerMenu": [
                "↲(Φ(IconButton, {_onTap: createEvent(showDialog), _tapAction: Φ(MenuBubble, {_menuList: ℛ(model, menuList)}),",
                "_icon: 'menu_hamburger', _iconColor: ℛ(color, 'white')}))"
            ],
            "mainBody": [
                "_key | mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_itemRefMap ≔ ℛ(model, main)) ⋀ ",
                "(_itemRef ≔ _itemRefMap[elemList]) ⋀ (_nextMap ≔ {'_tapAction': 'groupScaffold'}) ⋀ ",
                "ℛ(setCache, 'elemItemList', 'elemItemList') ⋀ (_children ≔ [topicContainer, baseNavi]) ⋀ ↲(Φ(ListView))"
            ],
            "topicContainer": [
                "⋓({_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), _width: ℛ(swratio, Ø, 1.0), ",
                "_topicSelection: ⊤(topicSelection), _knowYourWorld: ⊤(knowYourWorld)}) ⋀ (_topic ≔ Φ(Topic)) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [_topic, topicDialog]) ⋀ ",
                "↲(Φ(Container, {'_height': ℛ(hratio, Ø, 0.3202), '_alignment': _alignment, '_child': Φ(Stack), '_width': _width}))"
            ],
            "topicDialog": [
                "(_child ≔ Φ(Container, {_child: journeyButton, _alignment: decode(alignment, center)})) ⋀ ",
                "(_borderRadius ≔ decode(borderRadius, {'radius': 24, 'type': circular})) ⋀ ",
                "⋓({'_child': Φ(ClipRRect), '_decoration': ℛ(appRes, diaDecoration), '_height': ℛ(hratio, Ø, 0.0985), ",
                "'_width': ℛ(swratio, Ø, 0.9947)}) ⋀ ↲(Φ(Align, {'_child': Φ(Container), '_alignment': decode(align, bottomCenter)}))"
            ],
            "journeyButton": [
                "(_e1 ≔ Φ(Text, {_text: ⊤(tojourney), _textStyle: ℛ(textStyle, ControlButtonTextStyle)})) ⋀ ",
                "(_e2 ≔ Φ(Icon, {_icon: rightArrowFull, _iconColor: ℛ(color, white), _iconSize: ℛ(sizeScale, Ø, 35.0)})) ⋀ ",
                "(_children ≔ [_e1, _e2]) ⋀ mapPat(rowColHeader, (center, spaceAround, Ø, Ø)) ⋀ ",
                "⋓({'_child': Φ(Row), '_height': ℛ(hratio, Ø, 0.0468), '_width': ℛ(wratio, Ø, 0.64), ",
                "_beginColor: ℛ(color, correct), _endColor: ℛ(color, correctGradEnd)}) ⋀ ↲(Φ(TapItem, {'_child': Φ(ColorButton), ",
                "'_onTap': createEvent(route), '_tapAction': 'learnScaffold'})) "
            ],
            "baseNavi": [
                "_itemRef, _itemRefMap, _nextMap | ⋓({'_padding': ℛ(appRes, catBoxPadding), ",
                "'_physics': ℛ(appRes, clampingScrollPhysics), '_childPattern': 'elemRow', ",
                "'_childMap': {'_itemRefMap': _itemRefMap, '_nextMap': _nextMap}}) ⋀ ⋓({'_child': Φ(TapListItem), ",
                "'_alignment': decode(alignment, topCenter), _width: ℛ(swratio, Ø, 1.0)}) ⋀ ↲(Φ(Container))"
            ],
            "elemRow": [
                "_item, _index, _itemRefMap, _nextMap | (_header ≔ _itemRefMap[header]) ⋀ ",
                "mapPat(_header, _item) ⋀ ⋓({'_child': Φ(Text, {'_text': _name, '_textStyle': ℛ(textStyle, SliderTextStyle)}), ",
                "'_height': ℛ(hratio, Ø, 0.0468), '_width': ℛ(swratio, Ø, 0.96)}) ⋀ ",
                "⋓({'_bm': Φ(SizedBox), '_itemRef': dataList(_itemRefMap, _item), _elemItemList: ℛ(getCache, 'elemItemList')}) ⋀ ",
                "(_children ≔ [_bm, _elemItemList]) ⋀  ⋓({'_child': Φ(Column), '_elevation': ℛ(hratio, Ø, 0.01), ",
                "'_cardRadius': ℛ(hratio, Ø, 0.015)}) ⋀ ⋓({'_child': Φ(Card), '_height': ℛ(hratio, Ø, 0.23)}) ⋀ ↲(Φ(Container))"
            ],
            "elemItemList": [
                "_itemRef, _index, _ref, _nextMap | ⋓({_childPattern: 'catCol', _direction: decode(axis, horizontal), ",
                "_physics: ℛ(appRes, clampingScrollPhysics), _childMap: ({'_itemRefMap': _ref} ⊌ _nextMap)}) ⋀ ",
                "(_child ≔ Φ(TapListItem)) ⋀ mapPat(patHeader, (0.1539, Ø, Ø, Ø, centerLeft, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "catCol": [
                "_item, _index, _itemRefMap, _onTap, _progId | (_header ≔ _itemRefMap[header]) ⋀ mapPat(_header, _item) ⋀ ",
                "(_children ≔ catView) ⋀ mapPat(rowColHeader, (center, center, Ø, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "mapPat(patHeader, (0.1539, Ø, Ø, Ø, Ø, Ø)) ⋀ (_itemRef ≔ dataList(_itemRefMap, _item)) ⋀ ",
                "(_onTap ≔ createEvent(route, {'_itemRef': _itemRef, '_itemRefMap': _ref, '_title': _name, '_progId': _progId, '_PassScore': _PassScore})) ⋀",
                "(_width ≔ ℛ(hratio, Ø, 0.155)) ⋀ ↲(Φ(Container))"
            ],
            "catView": [
                "_item, _index, _name, _icon, _progId | (_sb ≔ Φ(SizedBox, {'_height': 5.0})) ⋀ ",
                "⋓({_iconColor: ℛ(color, #1785C1), _iconSize: ℛ(sizeScale, Ø, 45.0)}) ⋀ ⋓({_child: Φ(Icon), _width: ℛ(hratio, Ø, 0.128353), ",
                "_decoration: ℛ(appRes, shadowDecoration)}) ⋀ mapPat(patHeader, (0.1232, Ø, Ø, Ø, Ø, Ø)) ⋀ ",
                "(_ic ≔ Φ(NotiElem)) ⋀ (_tw ≔ Φ(Text, {_text: _name, _textStyle: ℛ(textStyle, SliderBoldTextStyle)})) ⋀ ↲([_ic, _sb, _tw])"
            ],
            "groupScaffold": [
                "_itemRef, _itemRefMap, _title | (_title ≔ livesAppBar) ⋀ ℛ(setCache, 'elemItemList', 'elemItemList') ⋀ ",
                "(_onTap ≔ createEvent(popRoute)) ⋀ (_leading ≔ Φ(IconButton)) ⋀ ",
                "(_nextMap ≔ {'_tapAction': 'mvcScaffold'}) ⋀ (_body ≔ baseNavi) ⋀ ↲(scaffoldPat)"
            ],
            "mvcScaffold": [
                "_itemRef, _itemRefMap, _title, _progId, _PassScore | (_body ≔ mvcLayout) ⋀ (_title ≔ livesAppBar) ⋀ ",
                "⋓({'_onTap': createEvent(showDialog), '_tapAction': mvc([quitDialog])}) ⋀  (_leading ≔ Φ(IconButton)) ⋀ ",
                "(_child ≔ ƒ(mvc, [progRow])) ⋀ ↲(scaffoldPat)"
            ],
            "livesAppBar": [
                "_title, _flexibleSpace, _icon, _iconColor | (_valueKey ≔ '_text') ⋀ (_valueName ≔ 'lives') ⋀ (_textStyle ≔ ℛ(textStyle, TopicTxtStyle)) ⋀ ",
                "(_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Obx)) ⋀ (_child ≔ Φ(Center)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ (_lives ≔ Φ(SizedBox)) ⋀ ",
                "(_text ≔ _title) ⋀ (_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ ",
                "(_icon ≔ 'lives') ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ (_ic ≔ Φ(Icon)) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ ",
                "(_icon ≔ 'back') ⋀ (_children ≔ [_tText, _ic, _lives]) ⋀ ↲(Φ(Row))"
            ],
            "mvcLayout": [
                "_itemRef, _itemRefMap, _progId, _PassScore | ",
                "(_child ≔ mvc(newMvc, {'_itemRef': _itemRef, '_itemRefMap': _itemRefMap, '_progId': _progId, '_PassScore': _PassScore})) ⋀ ",
                "mapPat(patHeader, (0.97333, Ø, Ø, Ø, topCenter, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "learnScaffold": [
                "(_title ≔ ⊤(learningJourney))⋀ ⋓({'_title': learnAppBar, '_child': mainBottomRow, '_body': learnBody}) ⋀ ",
                "(_onTap ≔ createEvent(popRoute)) ⋀ (_leading ≔ Φ(IconButton)) ⋀ ↲(scaffoldPat)"
            ],
            "learnAppBar": [
                "_title, _flexibleSpace, _icon, _iconColor | (_child ≔ Φ(Text, {_text: _title, ",
                "_textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ (_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ ",
                "(_ic ≔ hamburgerMenu) ⋀ (_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ ",
                "(_icon ≔ 'back') ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "learnBody": [
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_itemRefMap ≔ ℛ(model, learn)) ⋀ ",
                "(_itemRef ≔ _itemRefMap[elemList]) ⋀ (_nextMap ≔ {'_tapAction': 'groupScaffold'}) ⋀ ",
                "⋓({'_width': ℛ(wratio, Ø, 0.05), '_height': ℛ(hratio, Ø, 0.1), _child: Φ(ImageAsset, {'_name': ℛ(lookup, greyArrow)})}) ⋀ ",
                "ℛ(setCache, greyImg, Φ(SizedBox)) ⋀ _child ≔ Φ(ImageAsset, {'_name': ℛ(lookup, greenArrow)}) ⋀ ",
                "ℛ(setCache, greenImg, Φ(SizedBox)) ⋀ ℛ(setCache, 'elemItemList', 'learnItemList') ⋀ ",
                "(_baseNavi ≔  Φ(Container, {'_padding': decode(padding, {top: ℛ(hratio, Ø, 0.18)}), '_child': baseNavi})) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [learnContainer, _baseNavi]) ⋀ ",
                "(_child ≔ Φ(Container, {'_alignment': _alignment, '_child': Φ(Stack), '_width': ℛ(swratio, Ø, 1.0)})) ⋀ ",
                "↲(Φ(SingleChildScrollView))"
            ],
            "learnContainer": [
                "↲(Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "'_width': ℛ(swratio, Ø, 1.0), _topicSelection: ⊤(learning), _subtitle: ⊤(journey), _img: 'learn'}))"
            ],
            "learnItemList": [
                "_item, _itemRef, _itemRefMap, _index, _ref, _nextMap | (_grProgId ≔ []) ⋀ (_lmap ≔ {'_itemRef': _itemRef, '_ref': _ref, ",
                "'_grProgId': _grProgId, '_index': _index, '_nextMap': _nextMap}) ⋀ (_greenEvent ≔ createEvent('greenContainer', _lmap)) ⋀ ",
                "(_greyEvent ≔ createEvent('greyContainer', _lmap)) ⋀ mapPat(_itemRefMap[header], _item) ⋀ (_child ≔ Φ(GroupProgNoti)) ⋀ ",
                "mapPat(patHeader, (0.16, 1.0, Ø, Ø, center, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "learnCatContainer": [
                "_itemRef, _index, _ref, _nextMap, _grProgId, _childPattern | τ('learnCatContainer') ⋀ ⋓({'_direction': decode(axis, horizontal), ",
                "_colWidth: (η(_itemRef) * ℛ(hratio, Ø, 0.155)), '_childMap': ({'_itemRefMap': _ref, '_grProgId': _grProgId} ⊌ _nextMap)}) ⋀ ",
                "τ('retlearnCatContainer') ⋀ (_child ≔ Φ(TapListItem))⋀ mapPat(patHeader, (0.1539, _colWidth, Ø, Ø, center, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "greenContainer": [
                "_itemRef, _index, _ref, _nextMap, _grProgId | (_childPattern ≔ 'learnCatCol') ⋀ ",
                "((_index = 0) ⋀ ↲(learnCatContainer)) ⋁ ((_alignment ≔ decode(align, {horiz: 0.0, vert: (0.0-3.8)})) ⋀ ",
                "(_child ≔ ℛ(getCache, greenImg)) ⋀ (_o ≔ Φ(OverflowBox)) ⋀ ",
                "(_c ≔ Φ(Align, {'_child': learnCatContainer, '_alignment': decode(align, {horiz: 0.0, vert: 0.0})})) ⋀ ",
                "(_children  ≔ [_o, _c]) ⋀ ↲(Φ(Stack)))"
            ],
            "greyContainer": [
                "_itemRef, _index, _ref, _nextMap, _grProgId | (_childPattern ≔ 'dCatCol') ⋀ ",
                "(_alignment ≔ decode(align, {horiz: 0.0, vert: (0.0-3.8)})) ⋀ (_child ≔ ℛ(getCache, greyImg)) ⋀ (_o ≔ Φ(OverflowBox)) ⋀ ",
                "(_c ≔ Φ(Align, {'_child': learnCatContainer, '_alignment': decode(align, {horiz: 0.0, vert: 0.0})})) ⋀ ",
                "(_children  ≔ [_o, _c]) ⋀ ↲(Φ(Stack))"
            ],
            "learnCatCol": "_item, _index, _itemRefMap, _onTap, _grProgId | τ('learnCatCol') ⋀ (_r ≔ catCol) ⋀ (_grProgId ≪ _progId) ⋀ ↲(_r)",
            "dCatCol": [
                "_item, _index, _itemRefMap, _onTap, _grProgId | τ('dCatCol') ⋀ (_header ≔ _itemRefMap[header]) ⋀ mapPat(_header, _item) ⋀ ",
                "(_children ≔ catView) ⋀ mapPat(rowColHeader, (center, center, Ø, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "mapPat(patHeader, (0.1539, Ø, Ø, Ø, Ø, Ø)) ⋀ (_itemRef ≔ dataList(_itemRefMap, _item)) ⋀ ",
                "(_width ≔ ℛ(hratio, Ø, 0.155)) ⋀ (_grProgId ≪ _progId) ⋀ ↲(Φ(Opacity, {'_child': Φ(Container), '_opacity': 0.5}))"
            ],
            "fsmPat": [
                "_state, _event | ((_event = 'confirm') ⋀ ((_state = 'selected') ⋁ (_state = 'completed')) ⋀ ↲('CheckAns')) ⋁ ",
                "((_event = 'next') ⋀ (_state = 'confirmed') ⋀ ↲('NextGame')) ⋁ ",
                "((_event = 'tryAgain') ⋀ (_state = 'confirmed') ⋀ ↲('TryAgain')) ⋁ ",
                "((_event = 'showAnswer') ⋀ (_state = 'confirmed') ⋀ ↲('ShowAnswer')) ⋁ ",
                "((_event = 'gameDone') ⋀ ↲('GameDone')) ⋁ ((_event = 'repeatGame') ⋀ ↲('RepeatGame')) ⋁ ",
                "((_event = 'cancel') ⋀ ↲('Cancel')) ⋁ ((_event = 'continue') ⋀ ↲('Continue')) ⋁ ↲(Ø)"
            ],
            "MCfsm": "_state, _event | ((_event = 'select') ⋀ ((_state = 'start') ⋁ (_state = 'selected')) ⋀ ↲('Selection')) ⋁ ↲(fsmPat)",
            "Textfsm": [
                "_state, _event | ((_event = 'edited') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Editing')) ⋁ ",
                "((_event = 'empty') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Empty')) ⋁ ",
                "((_event = 'select') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Selection')) ⋁ ↲(fsmPat)"
            ],
            "Orderfsm": [
                "_state, _event | ((_event = 'select') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Selection')) ⋁ ",
                "((_event = 'dropSel') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('DropSel')) ⋁ ↲(fsmPat)"
            ],
            "Sentencefsm": [
                "_state, _event | ((_event = 'edited') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Editing')) ⋁ ",
                "((_event = 'empty') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Empty')) ⋁ ",
                "↲(Orderfsm) ⋁ ↲(fsmPat)"
            ],
            "Sliderfsm": "_state, _event | ((_event = 'confirm') ⋀ ↲('CheckAns')) ⋁ ↲(fsmPat)",
            "SvgMapfsm": "_state, _event | ↲(Sliderfsm)",
            "testBox": "(_text ≔ testText) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
    "userProfile": {
        "lives": 5,
        "progress": []
    }
}