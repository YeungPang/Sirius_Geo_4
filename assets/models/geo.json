{
   "title": "Sirius Prototype",
   "version": "1.7.2",
   "time_stamp": "24-Nov-2022 15:11:58 UTC",
   "versionTimestamp": 202224111511,
   "maxConfigLives": 5,
   "liveGenTime": 30,
   "main": "categories",
   "sub": "subCategories",
   "learn": "learnCat",

"config": {
	"categories": {
		"dataStart": "GR1",
		"pattern": "mainScaffold",
		"header": "ID;name;ref;GR1;GR2;GR3;GR4;GR5;GR6;GR7;GR8;GR9;GR10;GR11;GR12;GR13;GR14;GR15;GR16;GR17;GR18;GR19;GR20;GR21;GR22;GR23;GR24;GR25;GR26;GR27;GR28;GR29;GR30;GR31;GR32;GR33;GR34;GR35;GR36;GR37;GR38;GR39;GR40;GR41;GR42;GR43;GR44;GR45;GR46;GR47;GR48;GR49",
		"elemList": [
			"CID00001;Solar System: Earth and Its Surroundings;groupsSolarSystem;ℛ(0);ℛ(1)",
			"CID00002;Our World;groupsSolarSystem;ℛ(0)",
			"CID00003;Hemispheres;groupsSolarSystem;ℛ(0)",
			"CID00004;Continents;groupsSolarSystem;ℛ(0)",
			"CID00005;Oceans;groupsSolarSystem;ℛ(0)",
			"CID00006;Earth Structure;groupsSolarSystem;ℛ(0)",
			"CID00007;Countries of the World;groupsSolarSystem;ℛ(0)",
			"CID00008;Countries by Size (Surface Area);groupsSolarSystem;ℛ(0)",
			"CID00009;Country Shapes;groupsSolarSystem;ℛ(0)",
			"CID00010;Flags and Coat of Arms;groupsSolarSystem;ℛ(0)",
			"CID00011;Country Capitals;groupsSolarSystem;ℛ(0)",
			"CID00012;Cities;groupsSolarSystem;ℛ(0)",
			"CID00013;Population;groupsSolarSystem;ℛ(0)",
			"CID00014;Economics;groupsSolarSystem;ℛ(0)",
			"CID00015;Landmarks;groupsSolarSystem;ℛ(0)",
			"CID00016;Languages;groupsSolarSystem;ℛ(0)",
			"CID00017;Culture;groupsSolarSystem;ℛ(0)",
			"CID00018;Mountains and Mountain Ranges;groupsSolarSystem;ℛ(0)",
			"CID00019;Rivers and Lakes;groupsSolarSystem;ℛ(0)",
			"CID00020;Islands;groupsSolarSystem;ℛ(0)",
			"CID00021;Deserts;groupsSolarSystem;ℛ(0)",
			"CID00022;Forests ;groupsSolarSystem;ℛ(0)",
			"CID00023;Transportation;groupsSolarSystem;ℛ(0)",
			"CID00024;Natural Disasters;groupsSolarSystem;ℛ(0)",
			"CID00025;Volcanoes;groupsSolarSystem;ℛ(0)",
			"CID00026;Ecosystems;groupsSolarSystem;ℛ(0)",
			"CID00027;Pollution;groupsSolarSystem;ℛ(0)",
			"CID00028;Maps and Cartography;groupsSolarSystem;ℛ(0)",
			"CID00029;Rocks and Minerals;groupsSolarSystem;ℛ(0)",
			"CID00030;Navigation;groupsSolarSystem;ℛ(0)",
			"CID00031;Politics;groupsSolarSystem;ℛ(0)",
			"CID00032;History;groupsSolarSystem;ℛ(0)",
			"CID00033;Sports;groupsSolarSystem;ℛ(0)"
		]
	},
	"subCategories": {
		"dataStart": "GR1",
		"pattern": "subScaffold",
		"header": "ID;name;ref;GR1;GR2;GR3;GR4;GR5;GR6;GR7;GR8;GR9;GR10;GR11;GR12;GR13;GR14;GR15;GR16;GR17;GR18;GR19;GR20;GR21;GR22;GR23;GR24;GR25;GR26;GR27;GR28;GR29;GR30;GR31;GR32;GR33;GR34;GR35;GR36;GR37;GR38;GR39;GR40;GR41;GR42;GR43;GR44;GR45;GR46;GR47;GR48;GR49",
		"elemList": [
			"SubCatID00001;Solar System: Earth and Its Surroundings",
			"SubCatID00002;Our World",
			"SubCatID00003;Continents",
			"SubCatID00004;Oceans",
			"SubCatID00005;Geology",
			"SubCatID00006;Countries of the World",
			"SubCatID00007;Countries by Size (Surface Area)",
			"SubCatID00008;Country Shapes",
			"SubCatID00009;Flags"
		]
	},
	"groupsSolarSystem": {
		"dataStart": "T1",
		"pattern": "groupScaffold",
		"header": "ID;name;icon;progId;ref;T1;T2;T3;T4;T5;T6;T7;T8;T9;T10",
		"elemList": [
			"GrpSolarSystem0001;Solar System;solar_system;[1, 2, 3, 4, 5];typesSolarSystem;ℛ(0);ℛ(1)",
			"GrpSolarSystem0002;Sun;sun;[6, 7, 8];typesSolarSystem;ℛ(2)"
		]
	},
	"typesSolarSystem": {
		"dataStart": "G1",
		"header": "ID;name;ref;G1;G2;G3;G4;G5;G6;G7;G8;G9;G10;G11;G12;G13;G14;G15",
		"elemList": [
			"TIDSolarSystem00001;Position;itemsSolarSystem;ℛ(0);ℛ(1)",
			"TIDSolarSystem00002;Photos;itemsSolarSystem;ℛ(2);ℛ(3);ℛ(4)",
			"TIDSolarSystem00003;Sun;itemsSolarSystem;ℛ(5);ℛ(6);ℛ(7)"
		]
	},
	"itemsSolarSystem": {
		"dataStart": "Q1",
		"pattern": "mvcScaffold",
		"header": "ID;name;icon;PassScore;fixedOrder;progId;ref;Q1;Q2;Q3;Q4;Q5;Q6;Q7;Q8;Q9;Q10;Q11;Q12;Q13;Q14;Q15;Q16;Q17;Q18;Q19;Q20;Q21;Q22;Q23;Q24;Q25;Q26;Q27;Q28;Q29;Q30",
		"elemList": [
			"ITSolarSystem00001;Solar System Objects Position (Level 1);solar_system;0.75;;1;solarSystem_questions;ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(0);ℛ(2)",
			"ITSolarSystem00002;Solar System Objects Position (Level 2);solar_system;0.75;;2;solarSystem_questions;ℛ(4);ℛ(4);ℛ(4);ℛ(4);ℛ(4);ℛ(4);ℛ(4);ℛ(4);ℛ(4);ℛ(4)",
			"ITSolarSystem00003;Solar System Objects Photos (Level 1);solar_system;0.75;;3;solarSystem_questions;ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1);ℛ(1)",
			"ITSolarSystem00004;Solar System Objects Photos (Level 2);solar_system;0.75;;4;solarSystem_questions;ℛ(3);ℛ(3);ℛ(3);ℛ(3);ℛ(3);ℛ(3);ℛ(3);ℛ(3);ℛ(3);ℛ(3)",
			"ITSolarSystem00005;Solar System Objects Photos (Level 3);solar_system;0.75;;5;solarSystem_questions;ℛ(5);ℛ(5);ℛ(5);ℛ(5);ℛ(5);ℛ(5);ℛ(5);ℛ(5);ℛ(5);ℛ(5)",
			"ITSolarSystem00006;Sun (sentence);sun;0.75;;6;sunSentenceCompletion;ℛ(0);ℛ(1);ℛ(2);ℛ(3)",
			"ITSolarSystem00007;Sun (Slider);sun;0.75;;7;sunHSliderQuestions;ℛ(0);ℛ(1);ℛ(2)",
			"ITSolarSystem00008;Sun (MC);sun;0.75;;8;sunQuestions;ℛ(0);ℛ(1);ℛ(2);ℛ(3);ℛ(4)"
		]
	},
	"sunQuestions": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mappinginx",
		"elemList": [
			"SunQuestionsID00001;MC;solarSystemData;What type of star is the Sun?;;ℛ(0,5);6;The Sun is a yellow dwarf star.;[15];;[White Dwarf,Brown Dwarf,Neutron Star,Hypergiant,Yellow Hypergiant,Blue Supergiant,Blue Dwarf,Flare Star,Supergiant,Red Dwarf,Protostar,Carbon Star,Blue Giant,Subdwarf,Red Giant,Yellow Dwarf]",
			"SunQuestionsID00002;MC;sunData;How long does it take for energy to travel from the Sun⊤(single_quotation)s core to its surface and appear as light?;;ℛ(19,3);6;100⊤(single_quotation)000 years;[27];;[1 year,10 years,100 years,1⊤(single_quotation)000 years,10⊤(single_quotation)000 years,1⊤(single_quotation)000⊤(single_quotation)000 years,10⊤(single_quotation)000⊤(single_quotation)000 years,100⊤(single_quotation)000⊤(single_quotation)000 years,1⊤(single_quotation)000⊤(single_quotation)000⊤(single_quotation)000 years,1 second,10 seconds,100 seconds,1 minute,10 minutes,100 minutes,1 hour,10 hours,100 hours,1⊤(single_quotation)000 hours,1 day,10 days,100 days,1⊤(single_quotation)000 days,1 week,10 weeks,1 month,10 months,100⊤(single_quotation)000 years]",
            "SunQuestionsID00003;MC;sunData;How long does it take for energy to travel from the Sun⊤(single_quotation)s core to its surface and appear as light?;;ℛ(19,3);6;100⊤(comma)000 years;100⊤(comma)000 years;;[1 year,10 years,100 years,1⊤(comma)000 years,10⊤(comma)000 years,1⊤(comma)000⊤(comma)000 years,10⊤(comma)000⊤(comma)000 years,100⊤(comma)000⊤(comma)000 years,1⊤(comma)000⊤(comma)000⊤(comma)000 years,1 second,10 seconds,100 seconds,1 minute,10 minutes,100 minutes,1 hour,10 hours,100 hours,1⊤(comma)000 hours,1 day,10 days,100 days,1⊤(comma)000 days,1 week,10 weeks,1 month,10 months,100⊤(comma)000 years]",
            "SunQuestionsID00004;MC;sunData;How long does it take for energy to travel from the Sun⊤(single_quotation)s core to its surface and appear as light?;;ℛ(19,3);6;100⊤(comma)000 years;[27];;[1 year,10 years,100 years,1⊤(comma)000 years,10⊤(comma)000 years,1⊤(comma)000⊤(comma)000 years,10⊤(comma)000⊤(comma)000 years,100⊤(comma)000⊤(comma)000 years,1⊤(comma)000⊤(comma)000⊤(comma)000 years,1 second,10 seconds,100 seconds,1 minute,10 minutes,100 minutes,1 hour,10 hours,100 hours,1⊤(comma)000 hours,1 day,10 days,100 days,1⊤(comma)000 days,1 week,10 weeks,1 month,10 months,100⊤(comma)000 years]",
			"SunQuestionsID00005;MC;sunData;What is the interface layer between the radiative and convective zones called?;;ℛ(19,3);6;Tachocline;[19];;[Tropopause,Mesopause,Radiopause,Radio Line,Convection Line,Mesosphere,Corona,Chromosphere,Photosphere,Interzone,Transition Zone,the Speed Line,The Slope,Interzonal Rift,Compression Layer,Atmosphere,Magnetosphere,Heliopause,Tachymetric Line,Tachocline]"
		]
	},
	"sunHSliderQuestions": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;scale;text;suffix;start;end;almostPer;corrPer;mapping;mapping_inx",
		"elemList": [
			"SunHSliderQuestions00001;Slider;;Approximately how old is the Sun (in millions of years)?;;;;;4600;;;;4600;Age;million years;0;10000;25;15",
			"SunHSliderQuestions00002;Slider;solarSystemData;What is the Sun⊤(single_quotation)s mass compared to Earth⊤(single_quotation)s?;Answer is a multiple of Earth⊤(single_quotation)s mass.;;;;ℛ(0,8);;;;ℛ(0,8);Mass (relative to Earth);Earth masses;0;1000000;25;15",
			"SunHSliderQuestions00003;Slider;solarSystemData;What is the Sun⊤(single_quotation)s mass?;In billion kgs.;;;;ℛ(0,7);;;;ℛ(0,7);Mass;billion kgs;0;10000000000000000000000;25;15",
			"SunHSliderQuestions00004;Slider",
			"SunHSliderQuestions00005;Slider",
			"SunHSliderQuestions00006;Slider",
			"SunHSliderQuestions00007;Slider",
			"SunHSliderQuestions00008;Slider",
			"SunHSliderQuestions00009;Slider",
			"SunHSliderQuestions00010;Slider",
			"SunHSliderQuestions00011;Slider",
			"SunHSliderQuestions00012;Slider",
			"SunHSliderQuestions00013;Slider",
			"SunHSliderQuestions00014;Slider",
			"SunHSliderQuestions00015;Slider",
			"SunHSliderQuestions00016;Slider",
			"SunHSliderQuestions00017;Slider",
			"SunHSliderQuestions00018;Slider",
			"SunHSliderQuestions00019;Slider",
			"SunHSliderQuestions00020;Slider"
		]
	},
	"solarSystem_questions": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;hints;mapping;mappinginx",
		"elemList": [
			"solarSystemQuestions00001;MC;solarSystemData;What is the labelled object called?;;ℛ(_ans,4);8;This is #ℛ(_ans,2)#.;ℛ(_ans,1);;ℛ([0‥8],1)",
			"solarSystemQuestions00002;MC;solarSystemData;What does this photo show?;;ℛ(_ans,5);8;This is #ℛ(_ans,2)#.;ℛ(_ans,1);;ℛ([0‥9],1)",
			"solarSystemQuestions00003;MC;solarSystemData;What is the region containing a lot of solid objects between Jupiter and Mars called? ;;ℛ(11,4);8;This region is called #ℛ(11,2)#.;[0];;ℛ([11,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],1)",
			"solarSystemQuestions00004;MC;solarSystemData;Which photo shows #ℛ(_ans,2)#?;;;4;The image of #ℛ(_ans,2)# is highlighted above.;ℛ(_ans,5);;ℛ([0‥9],5)",
			"solarSystemQuestions00005;Text;solarSystemData;What is the labelled object called?;;ℛ(_ans,4);;This is #ℛ(_ans,2)#.;ℛ(_ans,1);ℛ(_ans,3);ℛ([0‥8,11],1)",
			"solarSystemQuestions00006;Text;solarSystemData;What does this photo show?;;ℛ(_ans,5);;This is #ℛ(_ans,2)#.;ℛ(_ans,1);ℛ(_ans,3);ℛ([0‥9],1)"
		]
	},
	"sunSentenceCompletion": {
		"dataStart": "Question",
		"header": "ID;Q_Pattern_Name;ref;Question;Instruction;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;Descr;Sentence;hints;mapping;mapping_inx",
		"elemList": [
			"SunSCQID00001;Sentence;sunData;Complete the sentence:;Image credit: #ℛ(20,4)#.;ℛ(20,3);6;increased⊤(comma) dark⊤(comma) cooler;[increased,dark,cooler];;[increased,dark,cooler,decreased,bright,hotter];a;Sunspots are areas with#0#magnetic activity and appear as#1#spots because of their#2#temperature compared to their surroundings.",
			"SunSCQID00002;Sentence;sunData;Complete the sentence:;Image credit: #ℛ(21,4)#.;ℛ(21,3);;umbra⊤(comma) penumbra⊤(comma) fibrils;[umbra,penumbra,fibrils];[[umbrea,ombra,umbara],[penumbrea,penombra,penumbara],[fibrilis,fibril,fibrills,fibrill,fibrril,fibrrils,fibrrill,fibrrills]];;a;The dark inner area of a sunspot is called the#0#and the outer area is called the#1#⊤(comma) which comprises streaky looking filaments called#2#.",
			"SunSCQID00003;Sentence;sunData;Complete the sentence:;Image credit: #ℛ(20,4)#.;ℛ(20,3);10;;[1⊤(single_quotation)500,50⊤(single_quotation)000,376⊤(single_quotation)000,2.5];;[10,50,100,500,1⊤(single_quotation)000,2⊤(single_quotation)000,5⊤(single_quotation)000,10⊤(single_quotation)000⊤(single_quotation)15⊤(single_quotation)000,20⊤(single_quotation)000,30⊤(single_quotation)000,40⊤(single_quotation)000,60⊤(single_quotation)000,80⊤(single_quotation)000,176⊤(single_quotation)000,276⊤(single_quotation)000,476⊤(single_quotation)000,576⊤(single_quotation)000,676⊤(single_quotation)000,1⊤(single_quotation)760⊤(single_quotation)000,2⊤(single_quotation)760⊤(single_quotation)000,1.5,2,3,3.5,4,4.5,5,5.5,6,7,8,9,10];a;Sunspots are typically between#0#km and#1#km in diameter but the largest recorded group of sunspots measured#2#⊤(comma) which is over#3#times the size of Jupiter.",
			"SunSCQID00003;Sentence;sunData;Complete the sentence:;Image credit: #ℛ(20,4)#.;ℛ(20,3);10;;[1⊤(comma)500,50⊤(comma)000,376⊤(comma)000,2.5];;[10,50,100,500,1⊤(comma)000,2⊤(comma)000,5⊤(comma)000,10⊤(comma)000⊤(comma)15⊤(comma)000,20⊤(comma)000,30⊤(comma)000,40⊤(comma)000,60⊤(comma)000,80⊤(comma)000,176⊤(comma)000,276⊤(comma)000,476⊤(comma)000,576⊤(comma)000,676⊤(comma)000,1⊤(comma)760⊤(comma)000,2⊤(comma)760⊤(comma)000,1.5,2,3,3.5,4,4.5,5,5.5,6,7,8,9,10];a;Sunspots are typically between#0#km and#1#km in diameter but the largest recorded group of sunspots measured#2#⊤(comma) which is over#3#times the size of Jupiter."
		]
	},
	"tectonicPlatesData": {
		"header": "ID;name;correct_name;major;part_of;image;size(km2);source",
		"elemList": [
			"tectonicPlatesData00001;African Plate;[African Plate,african,africanplate,african⊤(dash)plate,africa];major;;assets/images/tectonic_plates_AfricanPlate.jpg;61300000",
			"tectonicPlatesData00002;Antarctic Plate;[Antarctic Plate,antarctica,antarctic,antarctica plate,antarctic⊤(dash)plate,antarcticplate,antarcica⊤(dash)plate,antarcicaplate];major;;assets/images/tectonic_plates_AntarcticPlate.jpg;60900000",
			"tectonicPlatesData00003;Eurasian Plate;[Eurasian Plate,eurasian,eurasia,eurasia plate,eurasianplate,eurasiaplate,eurasia⊤(dash)plate,eurasian⊤(dash)plate];major;;assets/images/tectonic_plates_EurasianPlate.jpg;67800000",
			"tectonicPlatesData00004;Australian Plate;[Australian Plate,australia,australiaplate,australia⊤(dash)plate,austrlia plate,australian,australianplate,australian⊤(dash)plate];major;;assets/images/tectonic_plates_AustralianPlate.jpg;47000000",
			"tectonicPlatesData00005;North American Plate;[North American Plate,northamericanplate,north⊤(dash)american⊤(dash)plate,northamerican plate,northamerican,north american,northamerican plate,north⊤(dash)american plate,north america,north american⊤(dash)plate,northamerican⊤(dash)plate];major;;assets/images/tectonic_plates_NorthAmericanPlate.jpg;75900000",
			"tectonicPlatesData00006;Pacific Plate;[Pacific Plate,pacific,pacific⊤(dash)plate,pacificplate];major;;assets/images/tectonic_plates_PacificPlate.jpg;103300000",
			"tectonicPlatesData00007;South American Plate;[South American Plate,southamerican,southamericanplate,southamerican⊤(dash)plate,south⊤(dash)american plate,south⊤(dash)american⊤(dash)plate,south⊤(dash)american plate,south america,south america plate,southamerica plate,southamericaplate,southeramerica⊤(dash)plate,south⊤(dash)america⊤(dash)plate];major;;assets/images/tectonic_plates_SouthAmericanPlate.jpg;43600000",
			"tectonicPlatesData00008;Indian Plate;[Indian Plate,india,inda plate,india⊤(dash)plate,indiaplate,indian,indian⊤(dash)plate,indianplate];minor;;assets/images/tectonic_plates_IndianPlate.jpg;11900000",
			"tectonicPlatesData00009;Arabian Plate;[Arabian Plate,arabian,arabianplate,arabian⊤(dash)plate,arabia,arabia plate,arabia⊤(dash)plate,arabiaplate];minor;;assets/images/tectonic_plates_ArabianPlate.jpg;5000000",
			"tectonicPlatesData00010;Caribbean Plate;[Caribbean Plate,caribbean,caribbeanplate,caribbean⊤(dash)plate,carribbean plate,caribean,caribean plate,caribbea,caribbea plate,caribbea⊤(dash)plate];minor;;assets/images/tectonic_plates_CaribbeanPlate.jpg;3300000",
			"tectonicPlatesData00011;Cocos Plate;[Cocos Plate,cocos,cocosplate,cocos⊤(dash)plate,coco plate,coco,cocoplate,coco⊤(dash)plate];minor;;assets/images/tectonic_plates_CocosPlate.jpg;2900000",
			"tectonicPlatesData00012;Nazca Plate;[Nazca Plate,nazca,nazcan,nazcean,nazcaplate,nazca⊤(dash)plate,nazcanplate,nazcan⊤(dash)plate,nazcean plate,nazcean⊤(dash)plate,nazceanplate];minor;;assets/images/tectonic_plates_NascaPlate.jpg;15600000",
			"tectonicPlatesData00013;Philippine Plate;[Philippine Plate,philippine,philippino,philippina,philppineplate,philippine⊤(dash)plate,philippino plate,philippina plate,philippino⊤(dash)plate,philippina⊤(dash)plate,philippines plate,philippinesplate,philippines⊤(dash)plate,philippinoplate,philippinaplate,filippino,filippino plate,filippino⊤(dash)plate,filippionplate,filippine plate,filippine⊤(dash)plate,filippineplate,filippines plate,filippines⊤(dash)plate,filippinesplate];minor;;assets/images/tectonic_plates_PhilippinePlate.jpg;5500000",
			"tectonicPlatesData00014;Scotia Plate;[Scotia Plate,scotia,scotia⊤(dash)plate,scotiaplate];minor;;assets/images/tectonic_plates_ScotiaPlate.jpg;1600000",
			"tectonicPlatesData00015;Juan de Fuca Plate;[Juan de Fuca Plate,juan plate,juandefuca,juandefuca plate,juandefucaplate,juan⊤(dash)de⊤(dash)fuca plate,juan⊤(dash)de⊤(dash)fuca⊤(dash)plate,juan di fuca plate,juan fuca plate,juan fuca,juanfucaplate,juanfuca plate,juandefuca plate,juandefucaplate,juandefuca⊤(dash)plate,juan,fuca,fuca plate,fucaplate,fuca⊤(dash)plate];minor;;assets/images/tectonic_plates_JuanDeFucaPlate.jpg;250000",
			"tectonicPlatesData00016;Amurian Plate;[Amurian Plate];small",
			"tectonicPlatesData00017;Burma Plate;[Burma Plate];small",
			"tectonicPlatesData00018;Caroline Plate;[Caroline Plate];small",
			"tectonicPlatesData00019;New Hebrides Plate;[New Hebrides Plate];small",
			"tectonicPlatesData00020;Okhotsk Plate;[Okhotsk Plate];small",
			"tectonicPlatesData00021;Somali Plate;[Somali Plate];small",
			"tectonicPlatesData00022;Sunda Plate;[Sunda Plate];small",
			"tectonicPlatesData00023;Yangtze;[Yangtze];small",
			"tectonicPlatesData00024;Adriatic Plate;[Adriatic Plate];micro;African Plate",
			"tectonicPlatesData00025;Lwandle Plate;[Lwandle Plate];micro;African Plate",
			"tectonicPlatesData00026;Rovuma Plate;[Rovuma Plate];micro;African Plate",
			"tectonicPlatesData00027;Victoria Microplate;[Victoria Microplate];micro;African Plate",
			"tectonicPlatesData00028;East Antarctic Plate;[East Antarctic Plate];micro;Antarctic Plate",
			"tectonicPlatesData00029;Kerguelen Plateau;[Kerguelen Plateau];micro;Antarctic Plate",
			"tectonicPlatesData00030;Shetland Plate;[Shetland Plate];micro;Antarctic Plate",
			"tectonicPlatesData00031;West Antarctic Plate;[West Antarctic Plate];micro;Antarctic Plate",
			"tectonicPlatesData00032;Capricorn Plate;[Capricorn Plate];micro;Australian Plate",
			"tectonicPlatesData00033;Futuna Plate;[Futuna Plate];micro;Australian Plate",
			"tectonicPlatesData00034;Kermadec Plate;[Kermadec Plate];micro;Australian Plate",
			"tectonicPlatesData00035;Maoke Plate;[Maoke Plate];micro;Australian Plate",
			"tectonicPlatesData00036;Niuafo⊤(single_quotation)ou Plate;[Niuafo⊤(single_quotation)ou Plate];micro;Australian Plate",
			"tectonicPlatesData00037;Tonga Plate;[Tonga Plate];micro;Australian Plate",
			"tectonicPlatesData00038;Woodlark Plate;[Woodlark Plate];micro;Australian Plate",
			"tectonicPlatesData00039;Gonâve Microplate;[Gonâve Microplate];micro;Caribbean Plate",
			"tectonicPlatesData00040;North Hispaniola Microplate;[North Hispaniola Microplate];micro;Caribbean Plate",
			"tectonicPlatesData00041;Panama Plate;[Panama Plate];micro;Caribbean Plate",
			"tectonicPlatesData00042;Puerto Rico⊤(dash)Virgin Islands Microplate;[Puerto Rico⊤(dash)Virgin Islands Microplate];micro;Caribbean Plate",
			"tectonicPlatesData00043;South Jamaica Microplate;[South Jamaica Microplate];micro;Caribbean Plate",
			"tectonicPlatesData00044;Rivera Plate;[Rivera Plate];micro;Cocos Plate",
			"tectonicPlatesData00045;Aegean Sea Plate;[Aegean Sea Plate];micro;Eurasian Plate",
			"tectonicPlatesData00046;Anatolian Plate;[Anatolian Plate];micro;Eurasian Plate",
			"tectonicPlatesData00047;Banda Sea Plate;[Banda Sea Plate];micro;Eurasian Plate",
			"tectonicPlatesData00048;Iberian Plate;[Iberian Plate];micro;Eurasian Plate",
			"tectonicPlatesData00049;Iranian Plate;[Iranian Plate];micro;Eurasian Plate",
			"tectonicPlatesData00050;Molucca Sea Plate;[Molucca Sea Plate];micro;Eurasian Plate",
			"tectonicPlatesData00051;Halmahera Plate;[Halmahera Plate];micro;Eurasian Plate",
			"tectonicPlatesData00052;Sangihe Plate;[Sangihe Plate];micro;Eurasian Plate",
			"tectonicPlatesData00053;Okinawa Plate;[Okinawa Plate];micro;Eurasian Plate",
			"tectonicPlatesData00054;Pelso Plate;[Pelso Plate];micro;Eurasian Plate",
			"tectonicPlatesData00055;Timor Plate;[Timor Plate];micro;Eurasian Plate",
			"tectonicPlatesData00056;Tisza Plate;[Tisza Plate];micro;Eurasian Plate",
			"tectonicPlatesData00057;Coiba Plate;[Coiba Plate];micro;Nazca Plate",
			"tectonicPlatesData00058;Malpelo Plate;[Malpelo Plate];micro;Nazca Plate",
			"tectonicPlatesData00059;Explorer Plate;[Explorer Plate];micro;North American Plate",
			"tectonicPlatesData00060;Gorda Plate;[Gorda Plate];micro;North American Plate",
			"tectonicPlatesData00061;Greenland Plate;[Greenland Plate];micro;North American Plate",
			"tectonicPlatesData00062;Queen Elizabeth Islands Subplate;[Queen Elizabeth Islands Subplate];micro;North American Plate",
			"tectonicPlatesData00063;Balmoral Reef Plate;[Balmoral Reef Plate];micro;Pacific Plate",
			"tectonicPlatesData00064;Bird⊤(single_quotation)s Head Plate;[Bird⊤(single_quotation)s Head Plate];micro;Pacific Plate",
			"tectonicPlatesData00065;Conway Reef Plate;[Conway Reef Plate];micro;Pacific Plate",
			"tectonicPlatesData00066;Easter Microplate;[Easter Microplate];micro;Pacific Plate",
			"tectonicPlatesData00067;Galápagos Microplate;[Galápagos Microplate];micro;Pacific Plate",
			"tectonicPlatesData00068;Juan Fernández Plate;[Juan Fernández Plate];micro;Pacific Plate",
			"tectonicPlatesData00069;Kula Plate;[Kula Plate];micro;Pacific Plate",
			"tectonicPlatesData00070;Manus Plate;[Manus Plate];micro;Pacific Plate",
			"tectonicPlatesData00071;North Bismarck Plate;[North Bismarck Plate];micro;Pacific Plate",
			"tectonicPlatesData00072;North Galápagos Microplate;[North Galápagos Microplate];micro;Pacific Plate",
			"tectonicPlatesData00073;Solomon Sea Plate;[Solomon Sea Plate];micro;Pacific Plate",
			"tectonicPlatesData00074;South Bismarck Plate;[South Bismarck Plate];micro;Pacific Plate",
			"tectonicPlatesData00075;Mariana Plate;[Mariana Plate];micro;Philippine Plate",
			"tectonicPlatesData00076;Philippine Mobile Belt;[Philippine Mobile Belt];micro;Philippine Plate",
			"tectonicPlatesData00077;South Sandwich Plate;[South Sandwich Plate];micro;Scotia Plate",
			"tectonicPlatesData00078;Madagascar Plate;[Madagascar Plate];micro;Somali Plate",
			"tectonicPlatesData00079;Seychelles Microcontinent;[Seychelles Microcontinent];micro;Somali Plate",
			"tectonicPlatesData00080;Altiplano Plate;[Altiplano Plate];micro;South American Plate",
			"tectonicPlatesData00081;Falklands Microplate;[Falklands Microplate];micro;South American Plate",
			"tectonicPlatesData00082;North Andes Plate;[North Andes Plate];micro;South American Plate",
			"tectonicPlatesData00083;Caribbean Terrane;[Caribbean Terrane];micro;South American Plate",
			"tectonicPlatesData00084;Chibcha Terrane;[Chibcha Terrane];micro;South American Plate",
			"tectonicPlatesData00085;Tahamí Terrane;[Tahamí Terrane];micro;South American Plate"
		]
	},
	"sunData": {
		"header": "ID;name;value;image;image_credit;correct_name;thickness_average(km);distrance_from_core(km)_start;distance_from_core(km)_end;distance_from_core(%)_start;distance_from_core(%)_end;temperature_inner(C);temperature_outer©;density_inner(kg/m3);density_outer(kg/m3)",
		"elemList": [
			"sunDataID00001;diameter;DO NOT USE: solarSystemData00001/diameter",
			"sunDataID00002;earth masses;DO NOT USE: solarSystemData00001/mass_compared_to_earth",
			"sunDataID00003;energy output;385 million billion gigawatts",
			"sunDataID00004;surface temperature;5500˚C",
			"sunDataID00005;core temperature;15 million˚C",
			"sunDataID00006;distance from earth;DO NOT USE: solarSystemData00004/distance_from_sun(km",
			"sunDataID00007;core;;;;;175000;0;175000;0;0.25;15700000;7850000;150000;20000",
			"sunDataID00008;radiative zone;;;;[radiation zone,radiative,radiation,radiating,radiating zone];315000;175000;490000;0.25;0.7;7000000;2000000;20000;200",
			"sunDataID00009;convective zone;;;;[convection zone,convection,convective];205500;490000;695500;0.7;1;2000000;5500;200;0.0002",
			"sunDataID00010;photosphere;;;;;500",
			"sunDataID00011;chromosphere;;;;;10000",
			"sunDataID00012;corona;;;;;5000000",
			"sunDataID00013;prominences",
			"sunDataID00014;sunspots;[spots with lower temperature (3700K compared to 5700K of surrounding photosphere), last for several days (with large ones lasting for several weeks), magnetic regions on the Sun];;;[sun spots,sun⊤(dash)spots,sun spot,sunspot,sun⊤(dash)spot,spots,spot,solar spot,solar spots]",
			"sunDataID00015;granulae;;;;[granuls,granules,granule,granulaes]",
			"sunDataID00016;solar flare;;;;[flares,solar flares,flare,sun flare,sun flares,solarflare,solarflares,sunflare,sunflares,sun⊤(dash)flare,sun⊤(dash)flares,solar⊤(dash)flare,solar⊤(dash)flares]",
			"sunDataID00017;tachocline;interface layer between the radiative zone and the convective zone",
			"sunDataID00018;faculae;;;;;;;;;;;0",
			"sunDataID00019;heliosphere;;;;;;;;;;;0",
			"sunDataImagesID00001;sun layers blank;;assets/images/sun_layers1.jpg;NASA",
			"sunDataImagesID00002;sunspots;;assets/images/SunSpots.jpg;NASA;;;;;;;;0",
			"sunDataImagesID00003;sunspots;;assets/images/SunSpots2.jpg;Luc Rouppe van der Voort⊤(comma) Shahin Jafarzadeh (European Solar Telescope);;;;;;;;0",
			"sunDataImagesID00004;fibrils;;assets/images/SunSpotsFibrils.jpg;NASA;;;;;;;;0",
			"sunDataImagesID00005;fibrils;;assets/images/SunSpotsFibrils2.jpg;Luc Rouppe van der Voort⊤(comma) Shahin Jafarzadeh (European Solar Telescope);;;;;;;;0",
			"sunDataImagesID00006;sunspots labelled;;assets/images/SunSpotsLabelled.jpg;NASA;;;;;;;;0",
			"sunDataImagesID00007;penumbra;;assets/images/SunSpotsPenumbra.jpg;NASA;;;;;;;;0",
			"sunDataImagesID00008;pores;;assets/images/SunSpotsPores.jpg;NASA;;;;;;;;0",
			"sunDataImagesID00009;pores;;assets/images/SunSpotsPores2.jpg;Michal Sobotka⊤(comma) Carsten Denker (European Solar Telescope);;;;;;;;0",
			"sunDataImagesID00010;umbra;;assets/images/SunSpotsUmbra.jpg;NASA;;;;;;;;0"
		]
	},
	"solarSystemData": {
		"header": "ID;name;sentence_name;correct_name;image_arrow;image_photo;mass(kg);mass(billion_kgs);mass_copmared_to_earth;volume(km3);diameter;equatorial_radius(km);size(diameter)_compared_to_earth;equatorial_circumference(km);suface_area(km2);density(kg/m3);gravity(m/s2);escapeVelocity(km/s);escapeVelocity(km/h);rotationPeriod(hours);Orbit Period(Earth Years);distance_from_sun(km);distance_from_sun(million_km);perihelion(10E6km);aphelion(10E6km);orbitalPeriod(earth_years);orbitalPeriod(earth_days);mean_orbital_velocity(kmh);orbitalVelocity(km/s);orbitalInclination(degrees);orbitalEccentricity;equatorial_inclination(degrees);MeanTemperature(C);SurfacePressure(bars);number_of_Moons;RingSystem;GlobalMagneticField",
		"elemList": [
			"solarSystemData00001;Sun;the Sun;[Sun,the Sun];assets/images/solar_system_sun.jpg;assets/images/solar_system_image_sun.jpg;1989099999999999887809347321856;1989099999999999868928;333000;1409272569059859968;1391016;695508;109.16779155548579;4370005.6;6078747774547;1409;274;617.7;2223720;609.12;;0;0;;;;;;;;;7.25;15710000",
			"solarSystemData00002;Mercury;Mercury;[Mercury,Mercury];assets/images/solar_system_mercury.jpg;assets/images/solar_system_image_mercury.jpg;330104000000000018874368;330104000000000;0.06;60827208742;4879.4;2439.7;0.3829383142363836;15329.1;74797000;5427;3.7;4.25;15300;1407.5;4222.6;57909227;57.909227;46;69.8;0.2408467;88;170503;47.4;7;0.20563593;0.034;167;0;0;No;Yes",
			"solarSystemData00003;Venus;Venus;[Venus,Venus];assets/images/solar_system_venus.jpg;assets/images/solar_system_image_venus.jpg;4867320000000000119537664;4867320000000000;0.82;928415345893;12103.6;6051.8;0.9498979752001256;38024.6;460234317;5243;8.87;10.36;37296;⊤(dash)5832.4;2802;108209475;108.209475;107.5;108.9;0.61519726;224.7;126074;35;3.39;0.00677672;177.3;464;92;0;No;No",
			"solarSystemData00004;Earth;Earth;[Earth,Earth];assets/images/solar_system_earth.jpg;assets/images/solar_system_image_earth.jpg;5972190000000000390594560;5972190000000000;1;1083206916846;12742;6371;1;40030.2;510064472;5513;9.80665;11.19;40284;23.9;24;149598262;149.598262;147.1;152.1;1.0000174;365.2;107218;29.8;0;0.01671123;23.4393;15;1;1;No;Yes",
			"solarSystemData00005;Mars;Mars;[Mars,Mars];assets/images/solar_system_mars.jpg;assets/images/solar_system_image_mars.jpg;641692999999999994494976;641693000000000;0.11;163115609799;6779;3389.5;0.5320200910375137;21296.9;144371391;3934;3.71;5.03;18108;24.6;24.7;227943824;227.943824;206.7;249.3;1.8808476;687;86677;24.1;1.85;0.0933941;25.2;⊤(dash)65;0.01;2;No;No",
			"solarSystemData00006;Jupiter;Jupiter;[Jupiter,Jupiter];assets/images/solar_system_jupiter.jpg;assets/images/solar_system_image_jupiter.jpg;1898129999999999971155771392;1898130000000000000;318;1431281810739360;139822;69911;10.973316590802073;439263.8;61418738571;1326;24.79;60.2;216720;9.9;9.9;778340821;778.340821;740.6;816.4;11.862615;4332;47002;13.1;1.304;0.04838624;3.1;⊤(dash)110;Unknown*;79;Yes;Yes",
			"solarSystemData00007;Saturn;Saturn;[Saturn,Saturn];assets/images/solar_system_saturn.jpg;assets/images/solar_system_image_saturn.jpg;568319000000000010177478656;568319000000000000;95;827129915150897;116464;58232;9.14016637890441;365882.4;42612133285;687;10.4;36.09;129924;10.7;10.7;1426666422;1426.666422;1357.6;1506.5;29.447498;10756;34701;9.7;2.49;0.05386179;26.7;⊤(dash)140;Unknown*;83;Yes;Yes",
			"solarSystemData00008;Uranus;Uranus;[Uranus,Uranus];assets/images/solar_system_uranus.jpg;assets/images/solar_system_image_uranus.jpg;86810300000000005814353920;86810300000000000;14.5;68334355695584;50724;25362;3.980850729869722;159354.1;8083079690;1270;8.87;21.38;76968;⊤(dash)17.2;17.2;2870658186;2870.658186;2732.7;3001.4;84.016846;30687;24477;6.8;0.77;0.04725744;97.8;⊤(dash)195;Unknown*;27;Yes;Yes",
			"solarSystemData00009;Neptune;Neptune;[Neptune,Neptune];assets/images/solar_system_neptune.jpg;assets/images/solar_system_image_neptune.jpg;102409999999999997009461248;102410000000000000;17;62525703987421;49244;24622;3.864699419243447;154704.6;7618272763;1638;11.15;23.56;84816;16.1;16.1;4498396441;4498.396441;4471.1;4558.9;164.79132;60190;19566;5.4;1.77;0.00859048;28.3;⊤(dash)200;Unknown*;14;Yes;Yes",
			"solarSystemData00010;Moon;the Moon;[Moon,the Moon];;assets/images/solar_system_image_moon.jpg;73476730924573497753600;73476730924573.5;0.01;21971669064;3475;1737.5;0.2727201381258829;10917;37936694.79;3340;1.624;2.3755555555555556;8552;655.7;708.7;149598262;149.598262;0.363;0.406;0.07474332648870637;27.3;3680.5;1;5.1;0.055;6.68;⊤(dash)20;0;0;No;No",
			"solarSystemData00011;Pluto;Pluto;[Pluto,Pluto];;assets/images/solar_system_image_pluto.jpg;13089999999999999475712;13090000000000;0.002;6387259783;2302;1151;0.18066237639303093;7231.9;16647940;1850;0.66;1.23;4428;⊤(dash)153.3;153.3;5906440628;5906.440628;4436.8;7375.9;247.9397672826831;90560;16809;4.7;17.2;0.244;122.5;⊤(dash)225;1e⊤(dash)05;5;No;Unknown",
			"solarSystemData00012;Asteroid Belt;The Asteroid Belt;[Asteroid Belt,The Asteroid Belt,asteroid,belt,asteroidbelt,asteroid⊤(dash)belt];assets/images/solar_system_asteroidBelt.jpg",
			"solarSystemData00013;Kuiper Belt;the Kuiper Belt;[Kuiper Belt,the Kuiper Belt,kuiper,kuiper⊤(dash)belt,the kuiper⊤(dash)belt]",
			"solarSystemData00014;Oort Cloud;the Oort Cloud;[Oort Cloud,the Oort Cloud,oort,cloud]",
			"solarSystemData00015;known moons in solar system;;[known moons in solar system];;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;219",
			"solarSystemFoil0001;Meteor Cradle;the Meteor Cradle;[Meteor Cradle,the Meteor Cradle,meteor⊤(dash)cradle,meteorite cradle,meteorite⊤(dash)cradle,the meteorite cradle]",
			"solarSystemFoil0002;Asteroid Cloud;the Asteroid Cloud;[Asteroid Cloud,the Asteroid Cloud,asteroid⊤(dash)cloud,the asteroid⊤(dash)cloud]",
			"solarSystemFoil0003;Kuiper Cloud;the Kuiper Cloud;[Kuiper Cloud,the Kuiper Cloud,kuiper⊤(dash)cloud]",
			"solarSystemFoil0004;Oort Belt;the Oort Belt;[Oort Belt,the Oort Belt,oort,oort⊤(dash)belt,the oort⊤(dash)belt]",
			"solarSystemFoil0005;James Webb Belt;the James Webb Belt;[James Webb Belt,the James Webb Belt,james webb,james⊤(dash)webb⊤(dash)belt,james⊤(dash)webb belt,james webb⊤(dash)belt]",
			"solarSystemFoil0006;Hubble Belt;the Hubble Belt;[Hubble Belt,the Hubble Belt,hubble,hubble⊤(dash)belt,the hubble⊤(dash)belt]",
			"solarSystemFoil0007;James Webb Cloud;the James Webb Cloud;[James Webb Cloud,the James Webb Cloud]",
			"solarSystemFoil0008;Hubble Cloud;the Hubble Cloud;[Hubble Cloud,the Hubble Cloud]",
			"solarSystemFoil0009;Galilei Belt;the Galilei Belt;[Galilei Belt,the Galilei Belt]",
			"solarSystemFoil0010;Galilei Cloud;the Galilei Cloud;[Galilei Cloud,the Galilei Cloud]",
			"solarSystemFoil0011;Galileo Belt;the Galileo Belt;[Galileo Belt,the Galileo Belt]",
			"solarSystemFoil0012;Galileo Cloud;the Galileo Cloud;[Galileo Cloud,the Galileo Cloud]",
			"solarSystemFoil0013;Copernicus Belt;the Copernicus Belt;[Copernicus Belt,the Copernicus Belt]",
			"solarSystemFoil0014;Copernicus Cloud;the Copernicus Cloud;[Copernicus Cloud,the Copernicus Cloud]",
			"solarSystemFoil0015;Kepler Belt;the Kepler Belt;[Kepler Belt,the Kepler Belt]",
			"solarSystemFoil0016;Brahe Belt;the Brahe Belt;[Brahe Belt,the Brahe Belt]",
			"solarSystemFoil0017;Huygens Belt;the Huygens Belt;[Huygens Belt,the Huygens Belt]"
		]
	}
},
"lookup": {
   "comma": ",",
   "continents": "assets/images/continents.png",
   "countries": "assets/svg_images/countries.svg",
   "css": ".default{fill:grey;stroke:grey700;stroke-width:1.0;}.selected{fill:btnBlue;}.answer{fill:correct;}",
   "curly_close": "curly_close",
   "curly_open": "curly_open",
   "dash": "-",
   "double_dollar": "$$",
   "double_quotation": "\"",
   "greater": ">",
   "greenArrow": "assets/images/greenarrow.png",
   "greyArrow": "assets/images/greyarrow.png",
   "hash": "#",
   "learn": "assets/images/LearningJourney.png",
   "parentheses_close": ")",
   "parentheses_open": "(",
   "semicolon": ";",
   "shop": "assets/images/Shop.png",
   "single_quotation": "'",
   "single_quote": "'",
   "smaller": "<",
   "square_close": "]",
   "square_open": "[",
   "support": "assets/images/Support.png",
   "tectcss": ".selected{fill:btnBlue;opacity:.5;}.answer{fill:correct;opacity:.5;}",
   "double_hat": "^^"
},
"text": {
   "+1point": "+ 1 point",
   "aCancel": "YES, CANCEL",
   "accuracy": "ACCURACY WITHIN #A%#%.",
   "almost": "ALMOST",
   "altSub": "Alternatively, you could switch to a monthly plan at $2.99/month.",
   "annually": "Annually",
   "answer": "ANSWER",
   "Answer": "Answer",
   "aSubscribe": "Get 2 months for free when you subscribe for a year!",
   "aSubscribePrice": "$ 29.90",
   "aSwitch": "Switch to Annual Plan",
   "aOffer": "Get 2 months for free when you subscribe for a year!",
   "canCancel": ". You can cancel your subscription at any time.",
   "cancel": "CANCEL",
   "cancelSubs": "CANCEL SUBSCRIPTION?",
   "cancelQuest": "Are you sure you want to cancel your subscription?",
   "colon": ":",
   "confirm": "CONFIRM",
   "congrat": "CONGRATUATIONS",
   "continue": "CONTINUE",
   "corr": "CORRECT",
   "corrText": "CORRECT!",
   "editText": "Select element to edit.",
   "error": "Report Error",
   "errMessage": "Please describe the error.",
   "FAQ": "FAQ",
   "feedback": "Give Feedback",
   "forQuiz": "FOR THIS QUIZ!",
   "gameDone": "DONE",
   "genSetting": "General Settings",
   "highScore": "YOU GOT A NEW HIGH SCORE",
   "hintText": "Hint #n# of #t#",
   "incorr": "Incorrect",
   "invalidInput": "Input value is invalid for ",
   "journey": "Journey",
   "keep": "NO, KEEP IT",
   "knowYourWorld": "Get to know your world!",
   "language": "Language",
   "learning": "Your Learning",
   "learningJourney": "Learning Journey",
   "lives": "Lives",
   "livesSub": "SUBSCRIBE FOR UNLIMITED LIVES",
   "liveOut": "OUT OF LIVES",
   "looseLife": "YOU LOST A LIFE.",
   "looseProgress": "All progress will be lost.",
   "lowLives": "LOW ON LIVES",
   "maybe": "MAY BE YOU NEED A BIT MORE",
   "mCancel": "YES, CANCEL",
   "message": "Message",
   "mOffer": "You're currently getting 2 months for free with your annual plan. You will loose this discount if you switch to a monthly plan.",
   "month": "month",
   "monthly": "Monthly",
   "mSubscribe": "Get unlimited lives and unlock a world of geography knowledge for the price of a latte!",
   "mSubscribePrice": "$ 2.99",
   "mSwitch": "Switch to Monthly Plan",
   "next": "NEXT",
   "nextHint": "Next Hint",
   "nextLife": "Next life in ",
   "notFinish": "You may not be able to finish this game if you get more than #n# questions wrong.",
   "notQuite": "NOT QUITE.",
   "password": "Password",
   "playAgain": "You can explore articles and content but not play any games until you have lives again",
   "practice": "PRACTICE ON THIS ONE.",
   "prevHint": "Previous Hint",
   "problem": "Where did the error occur?",
   "pwNotMatch": "Passwords do not match!",
   "questions": "Questions?",
   "quit": "QUIT",
   "quitText": "Are you sure you want to quit?",
   "quizComplete": "YOU COMPLETED THE QUIZ!",
   "rate": "Rate App",
   "removeAds": "Remove Ads",
   "renew": "Your subscription will automatically be renewed on ",
   "repeatGame": "TRY AGAIN",
   "requiredField": "This field is required!",
   "resubscribe": "You can subscribe again at any time. You can still use the app but have limited lives.",
   "rni": "The Rate of Natural Increase (RNI) is based on which factors?",
   "search": "Search",
   "send": "SEND",
   "settingSubtitle": "Get everything sorted.",
   "setLanguage": "SET LANGUAGE",
   "share": "Share your archievement!",
   "shareApp": "Share App",
   "sharedScreenText": "Shared from Sirius Geo App",
   "sharedSubject": "Sirius Geo App",
   "sharedText": "https//play.google.com/store/apps/details?id=....\nhttps",
   "shopping": "Get everything you need!",
   "showAnswer": "SHOW ANSWER",
   "subject": "Subject",
   "submit": "SUBMIT",
   "support": "Contact Support",
   "supportSubtitle": "Get the help you need.",
   "subscribe": "Subscribe!",
   "subscribed": "SUBSCRIBED",
   "subscriptiona": "Your subscription",
   "subscriptionm": "Your subscription",
   "successSub": "You have successfully subscribed!",
   "successUnsub": "Your successfully unsubscribed.",
   "subscription": "Subscription Enquiry",
   "switchm": "SWITH TO MONTHLY PLAN",
   "testText": "It's just a test!!!",
   "tojourney": "TO LEARNING JOURNEY",
   "thisField": "this field",
   "topicSelection": "Topic Selection",
   "toShop": "GO TO SHOP",
   "totalQ": "Total Questions",
   "tryAgain": "TRY AGAIN",
   "typeAnswer": "Type Your Answer",
   "tryTeachMode": "TRY TEACHING MODE",
   "unlimited": "Unlimited Lives",
   "unsubscribed": "UNSUBSCRIBED",
   "usubscribed": "Your are subscribed!",
   "watchAd": "WATCH AD",
   "watchAnAd": "Watch an ad to get an extra life!",
   "wellDone": "WELL DONE!",
   "wontLoose": "Try again. You won't loose a life.",
   "year": "year",
   "yourSel": "Your Selection",
   "yourScore": "Your Score"
},
"patterns" :
{
        "facts": {
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ]
        },
        "clauses": {
            "mainView": "setConfig(config, patterns) ⋀ initApp() ⋀ ↲(mainScaffold)",
            "mainScaffold": [
                "⋓({_text: ℛ(model, title), _homeAction: 'main'}) ⋀  ⋓({_body: mainBody({_key: key()}), _title: mainAppBar, ",
                "_automaticallyImplyLeading: false, _child: mainBottomRow}) ⋀ ↲(scaffoldPat)"
            ],
            "mainBottomRow": [
                "⋓({_icHome: Φ(IconText, {_bar: true, _icon: 'home', _text: 'Home', _onTap: {_func: 'home'}}),",
                "_icSet: Φ(IconText, {_bar: true, _icon: 'settings', _text: 'Settings', _onTap: actions({_event: 'settings'})}),",
                "_icShop: Φ(IconText, {_bar: true, _icon: 'shop', _text: 'Shop', _onTap: {_func: route, _tapAction: 'shopScaffold'}})}) ⋀ ",
                "↲(Φ(Container, {_child: Φ(Row, (patMap(rowColHeader, (center, spaceAround, max, Ø)) ⋃ ",
                "{_children: [_icHome, _icSet, _icShop, Φ(SearchButton)]}))}))"
            ],
            "scaffoldPat": [
                "_title, _child, _body, _key, _flexibleSpace, _leading, _automaticallyImplyLeading | ",
                "mapPat(patHeader, (0.055, Ø, #FFFFFF, Ø, Ø, Ø)) ⋀ (_toolbarHeight ≔ ℛ(appBarHeight))",
                "↲(Φ(Scaffold, {_bottomNavigationBar: Φ(Container), _appBar: Φ(AppBar), _body: _body}))"
            ],
            "mainAppBar": [
                "_text, _flexibleSpace | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀  ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "hamburgerMenu": [
                "↲(Φ(IconButton, {_onTap: {_func: showDialog, _tapAction: Φ(MenuBubble, {_menuList: ℛ(model, menuList)})}, ",
                "_icon: 'menu_hamburger', _iconColor: ℛ(color, 'white')}))"
            ],
            "mainBody": [
                "_key | mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_itemRefMap ≔ ℛ(model, main)) ⋀ ",
                "(_itemRef ≔ _itemRefMap[elemList]) ⋀ ",
                "ℛ(setCache, 'elemItemList', 'elemItemList') ⋀ (_children ≔ [topicContainer, baseNavi]) ⋀ ↲(Φ(ListView))"
            ],
            "subScaffold": [
                "_itemRef, _itemRefMap, _title | τ('subScaffold') ⋀ mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ ",
                "(_children ≔ [topicContainer, subNavi]) ⋀ (_text ≔ _title) ⋀ ⋓({_body: Φ(ListView), _title: genAppBar, ",
                "_automaticallyImplyLeading: false, _child: mainBottomRow}) ⋀ ↲(scaffoldPat)"
            ],
            "topicContainer": [
                "⋓({_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), _width: ℛ(swratio, Ø, 1.0), ",
                "_topicSelection: ⊤(topicSelection), _smallTitle: ⊤(knowYourWorld)}) ⋀ (_topic ≔ Φ(Topic)) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [_topic, topicDialog({_dchild: journeyButton, _height: ℛ(hratio, Ø, 0.0985)})]) ⋀ ",
                "↲(Φ(Container, {_height: ℛ(hratio, Ø, 0.3202), _alignment: _alignment, _child: Φ(Stack), _width: _width}))"
            ],
            "topicDialog": [
                "_dchild, _height | (_child ≔ Φ(Container, {_child: _dchild, _alignment: decode(alignment, center)})) ⋀ ",
                "(_borderRadius ≔ decode(borderRadius, {radius: 24, type: circular})) ⋀ ",
                "⋓({_child: Φ(ClipRRect), _decoration: ℛ(appRes, diaDecoration), _height: _height, ",
                "_width: ℛ(swratio, Ø, 0.9947)}) ⋀ ↲(Φ(Align, {_child: Φ(Container), _alignment: decode(align, bottomCenter)}))"
            ],
            "journeyButton": [
                "(_e1 ≔ Φ(Text, {_text: ⊤(tojourney), _textStyle: ℛ(textStyle, ControlButtonTextStyle)})) ⋀ ",
                "(_e2 ≔ Φ(Icon, {_icon: rightArrowFull, _iconColor: ℛ(color, white), _iconSize: ℛ(sizeScale, Ø, 35.0)})) ⋀ ",
                "(_children ≔ [_e1, _e2]) ⋀ mapPat(rowColHeader, (center, spaceAround, Ø, Ø)) ⋀ ",
                "⋓({_child: Φ(Row), _height: ℛ(hratio, Ø, 0.0468), _width: ℛ(wratio, Ø, 0.64), ",
                "_beginColor: ℛ(color, correct), _endColor: ℛ(color, correctGradEnd)}) ⋀ ↲(Φ(TapItem, {_child: Φ(ColorButton), ",
                "_onTap: {_func: route, _tapAction: 'learnScaffold'}})) "
            ],
            "baseNavi": [
                "_itemRef, _itemRefMap | (_ta ≔ _itemRefMap['pattern']) ⋀ ⋓({_padding: ℛ(appRes, catBoxPadding), _childPattern: 'elemRow', ",
                "_childMap: {_itemRefMap: _itemRefMap, _tapAction: _ta[0], _sub: ℛ(model, sub)}}) ⋀ ⋓({_child: Φ(TapListItem), ",
                "_alignment: decode(alignment, topCenter), _width: ℛ(swratio, Ø, 1.0)}) ⋀ ↲(Φ(Container))"
            ],
            "elemRow": [
                "_item, _index, _itemRefMap, _sub | (_header ≔ _itemRefMap[header]) ⋀ (_textStyle ≔ ℛ(textStyle, SliderTextStyle)) ⋀ ",
                "(_ts ≔ ℛ(textStyle, SliderBoldTextStyle)) ⋀ mapPat(_header, _item) ⋀ (_text ≔ _name) ⋀ (((_sub = _ref) ⋀ ",
                "(_cardColor ≔ ℛ(Color, 'btnBlue')) ⋀ (_textStyle ≔ ℛ(textStyleColor, 'white', _textStyle)) ⋀ ",
                "(_ts ≔ ℛ(textStyleColor, 'white', _ts))) ⋁ (true)) ⋀ ⋓({_child: Φ(Text), _height: ℛ(hratio, Ø, 0.0468), _width: ℛ(swratio, Ø, 0.96)}) ⋀ ",
                "⋓({_bm: Φ(SizedBox), _itemRef: dataList(_itemRefMap, _item), _elemItemList: ℛ(getCache, 'elemItemList')}) ⋀ ",
                "(_children ≔ [_bm, _elemItemList]) ⋀  ⋓({_child: Φ(Column), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.015)}) ⋀ ⋓({_child: Φ(Card), _height: ℛ(hratio, Ø, 0.24)}) ⋀ ↲(Φ(Container))"
            ],
            "elemItemList": [
                "_itemRef, _index, _ref, _ts | (_ta ≔ _ref['pattern']) ⋀ ⋓({_childPattern: 'catCol', _direction: decode(axis, horizontal), ",
                "_childMap: ({_itemRefMap: _ref, _tapAction: _ta[0], _ts: _ts})}) ⋀ ",
                "(_child ≔ Φ(TapListItem)) ⋀ mapPat(patHeader, (0.172, Ø, Ø, Ø, centerLeft, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "catCol": [
                "_item, _index, _itemRefMap, _onTap, _progId, _ts | (_header ≔ _itemRefMap[header]) ⋀ mapPat(_header, _item) ⋀ ",
                "(_children ≔ catView) ⋀ mapPat(rowColHeader, (center, start, Ø, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "mapPat(patHeader, (0.172, Ø, Ø, Ø, Ø, Ø)) ⋀ (_itemRef ≔ dataList(_itemRefMap, _item)) ⋀ ",
                "(_onTap ≔ createEvent(route, {_itemRef: _itemRef, _itemRefMap: _ref, _title: _name, _progId: _progId, _PassScore: _PassScore})) ⋀",
                "(_width ≔ ℛ(hratio, Ø, 0.172)) ⋀ ↲(Φ(Container))"
            ],
            "catView": [
                "_item, _index, _name, _icon, _progId, _ts | (_sb ≔ Φ(SizedBox, {_height: 5.0})) ⋀ ",
                "⋓({_iconColor: ℛ(color, '#1785C1'), _iconSize: ℛ(sizeScale, Ø, 45.0)}) ⋀ ⋓({_child: Φ(Icon), _width: ℛ(hratio, Ø, 0.128353), ",
                "_decoration: ℛ(appRes, shadowDecoration)}) ⋀ mapPat(patHeader, (0.123, Ø, Ø, Ø, Ø, Ø)) ⋀ ",
                "(_ic ≔ Φ(NotiElem)) ⋀ (_tw ≔ Φ(Text, {_text: _name, _textStyle: _ts, _textAlign: center})) ⋀ ↲([_ic, _sb, _tw])"
            ],
            "subNavi": [
                "_itemRef, _itemRefMap | ⋓({_padding: ℛ(appRes, vertBoxPadding), _ts: ℛ(textStyle, SliderBoldTextStyle), _ta: _itemRefMap['pattern'], ",
                "_index: 0, _ti: #(_itemRef), _children: [], _alignment: 'spaceBetween', _spacing: ℛ(size20), _runSpacing: ℛ(size20)}) ⋀ itItem ⋀ ⋓({_child: Φ(Wrap), ",
                "_alignment: decode(alignment, topCenter), _width: ℛ(swratio, Ø, 1.0)}) ⋀ ↲(Φ(Container))"
            ],
            "itItem": [
                "_itemRef, _index, _itemRefMap, _ti, _ts, _children, _ta | (_item ≔ _itemRef[_index]) ⋀ (_child ≔ catCol) ⋀ ",
                "_c ≔ Φ(TapItem, {_child: _child, _tapAction: _ta[0], _onTap: _onTap}) ⋀ (_children ≪ _c) ⋀ (_index ≔ (_index + 1)) ⋀ ",
                "((_index < _ti) ⋀ ↲(itItem)) ⋁ ↲(true)"
            ],
            "groupScaffold": [
                "_itemRef, _itemRefMap, _title | (_title ≔ livesAppBar) ⋀ ℛ(setCache, 'elemItemList', 'elemItemList') ⋀ ",
                "(_onTap ≔ {_func: popRoute}) ⋀ (_leading ≔ Φ(IconButton)) ⋀ ",
                "(_body ≔ baseNavi) ⋀ ↲(scaffoldPat)"
            ],
            "mvcScaffold": [
                "_itemRef, _itemRefMap, _title, _progId, _PassScore | (_body ≔ mvcLayout) ⋀ (_title ≔ livesAppBar) ⋀ ",
                "⋓({_onTap: {_func: showDialog, _tapAction: mvc([quitDialog])}}) ⋀  (_leading ≔ Φ(IconButton)) ⋀ ",
                "(_child ≔ ƒ(mvc, [progRow])) ⋀ ↲(Φ(ScreenShot, {_child: scaffoldPat, _screenName: 'GameCompleteScreen'}))"
            ],
            "livesAppBar": [
                "_title, _flexibleSpace, _icon, _iconColor | (_valueKey ≔ '_text') ⋀ (_valueName ≔ 'lives') ⋀ (_textStyle ≔ ℛ(textStyle, TopicTxtStyle)) ⋀ ",
                "(_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Obx)) ⋀ (_child ≔ Φ(Center)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ (_lives ≔ Φ(SizedBox)) ⋀ ",
                "(_text ≔ _title) ⋀ (_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ ",
                "(_icon ≔ 'lives') ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ (_ic ≔ Φ(Icon)) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ ",
                "(_icon ≔ 'back') ⋀ (_children ≔ [_tText, _ic, _lives]) ⋀ ↲(Φ(Row))"
            ],
            "mvcLayout": [
                "_itemRef, _itemRefMap, _progId, _PassScore | ",
                "(_child ≔ mvc(newMvc, {_itemRef: _itemRef, _itemRefMap: _itemRefMap, _progId: _progId, _PassScore: _PassScore})) ⋀ ",
                "mapPat(patHeader, (0.97333, Ø, Ø, Ø, topCenter, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "learnScaffold": [
                "(_text ≔ ⊤(learningJourney)) ⋀ ⋓({_title: genAppBar, _child: mainBottomRow, _body: learnBody}) ⋀ ",
                "(_onTap ≔ {_func: popRoute}) ⋀ ↲(scaffoldPat)"
            ],
            "genAppBar": [
                "_flexibleSpace, _text, _leading | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀ ",
                "(_leading ≔ Φ(IconButton, {_icon: 'back', _iconColor: ℛ(color, 'white'), _onTap: {_func: popRoute}})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "learnBody": [
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_itemRefMap ≔ ℛ(model, learn)) ⋀ ",
                "(_itemRef ≔ _itemRefMap[elemList]) ⋀ ",
                "⋓({_width: ℛ(wratio, Ø, 0.05), _height: ℛ(hratio, Ø, 0.1), _child: Φ(ImageAsset, {_name: ℛ(lookup, greyArrow)})}) ⋀ ",
                "ℛ(setCache, greyImg, Φ(SizedBox)) ⋀ _child ≔ Φ(ImageAsset, {_name: ℛ(lookup, greenArrow)}) ⋀ ",
                "ℛ(setCache, greenImg, Φ(SizedBox)) ⋀ ℛ(setCache, 'elemItemList', 'learnItemList') ⋀ ",
                "(_baseNavi ≔  Φ(Container, {_padding: decode(padding, {top: ℛ(hratio, Ø, 0.18)}), _child: baseNavi})) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [learnContainer, _baseNavi]) ⋀ ",
                "(_child ≔ Φ(Container, {_alignment: _alignment, _child: Φ(Stack), _width: ℛ(swratio, Ø, 1.0)})) ⋀ ",
                "↲(Φ(SingleChildScrollView))"
            ],
            "learnContainer": [
                "↲(Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "_width: ℛ(swratio, Ø, 1.0), _topicSelection: ⊤(learning), _subtitle: ⊤(journey), _img: ℛ(lookup, learn)}))"
            ],
            "learnItemList": [
                "_item, _itemRef, _itemRefMap, _index, _ref, _ts | (_grProgId ≔ []) ⋀ (_lmap ≔ {_itemRef: _itemRef, _ref: _ref, ",
                "_grProgId: _grProgId, _index: _index, _ts: _ts}) ⋀ (_greenEvent ≔ createEvent('greenContainer', _lmap)) ⋀ ",
                "(_greyEvent ≔ createEvent('greyContainer', _lmap)) ⋀ mapPat(_itemRefMap[header], _item) ⋀ (_child ≔ Φ(GroupProgNoti)) ⋀ ",
                "mapPat(patHeader, (0.175, 1.0, Ø, Ø, center, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "learnCatContainer": [
                "_itemRef, _index, _ref, _grProgId, _childPattern, _ts | (_ta ≔ _ref['pattern']) ⋀ ⋓({_direction: decode(axis, horizontal), ",
                "_colWidth: (#(_itemRef) * ℛ(hratio, Ø, 0.2)), _childMap: ({_itemRefMap: _ref, _grProgId: _grProgId, _tapAction: _ta[0], _ts: _ts})}) ⋀ ",
                "(_child ≔ Φ(TapListItem))⋀ mapPat(patHeader, (0.175, _colWidth, Ø, Ø, center, Ø)) ⋀ ↲(Φ(Container))"
            ],
            "greenContainer": [
                "_itemRef, _index, _ref, _grProgId, _ts | (_childPattern ≔ 'learnCatCol') ⋀ ",
                "((_index = 0) ⋀ ↲(learnCatContainer)) ⋁ ((_alignment ≔ decode(align, {horiz: 0.0, vert: -3.8})) ⋀ ",
                "(_child ≔ ℛ(getCache, greenImg)) ⋀ (_o ≔ Φ(OverflowBox)) ⋀ ",
                "(_c ≔ Φ(Align, {_child: learnCatContainer, _alignment: decode(align, {horiz: 0.0, vert: 0.0})})) ⋀ ",
                "(_children  ≔ [_o, _c]) ⋀ ↲(Φ(Stack)))"
            ],
            "greyContainer": [
                "_itemRef, _index, _ref, _grProgId, _ts | (_childPattern ≔ 'dCatCol') ⋀ ",
                "(_alignment ≔ decode(align, {horiz: 0.0, vert: -3.8})) ⋀ (_child ≔ ℛ(getCache, greyImg)) ⋀ (_o ≔ Φ(OverflowBox)) ⋀ ",
                "(_c ≔ Φ(Align, {_child: learnCatContainer, _alignment: decode(align, {horiz: 0.0, vert: 0.0})})) ⋀ ",
                "(_children  ≔ [_o, _c]) ⋀ ↲(Φ(Stack))"
            ],
            "learnCatCol": "_item, _index, _itemRefMap, _onTap, _grProgId, _ts | (_r ≔ catCol) ⋀ (_grProgId ≪ _progId) ⋀ ↲(_r)",
            "dCatCol": [
                "_item, _index, _itemRefMap, _onTap, _grProgId, _ts | (_header ≔ _itemRefMap[header]) ⋀ mapPat(_header, _item) ⋀ ",
                "(_children ≔ catView) ⋀ mapPat(rowColHeader, (center, start, Ø, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "mapPat(patHeader, (0.1539, Ø, Ø, Ø, Ø, Ø)) ⋀ (_itemRef ≔ dataList(_itemRefMap, _item)) ⋀ ",
                "(_width ≔ ℛ(hratio, Ø, 0.155)) ⋀ (_grProgId ≪ _progId) ⋀ ↲(Φ(Opacity, {_child: Φ(Container), _opacity: 0.5}))"
            ],
            "supportScaffold": "_event | (_text ≔ 'Support') ⋀ ⋓({_title: genAppBar, _child: mainBottomRow, _body: supportBody}) ⋀ ↲(scaffoldPat)",
            "supportBody": [
                "_event | (_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [supportContainer, supportCards]) ⋀ ",
                "(_child ≔ Φ(Container, {_alignment: _alignment, _child: Φ(Stack), _width: ℛ(swratio, Ø, 1.0), _height: ℛ(shratio, Ø, 0.825)})) ⋀ ",
                "↲(Φ(SingleChildScrollView))"
            ],
            "supportContainer": [
                "↲(Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "_width: ℛ(swratio, Ø, 1.0), _topicSelection: 'Support', _smallTitle: ⊤(supportSubtitle), _img: ℛ(lookup, support)}))"
            ],
            "supportCards": [
                "_event | ((_event = subscription) ⋀ ↲(Φ(Container, {_child: Φ(Text, {_text: 'Not implemented'})}))) ⋁ (_formData ≔ {}) ⋀ supportFields ⋀ ",
                "(_title ≔ Φ(Text, {_text: ⊤(_event), _textStyle: ℛ(textStyle, BlueTitleStyle)})) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "⋓({_child: Φ(Padding, {_child: Φ(Form), _padding: ℛ(appRes, boxPadding)}), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.05)}) ⋀ ⋓({_child: Φ(Card), _width: ℛ(swratio, Ø, 1.0), _height: ℛ(hratio, Ø, 0.675)}) ⋀ ",
                "↲(Φ(Align, {_child: Φ(Container), _alignment: decode(align, bottomCenter)}))"
            ],
            "supportFields": [
                "_event, _formFields | (((_event = error) ⋀ (_sj  ≔ {_name: 'problem', _label: ⊤(problem), _isReq: true}) ⋀ ",
                "(_m ≔ {_name: 'errMessage', _label: ⊤(errMessage), _isReq: true, _maxLines: 4})) ⋁ ",
                "((_sj  ≔ {_name: 'subject', _label: ⊤(subject), _isReq: true}) ⋀ ",
                "(_m ≔ {_name: 'message', _label: ⊤(message), _isReq: true, _maxLines: 4}))) ⋀ ",
                "(_e ≔ {_name: 'Email', _inputType: 'email', _isReq: true}) ⋀ ↲(_formFields ≔ [_sj, _m, _e])",
                ""
            ],
            "lcard": [
                "_children | mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "⋓({_child: Φ(Padding, {_child: Φ(Column), _padding: ℛ(appRes, boxPadding)}), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.05)}) ⋀ ↲(Φ(Card))"
            ],
            "gSetting": [
                "mapPat(rowColHeader, (start, spaceBetween, max, Ø)) ⋀ ",
                "⋓({_g: Φ(Text, {_text: ⊤(genSetting), _textStyle: ℛ(textStyle, TitleTextStyle)}), ",
                "_l: Φ(Text, {_text: (⊤(language) + ⊤(colon) + ' ' + ℛ(model, userProfile, lang)), _textStyle: ℛ(textStyle, NormalTextStyle)}), ",
                "_lb: Φ(ItemElem, {_item: ⊤(setLanguage), _decoration: ℛ(appRes, selemDecoration), _height: ℛ(hratio, Ø, 0.03), ",
                "_width: ℛ(wratio, Ø, 0.25), _alignment: decode(alignment, center), _textStyle: ℛ(textStyle, SmallTextStyle)}), ",
                "_r: Φ(Text, {_text: ⊤(removeAds), _textStyle: ℛ(textStyle, NormalTextStyle)}), ",
                "_rb: Φ(ItemElem, {_item: ⊤(toShop), _decoration: ℛ(appRes, selemDecoration), _height: ℛ(hratio, Ø, 0.03), ",
                "_width: ℛ(wratio, Ø, 0.25), _alignment: decode(alignment, center), _textStyle: ℛ(textStyle, SmallTextStyle)}), ",
                "_d: Φ(Divider, {_color: ℛ(color, 'grey700')})}) ⋀ (_children ≔ [_l, _lb]) ⋀ (_tl ≔ Φ(Row)) ⋀ ",
                "(_children ≔ [_r, _rb]) ⋀ (_tr ≔ Φ(Row)) ⋀ ↲([_g, _d, _tl, _d, _tr])"
            ],
            "removeAd": [
                "⋓({_r: Φ(Text, {_text: ⊤(removeAds), _textStyle: ℛ(textStyle, NormalTextStyle)}), ",
                "_rb: Φ(ItemElem, {_item: ⊤(toShop), _decoration: ℛ(appRes, selemDecoration), _height: ℛ(hratio, Ø, 0.03)})}) ⋀ ",
                "↲([_r, _rb])"
            ],
            "aSetting": [
                "_event | mapPat(rowColHeader, (start, spaceBetween, max, Ø)) ⋀ (_textStyle ≔ ℛ(textStyle, NormalTextStyle)) ⋀ ",
                "(_tap ≔ 'fsmEvent') ⋀ (_tapAction ≔ 'supportfsm') ⋀ ⋓({_p: Φ(Text, {_text: 'App', _textStyle: ℛ(textStyle, TitleTextStyle)}), ",
                "_a: Φ(Text, {_text: ⊤(shareApp), _textStyle: _textStyle}), ",
                "_ai: Φ(Icon, {_icon: 'share', _iconColor: ℛ(color, 'btnBlue')}), _d: Φ(Divider, {_color: ℛ(color, 'grey700'), _thickness: 1.5})}) ⋀ ",
                "(_text ≔ 'FAQ') ⋀ (_tapEvent ≔ 'FAQ') ⋀ (_f ≔ textButton) ⋀ (_text ≔ ⊤(error)) ⋀ (_tapEvent ≔ 'error') ⋀ (_e ≔ textButton) ⋀ ",
                "(_text ≔ ⊤(support)) ⋀ (_tapEvent ≔ 'support') ⋀ (_c ≔ textButton) ⋀ (_text ≔ ⊤(feedback)) ⋀ (_tapEvent ≔ 'feedback') ⋀ (_g ≔ textButton) ⋀ ",
                "(_text ≔ ⊤('subscription')) ⋀ (_tapEvent ≔ 'subscription') ⋀ (_s ≔ textButton) ⋀ (_children ≔ [_a, _ai]) ⋀ ",
                "(_ta ≔ Φ(TapItem, {_child: Φ(Row), _onTap: {_func: _tap, _map: {_event: 'shareApp'}, _tapAction: ç(_tapAction)}})) ⋀ (((_event = 'settings') ⋀ (_children ≔ removeAd) ⋀ ",
                "(_tr ≔ Φ(TapItem, {_onTap: {_func: _tap, _map: {_event: 'shop'}, _tapAction: 'menufsm'}, _child: Φ(Row)})) ⋀ (_text ≔ 'Clear Cache') ⋀ (_tapEvent ≔ 'cCache') ⋀ ",
                "(_cc ≔ textButton) ⋀ ↲([_tr, _d, _cc, _d, _f, _d, _e, _d, _g, _d, _c, _d, _s, _d, _ta])) ⋁ ↲([_f, _d, _e, _d, _g, _d, _c, _d, _s, _d, _ta]))"
            ],
            "textButton": [
                "_text, _textStyle, _tap, _tapEvent, _tapAction | (_child ≔ Φ(Text)) ⋀ (_width ≔ ℛ(wratio, Ø, 0.6)) ⋀ ",
                "↲(Φ(TapItem, {_child: Φ(SizedBox), _onTap: {_func: _tap, _map: {_event: _tapEvent}, _tapAction: ç(_tapAction)}}))"
            ],
            "shopScaffold": "(_text ≔ 'Shop') ⋀ ⋓({_title: genAppBar, _child: mainBottomRow, _body: shopBody}) ⋀ ↲(scaffoldPat)",
            "shopBody": [
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_sb ≔ Φ(SizedBox, {_height: ℛ(hratio, Ø, 0.005)})) ⋀ (_userType ≔ ℛ(model, userProfile, userType)) ⋀ ",
                "(_fwid ≔ ℛ(sizeScale, Ø, 340.0)) ⋀ (((_userType = 'User') ⋀ (_children ≔ [shopContainer, _sb, watchAdDialog, _sb, subscription, _sb, shopQuestions, _sb])) ⋁ ",
                "(_children ≔ [shopContainer, _sb, userSubscription, _sb, switchSubscription,  _sb, shopQuestions, _sb])) ⋀ ℛ(setResxValue, 'mvcStack') ⋀ ",
                "ℛ(setResxValue, 'mvcStack', [Φ(ListView)]) ⋀ ↲(Φ(Obx, {_valueName: 'mvcStack', _child: Φ(Stack)}))"
            ],
            "shopContainer": [
                "_userType | (_topic ≔ Φ(Topic, {_decoration: ℛ(appRes, blueGradBD), _height: ℛ(hratio, Ø, 0.2463), ",
                "_width: ℛ(swratio, Ø, 1.0), _topicSelection: 'Shop', _smallTitle: ⊤(shopping), _img: ℛ(lookup, shop)})) ⋀ ",
                "(_alignment ≔ decode(alignment, topCenter)) ⋀ (_children ≔ [_topic, topicDialog({_dchild: shopLives, _height: ℛ(hratio, Ø, 0.0785)})]) ⋀ ",
                "↲(Φ(Container, {_height: ℛ(hratio, Ø, 0.2702), _alignment: _alignment, _child: Φ(Stack), _width: _width}))"
            ],
            "shopLives": [
                "_userType | (_textStyle ≔ 'BlueTitleStyle') ⋀ (((_userType = 'User') ⋀ (_text ≔ ⊤('lives')) ⋀ (_lt ≔ Φ(Text)) ⋀ (_valueKey ≔ '_text') ⋀ ",
                "(_valueName ≔ 'lives') ⋀ (_child ≔ Φ(Text)) ⋀ (_child ≔ Φ(Obx))) ⋁ ((_text ≔ ⊤('unlimited')) ⋀ (_lt ≔ Φ(Text)) ⋀ (_text ≔ '∞') ⋀ ",
                "(_textStyle ≔ 'BlueTitleStyle') ⋀ (_child ≔ Φ(Text)))) ⋀ (_child ≔ Φ(Center)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ (_lives ≔ Φ(SizedBox)) ⋀ ",
                "(_icon ≔ 'lives') ⋀ (_iconColor ≔ 'btnBlue') ⋀ (_ic ≔ Φ(Icon)) ⋀ (_children ≔ [_ic, _lives]) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_lb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 70.0), _child: Φ(Row)})) ⋀ ",
                "(_children ≔ [_lt, _lb]) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ↲(Φ(Row))"
            ],
            "watchAdDialog": [
                "(_t ≔ Φ(Text, {_text: ⊤('watchAnAd'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_children ≔ [_t, Φ(WatchAd)]) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ↲(topicDialog({_dchild: Φ(Column), _height: ℛ(hratio, Ø, 0.1485)}))"
            ],
            "subscription": [
                "_fwid | (_t ≔ Φ(Text, {_text: ⊤('subscribe'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_textStyle ≔  'MediumNormalTextStyle') ⋀ ",
                "(_text ≔ ⊤('monthly')) ⋀ (_mt ≔ Φ(Text)) ⋀ (_text ≔ ⊤('annually')) ⋀ (_at ≔ Φ(Text)) ⋀ (_textStyle ≔  'NormalSTextStyle') ⋀ ",
                "(_text ≔ ⊤('mSubscribe')) ⋀ (_mst ≔ Φ(Text)) ⋀ (_text ≔ ⊤('aSubscribe')) ⋀ (_ast ≔ Φ(Text)) ⋀ (_wid ≔ ℛ(sizeScale, Ø, 200.0)) ⋀ ",
                "mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ [_mt, _mst]) ⋀ (_mw ≔ Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 80.0), _width: _wid})) ⋀ ",
                "(_children ≔ [_at, _ast]) ⋀ ⋓({_aw: Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 60.0), _width: _wid}), _event: 'mSubscribePrice', ",
                "_wid: ℛ(sizeScale, Ø, 80.0), _time: getRenewDay({_nextMonth: true})}) ⋀ (_mb ≔ Φ(TapItemElem, {_event: _event, _width: _wid, ",
                "_spec: subscribedDial})) ⋀ (_time ≔ getRenewDay({})) ⋀ (_event ≔ 'aSubscribePrice') ⋀ (_ab ≔ Φ(TapItemElem, ",
                "{_event: _event, _width: _wid, _spec: subscribedDial})) ⋀ (_sb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 20.0)})) ⋀ ",
                "(_d ≔ Φ(Divider, {_color: ℛ(color, 'greyText'), _thickness: 1.5})) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ [_mw,_sb, _mb]) ⋀ (_mr ≔ Φ(Row)) ⋀ (_children ≔ [_aw, _sb, _ab]) ⋀ (_ar ≔ Φ(Row)) ⋀ ",
                "(_children ≔ [_t, _mr, _d, _ar]) ⋀ (_c ≔ Φ(Container, {_child: Φ(Column), ",
                "_height: ℛ(sizeScale, Ø, 180.0), _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: ℛ(sizeScale, Ø, 200.0)}))"
            ],
            "subscribedDial": [
                "_time, _event | τ(_event + ' ' + _time) ⋀ (((_event = 'unsubscribed') ⋀ (_text ≔ ⊤('successUnsub')) ⋀ ",
                "(_sm ≔ {}) ⋀ (_rt ≔ Φ(Text, {_text: ⊤('resubscribe'), _textStyle: 'CorrTxtStyle', _textAlign: decode(textAlign, center)}))) ⋁ ",
                "((_text ≔ ⊤('successSub')) ⋀ (_sm ≔ {_btnType: 'blue'}) ⋀(_rt ≔ Φ(Text, {_text: (⊤('renew') + _time + ⊤('canCancel')), ",
                "_textStyle: 'CorrTxtStyle', _textAlign: decode(textAlign, center)})))) ⋀ ",
                "(_textStyle ≔ 'BoldCorrTextStyle') ⋀ (_height ≔ ℛ(sizeScale, Ø, 80.0)) ⋀ (_t ≔ Φ(Text)) ⋀ (_width ≔ ℛ(sizeScale, Ø, 300.0)) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_children ≔ [_t, _rt]) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "(_onTap ≔ {_func: process, _tapAction: 'subscription', _map: {_event: _event, _height: ℛ(sizeScale, Ø, 100.0), _child: Φ(Container), ",
                "_time: _time, _onTap: {_func: 'popRoute'}}}) ⋀ ↲(_sm ⋃ {_onTap: _onTap})"
            ],
            "shopQuestions": [
                "_fwid | (_t ≔ Φ(Text, {_text: ⊤('questions'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_textStyle ≔ 'MediumNormalTextStyle') ⋀ ",
                "(_sb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 10.0)})) ⋀ (_text ≔ 'FAQs') ⋀ (_children ≔ [_sb, Φ(Text)]) ⋀ (_mt ≔ Φ(Row)) ⋀ ",
                "(_text ≔ ⊤('support')) ⋀ (_children ≔ [_sb,  Φ(Text)]) ⋀ (_at ≔ Φ(TapItem, {_child: Φ(Row), ",
                "_onTap: {_func: 'fsmEvent', _map: {_event: 'support'}, _tapAction: 'supportfsm'}})) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_d ≔ Φ(Divider, {_color: ℛ(color, 'greyText'), _thickness: 1.5})) ⋀ (_children ≔ [_mt, _d, _at]) ⋀ ",
                "(_cc ≔ Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 60.0), _width: _fwid})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_t, _cc]) ⋀ (_c ≔ Φ(Container, {_child: Φ(Column), ",
                "_height: ℛ(sizeScale, Ø, 80.0), _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: ℛ(sizeScale, Ø, 100.0)}))"
            ],
            "userSubscription": [
                "_userType, _fwid | (_t ≔ Φ(Text, {_text: ⊤('usubscribed'), _textStyle: 'BoldNormalTextStyle'})) ⋀ (_textStyle ≔  'MediumNormalTextStyle') ⋀ ",
                "(((_userType = 'mSubscriber') ⋀ (_text ≔ ⊤('subscriptionm')) ⋀ (_event ≔ 'mCancel')) ⋁ ((_text ≔ ⊤('subscriptiona')) ⋀ ",
                "(_event ≔ 'aCancel'))) ⋀ (_s ≔ Φ(Text)) ⋀ (_text ≔ (⊤('renew') + ℛ(model, userProfile, 'renew') + '.')) ⋀ ",
                "(_children ≔ [_s, Φ(SizedBox, {_height: ℛ(sizeScale, Ø, 10.0)}), Φ(Text)]) ⋀ ",
                "mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ (_cc ≔ Φ(Container, {_child: Φ(Column), _height: ℛ(sizeScale, Ø, 70.0), _width: ℛ(sizeScale, Ø, 300.0)})) ⋀ ",
                "(_ab ≔ Φ(BorderButton, {_event: 'cancel', _btnType: 'incorrect', _spec: {_onTap: cancelSubscription}})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_t, _cc, _ab]) ⋀ (_c ≔ Φ(Container, {_child: Φ(Column), ",
                "_height: ℛ(sizeScale, Ø, 160.0), _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: ℛ(sizeScale, Ø, 180.0)}))"
            ],
            "cancelSubscription": [
                "_event | (_child ≔ Φ(Text, {_text: ⊤('cancelQuest'), _textStyle: 'BoldInCorrTextStyle', _textAlign: decode(textAlign, center)})) ⋀ (_height ≔ ℛ(sizeScale, Ø, 40.0)) ⋀ ",
                "(_width ≔ ℛ(sizeScale, Ø, 300.0)) ⋀ (_c1 ≔ Φ(Container)) ⋀ (_map ≔ {_event: _event, _height: ℛ(sizeScale, Ø, 50.0), _child: _c1, ",
                "_btn2: {_event: 'keep', _spec: {_btnType: 'blue', _onTap: {_func: 'popRoute'}}}, _btn1: ({_event: _event, ",
                "_spec: subscribedDial({_event: 'unsubscribed'})})}) ⋀ ",
                "(((_event = 'mCancel') ⋀ ↲({_func: process, _tapAction: 'subscription', _map: _map})) ⋁ ((_child ≔ Φ(Text, {_text: ⊤('altSub'), _textStyle: 'ChoiceButnTxtStyle', ",
                "_textAlign: decode(textAlign, center)})) ⋀ (_time ≔ getRenewDay({_nextMonth: true})) ⋀ (_c2 ≔ Φ(Container)) ⋀ (_event ≔ 'mSubscribePrice') ⋀ ",
                "↲({_func: process, _tapAction: 'subscription', _map: (_map ⋃ {_height: _height, _sChild: _c2, _sEvent: 'switchm', _sHeight: ℛ(sizeScale, Ø, 50.0), _spec: subscribedDial})})))"
            ],
            "switchSubscription": [
                "_userType, _fwid | (((_userType = 'mSubscriber') ⋀ ⋓({_t: ⊤('aSwitch'), _amt: ⊤('annually'), _amst: ⊤('aOffer'), _event: 'aSubscribePrice', ",
                "_height: ℛ(sizeScale, Ø, 60.0), _time: getRenewDay({})})) ⋁ ⋓({_t: ⊤('mSwitch'), _amt: ⊤('monthly'), _amst: ⊤('mOffer'), _event: 'mSubscribePrice', ",
                "_height: ℛ(sizeScale, Ø, 120.0), _time: getRenewDay({_nextMonth: true})})) ⋀ (_t ≔ Φ(Text, {_text: _t, _textStyle: 'BoldNormalTextStyle'})) ⋀ ",
                "(_textStyle ≔  'MediumNormalTextStyle') ⋀ (_text ≔ _amt) ⋀ (_amt ≔ Φ(Text)) ⋀ (_textStyle ≔  'NormalSTextStyle') ⋀ (_text ≔ _amst) ⋀ (_amst ≔ Φ(Text)) ⋀ ",
                "mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_amt, _amst]) ⋀ (_sw ≔ ℛ(sizeScale, Ø, 20.0)) ⋀ ",
                "(_w ≔ Φ(Container, {_child: Φ(Column), _height: _height, _width: ℛ(sizeScale, Ø, 200.0)})) ⋀ (_b ≔ Φ(TapItemElem, ",
                "{_event: _event, _width: ℛ(sizeScale, Ø, 80.0), _spec: subscribedDial})) ⋀ (_sb ≔ Φ(SizedBox, {_width: _sw})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_height ≔ (_height + 2 * _sw)) ⋀ (_children ≔ [_w,_sb, _b]) ⋀ ",
                "(_r ≔ Φ(Row)) (_children ≔ [_t, _r]) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "(_c ≔ Φ(Container, {_child: Φ(Column), _height: _height, _width: _fwid})) ⋀ ↲(topicDialog({_dchild: _c, _height: (_height + _sw)}))"
            ],
            "fsmPat": [
                "_state, _event | ((_event = 'confirm') ⋀ ((_state = 'selected') ⋁ (_state = 'completed')) ⋀ ↲('CheckAns')) ⋁ ",
                "((_event = 'next') ⋀ (_state = 'confirmed') ⋀ ↲('NextGame')) ⋁ ",
                "((_event = 'tryAgain') ⋀ (_state = 'confirmed') ⋀ ↲('TryAgain')) ⋁ ",
                "((_event = 'showAnswer') ⋀ (_state = 'confirmed') ⋀ ↲('ShowAnswer')) ⋁ ",
                "((_event = 'gameDone') ⋀ ↲('GameDone')) ⋁ ((_event = 'repeatGame') ⋀ ↲('RepeatGame')) ⋁ ",
                "((_event = 'cancel') ⋀ ↲('Cancel')) ⋁ ((_event = 'continue') ⋀ ↲('Continue')) ⋁ ↲(Ø)"
            ],
            "MCfsm": "_state, _event | ((_event = 'select') ⋀ ((_state = 'start') ⋁ (_state = 'selected')) ⋀ ↲('Selection')) ⋁ ↲(fsmPat)",
            "Textfsm": [
                "_state, _event | ((_event = 'edited') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Editing')) ⋁ ",
                "((_event = 'empty') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Empty')) ⋁ ",
                "((_event = 'select') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Selection')) ⋁ ↲(fsmPat)"
            ],
            "Orderfsm": [
                "_state, _event | ((_event = 'select') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Selection')) ⋁ ",
                "((_event = 'dropSel') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('DropSel')) ⋁ ↲(fsmPat)"
            ],
            "Sentencefsm": [
                "_state, _event | ((_event = 'edited') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Editing')) ⋁ ",
                "((_event = 'empty') ⋀ ((_state = 'incomplete') ⋁ (_state = 'completed')) ⋀ ↲('Empty')) ⋁ ",
                "↲(Orderfsm) ⋁ ↲(fsmPat)"
            ],
            "Sliderfsm": "_state, _event | ((_event = 'confirm') ⋀ ↲('CheckAns')) ⋁ ↲(fsmPat)",
            "SvgMapfsm": "_state, _event | ↲(Sliderfsm)",
            "WebViewfsm": "_state, _event | ((_event = 'next') ⋀ ↲(_state)) ⋁ ↲(fsmPat)",
            "titleDialog": [
                "_event, _title | (_h ≔ Φ(Text, {_text: _title, _textStyle: ℛ(textStyle, TitleTextStyle)})) ⋀ ",
                "(_e ≔ Φ(IconButton, {_onTap: {_func: fsmEvent, _tapAction: 'closeDialog'}, _iconColor: 'grey700', _icon: 'cancel', _iconSize: 16.0})) ⋀ ",
                "(_mainAxisAlignment ≔ decode(mainAxisAlignment, spaceBetween)) ⋀ (_children ≔ [_h, _e]) ⋀ (_h ≔ Φ(Row)) ⋀ ",
                "mapPat(rowColHeader, (start, spaceBetween, max, Ø)) ⋀ (_children ≔ aSetting) ⋀ (_height ≔ ℛ(hratio, Ø, (0.035 * #(_children) + 0.05))) ⋀ ",
                "(_children ≔ [_h, lcard]) ⋀ ⋓({_child: Φ(Column), _width: ℛ(hratio, Ø, 0.9)}) ⋀ ↲(Φ(Container))"
            ],
            "closeDialog": "↲(popRoute())",
            "menufsm": [
                "_event, _title | (popRoute()) ⋀ (((_event = 'search') ⋀ ↲(onSearch({}))) ⋁ (((_event = 'settings') ⋁ (_event = 'support')) ⋀ changeTheme() ⋀ ",
                "↲(buildDialog('titleDialog', {_event: _event, _title: _title}))) ⋁ ((_event = 'home') ⋀ ↲(home())) ⋁ ((_event = 'shop') ⋀ ↲(route('shopScaffold'))))"
            ],
            "supportfsm": [
                "_event | (popRoute()) ⋀ ((_event = shareApp) ⋀ ↲(onShare({_text: ⊤(sharedText), _subject: ⊤(sharedSubject)}))) ⋁ ",
                "((_event = cCache) ⋀ ↲(clearCache())) ⋁ (↲(route('supportScaffold')))"
            ],
            "actions": [
                "_event, _vars | ((_event = 'settings') ⋀ ↲({_func: fsmEvent, _map: {_event: 'settings', _title: 'Settings'}, _tapAction: 'menufsm'})) ⋁ ",
                "((_event = 'shop') ⋀ ↲({_func: route, _tapAction: 'shopScaffold'}))"
            ],
            "testBox": "(_text ≔ testText) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
"userProfile": {
   "appVersion": "",
   "userToken": "",
   "reset": true,
   "lang": "English (UK)",
   "locale": "de",
   "configLives": 100,
   "lives": 100,
   "liveTimestamp": 0,
   "progress": [],
   "versions": "0.0",
   "userType": "User",
   "timestamp": 1636410287,
   "lastsync": 1627510285,
   "renew": ""
	},
"search": [
	"Articles⇒items:23;",
	"Continents⇒groups:0;Country⇒groups:1;Countries⇒groups:1;Identify Continent⇒items:0;"
],
"menuList": [
	"home;Home",
	"support;Support",
	"shop;Shop",
	"search;Search;startSearch",
	"support;Support"
]
}