{
    "title": "Sirius Prototype",
    "config": {
        "categories": {
            "dataStart": "GR1",
            "header": "CID;name;ref;GR1;GR2;GR3;GR4;GR5",
            "elemList": [
                "WorlC001;World;groups;2;3;1;4",
                "ContiC001;Continents;groups;0",
                "CountC001;Countries;groups;1",
                "WaterC001;Water;groups;5;6;7",
                "MountC001;Mountains;groups;8;9;10",
                "IslanC001;Islands;groups;11",
                "CitieC001;Cities;groups;12;13"
            ]
        },
        "groups": {
            "dataStart": "T1",
            "header": "GRID;name;icon;ref;T1;T2;T3;T4;T5",
            "elemList": [
                "ContGR001;Continents;continents;types;0;1;2;3",
                "CounGR001;Countries;countries;types;4;5;6;7",
                "WorIGR001;World Intro;atmosphere;types",
                "hemiGR001;Hemisphere;climate_zones;types",
                "SolaGR001;Solar System;solar_system;types",
                "OceaGR001;Oceans;oceans;types",
                "RiveGR001;Rivers;rivers;types",
                "LakEGR001;Lakes In Europe;lakes;types",
                "MouRGR001;Mountain Ranges;glacier;types",
                "MounGR001;Mountains;mountains;types",
                "VolcGR001;Volcanoes;volcanoes;types",
                "IslaGR001;Islands;islands;types",
                "CapiGR001;Capitals;capitals;types",
                "CitiGR001;Cities;cities;types"
            ]
        },
        "types": {
            "dataStart": "G1",
            "header": "TID;name;ref;G1;G2;G3;G4;G5;G6;G7;G8;G9;G10",
            "elemList": [
                "ContiT001;Level 1;games;0;1",
                "ContiT002;Level 2;games;2",
                "ContiT003;Learn;tutorials;0",
                "ContiT004;Article;articles;0",
                "CountT005;Level 1;games;3",
                "CountT006;Level 2;games;4",
                "CountT007;Learn;tutorials;1",
                "CountT008;Article;articles;1"
            ]
        },
        "games": {
            "dataStart": "Q1",
            "header": "GID;name;icon;PassScore(fraction);ref;bGHeight;Q1;Q2;Q3;Q4;Q5;Q6;Q7;Q8;Q9;Q10;Q11;Q12;Q13;Q14;Q15;Q16;Q17;Q18;Q19;Q20;Q21;Q22;Q23;Q24;Q25;Q26;Q27;Q28;Q29;Q30;Q31;Q32;Q33;Q34;Q35;Q36;Q37;Q38;Q39;Q40;Q41;Q42;Q43;Q44;Q45;Q46;Q47;Q48;Q49;Q50",
            "elemList": [
                "ContG0001;Identify Continent;continents;0.75;questions;0.4926;0;0;0",
                "ContG0002;Continent Size;continents;0.75;questions;0.4926;1;2",
                "ContG0003;Continent Quiz;continents;0.75;questions;0.4926;3;3;3",
                "CounG0004;Identify Country;countries;0.75;questions;0.4926;6",
                "CounG0004;Country Quiz;countries;0.75;questions;0.4926;5",
                "WorIG0001;World Intro;atmosphere;0.75;questions;0.4926",
                "hemiG0001;Hemisphere;climate_zones;0.75;questions;0.4926",
                "SolaG0001;Solar System;solar_system;0.75;questions;0.4926",
                "OceaG0001;Oceans;oceans;0.75;questions;0.4926",
                "RiveG0001;Rivers;rivers;0.75;questions;0.4926",
                "LakEG0001;Lakes In Europe;lakes;0.75;questions;0.4926",
                "MouRG0001;Mountain Ranges;glacier;0.75;questions;0.4926",
                "MounG0001;Mountains;mountains;0.75;questions;0.4926",
                "VolcG0001;Volcanoes;volcanoes;0.75;questions;0.4926",
                "IslaG0001;Islands;islands;0.75;questions;0.4926",
                "CapiG0001;Capitals;capitals;0.75;questions;0.4926",
                "CitiG0001;Cities;cities;0.75;questions;0.4926"
            ]
        },
        "tutorials": {
            "dataStart": "TU1",
            "header": "TUID;name;icon;ref;bGHeight;TU1;TU2;TU3;TU4;TU5;TU6;TU7;TU8;TU9;TU10;",
            "elemList": [
                "ConTU0001;Tutorial;tutorial;questions;0.4926",
                "CouTU0002;Tutorial;tutorial;questions;0.4926"
            ]
        },
        "articles": {
            "dataStart": "A1",
            "header": "AID;name;icon;ref;bGHeight;A1;A2;A3;A4;A5;A6;A7;A8;A9;A10;",
            "elemList": [
                "ContA0001;Article;article;questions;0.4926",
                "CounA0002;Article;article;questions;0.4926"
            ]
        },
        "questions": {
            "header": "QID;Q_Pattern_Name;ref;Question;Q_Image;range;Answer_Text;Answer;Accepted_Answers;AnswerOptions;Vslider_ranks;Vslider_answer_rank;Hslider_max;Hslider_min;Hslider_scale1;Hslider_answer;Hslider_scale2;Hslider_answer_scale2;Hslider_scale2_max;Hslider_scale2_min;HintWarning;Hint1;Hint2;Hint3;Hint4;Hint5;Hint6;Hint7;Hint8;Hint9;Hint10",
            "elemList": [
                "ContQ0001;MC;contData;What is this continent?;(_ans,2);6;This continent is #(_ans,1)#.;(_ans,1);;([0‥6],1)",
                "ContQ0002;Order;contData;Sort the continents by surface area from largest to smallest;;;[Asia, Africa, North America, South America, Antarctica, Europe, Australia];[Asia, Africa, North America, South America, Antarctica, Europe, Australia];;[Africa, Antarctica, Asia, Australia, Europe, North America, South America]",
                "ContQ0003;Text;;What is the largest continent by surface area?;;;The largest continent is Asia.;Asia",
                "ContQ0004;ImageText;contData;What is this continent?;(_ans,2);6;This continent is #(_ans,1)#.;(_ans,1)",
                "ContQ0005;MutipleText;contData;Name the 7 continents;;;[Asia, Africa, North America, South America, Antarctica, Europe, Australia];[Asia, Africa, North America, South America, Antarctica, Europe, Australia]",
                "CounQ0006;MC;countryData;What is the largest country by area?;;6;The largest country is #(188,2)#;(188,2);;([15, 32, 43, 48, 109, 110, 122, 211, 241],2)",
                "CounQ0007;MC;countryData;What is the flag of #(_ans, 1)#?;;6;;(_ans,3);;([15, 32, 43, 48, 109, 110, 122, 211, 241],3)"
            ]
        },
        "contData": {
            "header": "CDID;Name;Image",
            "elemList": [
                "Cont00001;Africa;assets/images/Africa.png",
                "Cont00002;Antarctica;assets/images/Antarctica.png",
                "Cont00003;Asia;assets/images/Asia.png",
                "Cont00004;Australia;assets/images/Australia.png",
                "Cont00005;Europe;assets/images/Europe.png",
                "Cont00006;North America;assets/images/NorthAmerica.png",
                "Cont00007;South America;assets/images/SouthAmerica.png"
            ]
        },
        "countryData": {}
    },
    "patterns": {
        "facts": {
            "testText": "It's just a test!!!",
            "journey": "TO LEARNING JOURNEY",
            "knowYourWorld": "Get to know your world!",
            "topicSelection": "Topic Selection",
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ]
        },
        "clauses": {
            "mainView": "ƒ(setConfig, (config, patterns)) ⋀ ↲(mainScaffold)",
            "mainScaffold": [
                "(_text ≔ ℛ(model, title)) ⋀ (_title ≔ Φ(Text)) ⋀ (_body ≔ mainBody) ⋀ ",
                "↲(scaffoldPat)"
            ],
            "scaffoldPat": [
                "_title, _child, _body | (_appBar ≔ Φ(AppBar)) ⋀ ",
                "ƒ(mapPat, (patHeader, (0.05049, Ø, #FFFFFF, Ø, Ø, Ø))) ⋀ ",
                "(_bottomNavigationBar ≔ Φ(Container)) ⋀ ↲(Φ(Scaffold))"
            ],
            "appBar": [],
            "mainBody": [
                "ƒ(mapPat, (rowColHeader, (center, spaceBetween, max, Ø))) ⋀ (_itemRefMap ≔ categories) ⋀ ",
                "(_itemRef ≔ (_itemRefMap @ elemList)) ⋀ (_naviHR ≔ 0.6) ⋀ ",
                "(_nextMap ≔ ℳ(('_tapAction', 'groupScaffold'))) ⋀ (_children ≔ ℒ(topicContainer, baseNavi)) ⋀ ",
                "(_child ≔ Φ(ListView)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
            ],
            "topicContainer": [
                "(_boxDecoration ≔ ℛ(appRes, blueGradBD)) ⋀ ƒ(mapPat, (patHeader, (0.2463, 1.0, Ø, Ø, Ø, Ø))) ⋀ ",
                "(_topicSelection ≔ topicSelection) ⋀ (_knowYourWorld ≔ knowYourWorld) ⋀ (_topic ≔ Φ(Topic)) ⋀ ",
                "(_alignment ≔ ƒ(decode, (alignment, topCenter))) ⋀ (_children ≔ ℒ(_topic, topicDialog)) ⋀ (_child ≔ Φ(Stack)) ⋀ ",
                "(_boxDecoration ≔ Ø) ⋀ ƒ(mapPat, (patHeader, (0.3202, 1.0, Ø, Ø, Ø, Ø))) ⋀ ↲(Φ(Container))"
            ],
            "topicDialog": [
                "(_child ≔ journeyButton) ⋀ (_alignment ≔ ƒ(decode, (alignment, center))) ⋀ (_child ≔ Φ(Container)) ⋀ ",
                "(_borderRadius ≔ ƒ(decode, (borderRadius, ℳ(('radius', 24), ('type', circular))))) ⋀ ",
                "(_child ≔ Φ(ClipRRect)) ⋀ (_boxDecoration ≔ ℛ(appRes, diaDecoration)) ⋀ ",
                "ƒ(mapPat, (patHeader, (0.0985, 0.9947, Ø, Ø, Ø, Ø))) ⋀ (_child ≔ Φ(Container)) ⋀ ",
                "(_align ≔ ƒ(decode, (align, bottomCenter))) ⋀ ↲(Φ(Align))"
            ],
            "journeyButton": [
                "(_text ≔ journey) ⋀ (_textStyle ≔ ℛ(textStyle, ControlButtonTextStyle)) ⋀ ",
                "(_e1 ≔ Φ(Text)) ⋀ (_icon ≔ rightArrowFull) ⋀ (_iconColor ≔ ℛ(color, white)) ⋀ ",
                "(_size ≔ 35) ⋀ (_e2 ≔ Φ(Icon)) ⋀ (_children ≔ ℒ(_e1, _e2)) ⋀ ",
                "ƒ(mapPat, (rowColHeader, (center, spaceAround, Ø, Ø))) ⋀ ",
                "(_child ≔ Φ(Row)) ⋀ ƒ(mapPat, (patHeader, (0.0468, 0.64, Ø, Ø, Ø, Ø))) ⋀ ",
                "(_beginColor ≔ ℛ(color, correct)) ⋀ (_endColor ≔ ℛ(color, correctGradEnd)) ⋀ ↲(Φ(ColorButton))"
            ],
            "baseNavi": [
                "_itemRef, _itemRefMap, _naviHR, _nextMap | (_padding ≔ ℛ(appRes, catBoxPadding)) ⋀ ",
                "(_physics ≔ ℛ(appRes, clampingScrollPhysics)) ⋀ (_childPattern ≔ 'elemRow') ⋀ ",
                "(_childMap ≔ ℳ(('_itemRefMap', _itemRefMap), ('_nextMap', _nextMap))) ⋀ (_child ≔ Φ(TapListItem)) ⋀ ",
                "ƒ(mapPat, (patHeader, (_naviHR, 1.0, Ø, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
            ],
            "elemRow": [
                "_item, _index, _itemRefMap, _nextMap | (_header ≔ (_itemRefMap @ header)) ⋀ ",
                "ƒ(mapPat, (_header, _item)) ⋀ (_text ≔ _name) ⋀ (_textStyle ≔ ℛ(textStyle, SliderTextStyle)) ⋀ ",
                "(_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (0.0468, 0.96, Ø, Ø, Ø, Ø))) ⋀ ",
                "(_bm ≔ Φ(SizedBox)) ⋀ (_itemRef ≔ ƒ(dataList, (_itemRefMap, _item))) ⋀ ",
                "(_children ≔ ℒ(_bm, elemItemList)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "(_elevation ≔ 5.0) ⋀ (_child ≔ Φ(Card)) ⋀ ƒ(mapPat, (patHeader, (0.2217, 1.0, Ø, Ø, Ø, Ø))) ⋀ ↲(Φ(Container))"
            ],
            "elemItemList": [
                "_itemRef, _index, _ref, _nextMap | (_childPattern ≔ 'catCol') ⋀ (_direction ≔ ƒ(decode, (axis, horizontal))) ⋀ ",
                "(_physics ≔ ℛ(appRes, clampingScrollPhysics)) ⋀ (_childMap ≔ (ℳ(('_itemRefMap', _ref)) ⊌ _nextMap)) ⋀ ",
                "(_child ≔ Φ(TapListItem)) ⋀ ",
                "ƒ(mapPat, (patHeader, (0.1539, Ø, Ø, Ø, centerLeft, Ø))) ⋀ ↲(Φ(Container))"
            ],
            "catCol": [
                "_item, _index, _itemRefMap, _onTap | (_header ≔ (_itemRefMap @ header)) ⋀ ƒ(mapPat, (_header, _item)) ⋀ ",
                "(_children ≔ catView) ⋀ ƒ(mapPat, (rowColHeader, (center, center, Ø, Ø))) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                "ƒ(mapPat, (patHeader, (0.1539, 0.2667, Ø, Ø, Ø, Ø))) ⋀ (_itemRef ≔ ƒ(dataList, (_itemRefMap, _item))) ⋀ ",
                "(_onTap ≔ ƒ(createEvent, (route, ℳ(('_itemRef', _itemRef), ('_itemRefMap', _ref), ('_title', _name), ('_bGHeight', _bGHeight))))) ⋀ ↲(Φ(Container))"
            ],
            "catView": [
                "_item, _index, _name, _icon | ",
                "(_iconColor ≔ ℛ(color, #1785C1)) ⋀ (_iconSize ≔ 45.0) ⋀ (_child ≔ Φ(Icon)) ⋀ ",
                "(_boxDecoration  ≔ ℛ(appRes, shadowDecoration)) ⋀ ƒ(mapPat, (patHeader, (0.1232, 0.2133, Ø, Ø, Ø, Ø))) ⋀ (_ic ≔ Φ(Container)) ⋀ ",
                "(_text ≔ _name) ⋀ (_textStyle ≔ ℛ(textStyle, SliderBoldTextStyle)) ⋀ (_tw ≔ Φ(Text)) ⋀ ",
                "↲(ℒ(_ic, _tw))"
            ],
            "groupScaffold": [
                "_itemRef, _itemRefMap | (_text ≔ ℛ(model, title)) ⋀ (_title ≔ Φ(Text)) ⋀ ",
                "(_naviHR ≔ 0.8) ⋀ (_nextMap ≔ ℳ(('_tapAction', 'mvcScaffold'))) ⋀ (_body ≔ baseNavi) ⋀ ↲(scaffoldPat)"
            ],
            "mvcScaffold": [
                "_itemRef, _itemRefMap, _title, _bGHeight | (_text ≔ _title) ⋀ (_title ≔ Φ(Text)) ⋀ ",
                "(_boxDecoration ≔ ℛ(appRes, bgDecoration)) ⋀ ƒ(mapPat, (patHeader, (_bGHeight, 1.0, Ø, Ø, Ø, Ø))) ⋀ ",
                "(_notifier ≔ ƒ(createNotifier, ℒ(Φ(Container), mvcLayout))) ⋀ (_body ≔ Φ(ValueStack)) ⋀ ",
                "ƒ(mvc, (add, ℳ(('_mvcScaffNoti', _notifier)))) ⋀ ↲(scaffoldPat)"
            ],
            "mvcLayout": [
                "_itemRef, _itemRefMap | (_child ≔ ƒ(mvc, (newMvc, ℳ(('_itemRef', _itemRef), ('_itemRefMap', _itemRefMap))))) ⋀ ",
                "↲(Φ(Container))"
            ],
            "testBox": "(_text ≔ testText) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
    "userProfile": {
        "lives": 5,
        "progress": []
    }
}